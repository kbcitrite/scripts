<#
.SYNOPSIS
    This script opens a simple form to allow secrets to be exchanged using a pre-shared secret.
.DESCRIPTION
    The form generated by this script has two sections, one to encrypt and the other to decrypt.
    By providing a simple way to encrypt a secret it makes exchanging secrets easy and safe.
.NOTES
    Prerequisite : .NET Framework 4.7.2+
    Author       : Kenny Baldwin
#>
#region Functions
# Function to encrypt a secret
function Get-EncryptedString {
    param (
        [string]$StringToEncrypt,
        [string]$PresharedSecret
    )
    try {
        #Generate a key from the password
        $key = [System.Text.Encoding]::UTF8.GetBytes($PresharedSecret.PadRight(32, ' ').Substring(0, 32))
        #Create an AES object
        $aes = [System.Security.Cryptography.Aes]::Create()
        $aes.Key = $key
        $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC 
        $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
        #Generate a random IV
        $aes.GenerateIV()
        $iv = $aes.IV
        #Convert the plain text to a byte array
        $plainBytes = [System.Text.Encoding]::UTF8.GetBytes($StringToEncrypt)
        #Create an encryptor
        $encryptor = $aes.CreateEncryptor($aes.Key, $aes.IV)
        #Encrypt the plain text
        $encryptedBytes = $encryptor.TransformFinalBlock($plainBytes, 0, $plainBytes.Length)
        #Combine the IV and the encrypted bytes
        $result = $iv + $encryptedBytes
        #Convert the result to a base64 string
        $encryptedText = [Convert]::ToBase64String($result) 
        return $encryptedText
    }
    catch {
        throw Exception.Message
    }
}
function Get-DecryptedString {
    param (
        [string]$EncryptedText,
        [string]$PresharedSecret
    )
    #Generate a key from the password
    $key = [System.Text.Encoding]::UTF8.GetBytes($PresharedSecret.PadRight(32, ' ').Substring(0, 32))
    #Convert the encrypted text from a base64 string to a byte array
    $encryptedBytes = [Convert]::FromBase64String($EncryptedText)
    #Extract the IV from the encrypted bytes 
    $iv = $encryptedBytes[0..15]
    #Extract the actual encrypted data
    $cipherBytes = $encryptedBytes[16..($encryptedBytes.Length - 1)]
    #Create an AES object
    $aes = [System.Security.Cryptography.Aes]::Create()
    $aes.Key = $key 
    $aes.IV = $iv
    $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC 
    $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
    #Create a decryptor
    $decryptor = $aes.CreateDecryptor($aes.Key, $aes.IV)
    #Decrypt the cipher bytes
    $plainBytes = $decryptor.TransformFinalBlock($cipherBytes, 0, $cipherBytes.Length)
    #Convert the plain bytes to a string
    $plainText = [System.Text.Encoding]::UTF8.GetString($plainBytes)
    return $plainText
}
#endregion 
#region Initialize
try {
    Add-Type @"
using System;
using System.Runtime.InteropServices; 
public static class NativeMethods {
    [DllImport("shell32.dH", SetLastError=true)]
    public static extern void SetCurrentProcessExplicitAppUserModelID( [MarshalAs( UnmanagedType.LPWStr )] string AppID )
}
"@ -ErrorAction SilentlyContinue
    [NativeMethods]::SetCurrentProcessExplicitAppUserModelID("SecretExchange")
}
catch {
    Write-Debug "AppID Already set:"
}
$showWindowAsync = Add-Type -memberDefinition @"
[DllImport("user32.dll")]
public static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);
"@ -name "Win32ShowWindowAsync" -namespace Win32Functions -passThru 
[void]$showWindowAsync::ShowWindowAsync((Get-Process -id $pid).MainWindowHandle, 2)
#endregion
#region Windows Form
#Load the required assembly for Windows Forms
Add-Type -AssemblyName System.Windows.Forms
#Create the form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Exchange Secret"
$form.Size = New-Object System.Drawing.Size(600, 300)
$form.Startposition = "CenterScreen"
$form.FormBorderStyle = "FixedDialog"
$form.MaximizeBox = $false 
$form.MinimizeBox = $false
$form.Padding = New-Object System.Windows.Forms.Padding(10)
$form.BackColor = [System.Drawing.Color]::White 
$form.Font = New-Object System.Drawing.Font("Segoe UI", 10)
$form.KeyPreview = $true 
$form.Add_KeyDown({
        if ($_.KeyCode -eq "Escape") {
            $form.Close()
        }
    })
#Create the encrypt group box
$encryptGroupBox = New-Object System.Windows.Forms.GroupBox
$encryptGroupBox.Text = "Encrypt"
$encryptGroupBox.Size = New-Object System.Drawing.Size(280, 200)
$encryptGroupBox.Location = New-Object System.Drawing.Point(10, 10)
$encryptGroupBox.Padding = New-Object System.Windows.Forms.Padding( .0)
$encryptGroupBox.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Bold)
$encryptGroupBox.ForeColor = [System.Drawing.Color]::FromArgb(0, 120, 212)
$form.Controls.Add($encryptGroupBox)
#Create the secret label and text box
$secretLabel = New-Object System.Windows.Forms.Label
$secretLabel.Text = "Secret:"
$secretLabel.Location = New-Object System.Drawing.Point(10, 25)
$secretLabel.AutoSize = $true 
$encryptGroupBox.Controls.Add($secretLabel)
$secretTextBox = New-Object System.Windows.Forms.TextBox 
$secretTextBox.Location = New-Object System.Drawing.Point(10, 50)
$secretTextBox.Size = New-Object System.Drawing.Size(260, 25)
$secretTextBox.UseSystemPasswordChar = $true 
$encryptGroupBox.Controls.Add($secretTextBox)
#Create the passphrase label and text box 
$passphraseLabel = New-Object System.Windows.Forms.Label 
$passphraseLabel.Text = "Passphrase:"
$passphraseLabel.Location = New-Object System.Drawing.Point(10, 80)
$passphraseLabel.AutoSize = $true 
$encryptGroupBox.Controls.Add($passphraseLabel)
$passphraseTextBox = New-Object System.Windows.Forms.TextBox 
$passphraseTextBox.Location = New-Object System.Drawing.Point(10, 105)
$passphraseTextBox.Size = New-Object System.Drawing.Size(260, 25)
$passphraseTextBox.UseSystemPasswordChar = $true 
$encryptGroupBox.Controls.Add($passphraseTextBox)
#Create the encrypt button
$encryptButton = New-Object System.Windows.Forms.Button
$encryptButton.Text = "Encrypt"
$encryptButton.Location = New-Object System.Drawing.Point(10, 135)
$encryptButton.Size = New-Object System.Drawing.Size(260, 30)
$encryptButton.BackColor = [System.Drawing.Color]::FromArgb(0, 120, 212)
$encryptButton.ForeColor = [System.Drawing.Color]::White 
$encryptButton.FlatStyle = "Flat"
$encryptGroupBox.Controls.Add($encryptButton)
#Create the encrypt result label
$encryptResultLabel = New-Object System.Windows.Forms.Label 
$encryptResultLabel.Location = New-Object System.Drawing.Point(10, 170)
$encryptResultLabel.Size = New-Object System.Drawing.Size(260, 25)
$encryptResultLabel.AutoSize = $true
$encryptResultLabel.ForeColor = [System.Drawing.Color]::Green 
$encryptGroupBox.Controls.Add($encryptResultLabel)
#Add the encrypt button click event
$encryptButton.Add_Click({ 
    try {
        $secret = $secretTextBox.Text 
        $passphrase = $passphraseTextBox.Text
        if ([string]::IsNullOrEmpty($secret) -or [string]::IsNullOrEmpty($passphrase)) {
            [System.Windows.Forms.MessageBox]::Show("Please enter both a secret and a passphrase.", "Error", "OK", "Error")
            return
        }
        $encryptedstring = Get-EncryptedString -StringToEncrypt $secret -PresharedSecret $passphrase Set-Clipboard -Value $encryptedstring
        $encryptResultLabel.Text = "Encrypted string copied to clipboard."
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Error encrypting the secret: $_", "Error", "OK", "Error")
    }
})
#Create the decrypt group box
$decryptGroupBox = New-Object System.Windows.Forms.GroupBox
$decryptGroupBox.Text = "Decrypt"
$decryptGroupBox.Size = New-Object System.Drawing.Size(280, 200)
$decryptGroupBox.Location = New-Object System.Drawing.Point(300, 10)
$decryptGroupBox.Padding = New-Object System.Windows.Forms.Padding( 10)
$decryptGroupBox.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Bold)
$decryptGroupBox.ForeColor = [System.Drawing.Color]::FromArgb(156, 0, 0)
$form.Controls.Add($decryptGroupBox)
#Create the encrypted secret label and text box
$encryptedSecretLabel = New-Object System.Windows.Forms.Label 
$encryptedSecretLabel.Text = "Encrypted Secret:"
$encryptedSecretLabel.Location = New-Object System.Drawing.Point(10, 25)
$encryptedSecretLabel.AutoSize = $true
$decryptGroupBox.Controls.Add($encryptedSecretLabel)
$encryptedSecretTextBox = New-Object System.Windows.Forms.TextBox 
$encryptedSecretTextBox.Location = New-Object System.Drawing.Point(10, 50)
$encryptedSecretTextBox.Size = New-Object System.Drawing.Size(260, 25)
$encryptedSecretTextBox.UseSystemPasswordChar = $true
$decryptGroupBox.Controls.Add($encryptedSecretTextBox)
#Create the decrypt passphrase label and text box 
$decryptPassphraseLabel = New-Object System.Windows.Forms.Label 
$decryptPassphraseLabel.Text = "Passphrase:"
$decryptPassphraseLabel.Location = New-Object System.Drawing.Point(10, 80)
$decryptPassphraseLabel.AutoSize = $true
$decryptGroupBox.Controls.Add($decryptPassphraseLabel)
$decryptPassphraseTextBox = New-Object System.Windows.Forms.TextBox 
$decryptPassphraseTextBox.Location = New-Object System.Drawing.Point(10, 105)
$decryptPassphraseTextBox.Size = New-Object System.Drawing.Size(260, 25)
$decryptPassphraseTextBox.UseSystemPasswordChar = $true
$decryptGroupBox.Controls.Add($decryptPassphraseTextBox)
#Create the decrypt button
$decryptButton = New-Object System.Windows.Forms.Button
$decryptButton.Text = "Decrypt"
$decryptButton.Location = New-Object System.Drawing.Point(10, 135)
$decryptButton.Size = New-Object System.Drawing.Size(260, 30)
$decryptButton.BackColor = [System.Drawing.Color]::FromArgb(156, 0, 0)
$decryptButton.ForeColor = [System.Drawing.Color]::White 
$decryptButton.FlatStyle = "Flat"
$decryptGroupBox.Controls.Add($decryptButton)
#Create the decrypt result label
$decryptResultLabel = New-Object System.Windows.Forms.Label 
$decryptResultLabel.Location = New-Object System.Drawing.Point(10, 170)
$decryptResultLabel.Size = New-Object System.Drawing.Size(260, 25)
$decryptResultLabel.AutoSize = $true
$decryptResultLabel.ForeColor = [System.Drawing.Color]::Green 
$decryptGroupBox.Controls.Add($decryptResultLabel)
#Add the decrypt button click event
$decryptButton.Add_Click({ 
    try {
        $encryptedSecret = $encryptedSecretTextBox.Text 
        $passphrase = $decryptPassphraseTextBox.Text
        if ([string]::IsNullOrEmpty($encryptedSecret) -or [string]::IsNullOrEmpty($passphrase)) {
            [System.Windows.Forms.MessageBox]::Show("Please enter both an encrypted secret and a passphrase.", "Error", "OK", "Error") 
            return
        }
        $decryptedString = Get-DecryptedString -EncryptedText $encryptedSecret -PresharedSecret $passphrase Set-Clipboard -Value $decryptedString
        $decryptResultLabel.Text = "Decrypted string copied to clipboard."
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Error decrypting the secret: $_", "Error", "OK", "Error")
    }
})
#Create the close button
$closeButton = New-Object System.Windows.Forms.Button
$closeButton.Text = "Close"
$closeButton.Location = New-Object System.Drawing.Point(250, 220)
$closeButton.Size = New-Object System.Drawing.Size(100, 30)
$closeButton.FlatStyle = "Flat"
$form.Controls.Add($closeButton)
# Add the close button click event
$closeButton.Add_Click({
    $form.Close()
})
#endregion #region Main
$form.ShowDialog()
#endregion
