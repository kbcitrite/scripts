<#
.Synopsis
   This script provides a graphical user interface to Citrix ADM via
   System.Windows.Forms, and is a fully-contained unsigned script.
.DESCRIPTION
   While this script is more of an application, it can be easily modified
   as needed to perform common tasks with Citrix ADM, and the ADCs that
   it manages. There are no command line parameters as everything is 
   driven in the GUI with each form in a separate function in the 
   forms region.

   Credits to poshgui.com for helping build forms in PowerShell, and 
   PowerShell Studio for helping with the original build.
   https://www.sapien.com/software/powershell_studio
.EXAMPLE
   From a Windows endpoint run the script using .\ADMPower.ps1
   *Note that this script is unsigned, and requires allowing unsigned 
   scripts in your runspace's execution policy; 
   e.g. use the following command to allow this script to run:
   .\> Set-ExecutionPolicy -ExecutionPolicy Unrestricted
.INPUTS
   No inputs are accepted
.OUTPUTS
   No outputs are given
.NOTES   
   Author:         Kenny Baldwin
   Version:        1.0
   Creation Date:  July 1, 2020
   
   See Github for a full readme and release history: 
   https://github.com/kbcitrite/scripts/tree/master/Citrix/ADMPower
.COMPONENT
   This script uses Citrix's Nitro REST APIs via Invoke-RestMethod
.ROLE
   The role of this script is to manage Citrix ADM & ADC appliances
#>
#region Initialize 
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
function Main {
    Param([String]$Commandline)
    if ((Show-MainForm) -eq 'OK')
    {    
         
    }
    $script:ExitCode = 0
}
$ModuleVersion = "1.0.0"
$ErrorActionPreference = "Stop"
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$StopWatch = New-Object -TypeName System.Diagnostics.Stopwatch
#endregion
#region Variables

## Globals
Set-Variable -Name ADMHost -Value "adm" -Scope Global 
Set-Variable -Name ADMSession -Value $null -Scope Global 
Set-Variable -Name ADMUser -Value "nsroot" -Scope Global
Set-Variable -Name AuthTimeoutMin -Value 30 -Scope Global 
Set-Variable -Name BrowsePath -Value "c:\Users\" -Scope Global 
Set-Variable -Name Cancel -Value $false -Scope Global 
Set-Variable -Name Eject -Value $true -Scope Global 
Set-Variable -Name Loaded -Value $false -Scope Global 
Set-Variable -Name LogIndex -Value 1 -Scope Global
Set-Variable -Name SelectedNode -Value (New-Object -TypeName System.Windows.Forms.TreeNode) -Scope Global 
Set-Variable -Name StartTime -Value (Get-Date) -Scope Global 
Set-Variable -Name Workload -Value $null -Scope Global 
Set-Variable -Name Version -Value "1.0" -Scope Global
Set-Variable -Name PuttyPath -Value "C:\Program Files\PuTTY\" -Scope Global
Set-Variable -Name Cred -Value $null -Scope Global 
Set-Variable -Name FGColor -Value '255, 255, 255' -Scope Global
Set-Variable -Name BGColor -Value '20, 29, 38' -Scope Global
Set-Variable -Name BGColor2 -Value '33, 50, 66' -Scope Global
Set-Variable -Name HeadingColor -Value '43, 63, 83' -Scope Global
$helpUrl = "https://github.com/kbcitrite/scripts/tree/master/Citrix/ADMPower"
### Style Section
$WarningColor = '197, 31, 93'
$TypeFace = 'Calibri'
$HeaderFont = "$TypeFace, 10pt"
$CellFont = "$TypeFace, 12pt"
$TreeViewFont = "$TypeFace, 11pt"
$ToolStripFont = "$TypeFace, 10pt"
$DGVHeaderStyle = New-Object System.Windows.Forms.DataGridViewCellStyle 
$DGVHeaderStyle.Alignment = 'MiddleLeft' 
$DGVHeaderStyle.Font = $HeaderFont 
$DGVHeaderStyle.SelectionBackColor = 'Highlight' 
$DGVHeaderStyle.SelectionForeColor = 'HighlightText' 
$DGVHeaderStyle.WrapMode = 'True'
$DGVCellStyle = New-Object 'System.Windows.Forms.DataGridViewCellStyle' 
$DGVCellStyle.Alignment = 'MiddleLeft' 
$DGVCellStyle.Font = $CellFont 
$DGVCellStyle.SelectionBackColor = 'HotTrack' 
$DGVCellStyle.SelectionForeColor = 'GradientActiveCaption' 
$DGVCellStyle.WrapMode = 'False'
[hashtable]$getVars = @{
    ADMSession = $global:ADMSession 
    OperationMethod = "GET"
    ResourceType = ""
}
$IconData = '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Q//+kVP//ZBT//uPUv/6j1L/+Y5R//iNUf/2jVD/9YxQ//SLUP/zi0//8YpP//CJTv/viE7/7YhO/+yHTf/rhk3/6oVM/+mFTP/nhEv/5oNL/+WDS//kgkr/4oFK//rn3f//////////////////////2KyR/9p8R//YfEb/13tG/9Z6Rv/jgUr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM92Q//8kFL/+49S//qPUv/5jlH/941R//aMUP/1jFD/9ItQ//KKT//xik//8IlO/++ITv/tiE3/7IdN/+uGTf/qhUz/6YVM/+eES//mg0v/5YNL/+SCSv/igUr/8MCk///////////////////////lzsD/0nhE/9h7Rv/Xe0b/1npG/9R5Rf/kgkr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANB3RP/7j1L/+o5S//iOUf/4m2f/+8ao//m3kv/zi0//8opP//GKT//wiU7/7ohO/+2HTf/sh03/64ZN/+mFTP/ohUz/54RL/+aDS//lgkv/44JK/+KBSv/poHf///////////////////////n18v/Ke0z/2HtG/9d7Rv/Wekb/1HlF/9N5Rf/kgkr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANF3RP/6jlL/+I5R//iUXP//+PT////////////6073/8YpP//CJTv/uiE7/7YdN/+yHTf/qhk3/6YVM/+iFTP/nhEv/5oNL/+SCSv/jgkr/4oFK/+OIVP/99/T//////////////////////8mPa//Ye0b/13tG/9V6Rf/UeUX/03hF/9J4RP/lg0v/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANF3RP/4jlH/941R//ipfP//////////////////////++LT/++PWf/th03/7IdN/+qGTP/phUz/6IRM/+eES//mg0v/5IJK/+OCSv/igUr/4YBJ//XXxv//////////////////////3Lyo/9R5Rf/We0b/1XpF/9R5Rf/TeEX/0nhE/9B3RP/lg0v/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANJ4RP/3jVH/9YxQ//aaZv////////////////////////////zp3v/xx6//8cev//HHr//xx6//8cev//HHr//xx6//8cev//HHr//xx6//8cev///////////////////////t4dj/yXRB/9Z6Rv/VekX/1HlF/9N4Rf/SeET/0HdE/892Q//mg0v/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANN4Rf/1jFD/9ItQ//OLT//3tpH///////////////////////////////////////////////////////////////////////////////////////////////////////n18v/NimL/1npG/9V6Rf/UeUX/03hF/9F3RP/Qd0T/z3ZD/851Q//nhEv/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANN5Rf/0i1D/84tP//GKT//wiU7/76uE//n18v///////////////////////////////////////////////////////////////////////////////////////////9erkP/Wekb/1XpF/9R5Rf/SeEX/0XdE/9B3RP/PdkP/zXVD/8x0Qv/nhEv/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANR5Rf/yi0//8YpP//CJTv/viE7/7YhN//Cdbv/+9/T///////////////////////zw6f/pmWz/4oFK/+GASf/ggEn/339J//HHr///////////////////////5M7A/892Q//VeUX/1HlF/9J4RP/Rd0T/0HdE/892Q//NdUP/zHRC/8t0Qv/ohEz/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANV5Rf/xik//8IlO/++ITv/tiE3/7IdN/+uGTf/unG7//vf0///////////////////////99/T/55hr/+CASf/ef0n/6KeB///////////////////////59fL/yntM/9R5Rf/ckmj/8dXF//Td0P/hqor/znZD/811Q//MdEL/y3RC/8lzQf/phUz/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANV6Rf/wiU7/7ohO/+2HTf/sh03/64ZN/+mFTP/ohUz/7Jtt//339P///////////////////////ff0/+SXa//hjl///ff0///////////////////////LkGz/1HlF/9N5Rf/x1cX/////////////////wm8//8x0Qv/KdEL/yXNB/8hyQf/phUz/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANZ6Rv/uiE7/7YdN/+yHTf/qhk3/6YVM/+iETP/nhEv/5oNL/+SQX//y49r///////////////////////339P/5593//////////////////////9axm//Rd0T/03hF/9J4RP/03dD/////////////////vWw9/8pzQv/Jc0H/yHJB/8dxQf/qhUz/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANd6Rv/th03/7IdN/+qGTP/phUz/6IRM/+eES//mg0v/5IJK/+OCSv/kiVX/+efd////////////////////////////////////////////7eDY/8p0Qf/TeEX/0nhE/9B3RP/z3dD/////////////////vGw8/8lzQf/IckH/xnFA/8VxQP/rhk3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANd7Rv/rhk3/6oZM/+mFTP/ohEz/54RL/+WDS//kgkr/44FK/+KBSv/ggEn/4YdU//nn3f/////////////////////////////////59fL/xX9V/9N4Rf/SeET/0HdE/892Q//z3dD/////////////////u2s8/8dyQf/GcUD/xXFA/8RwQP/rhk3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANh7Rv/qhkz/6YVM/+iETP/mhEv/5YNL/+SCSv/jgUr/4YFJ/+CASf/ff0n/3n9I/9+GU//4593////////////////////////////QoIP/03hF/9F3RP/Qd0T/z3ZD/851Q//y3dD/////////////////ums8/8ZxQP/FcED/xHBA/8JvP//sh03/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANl7R//phUz/6IRM/+aDS//lg0v/5IJK/+OBSv/hgUn/4IBJ/99/Sf/ef0j/3H5I/9t9R//chVP/6cq3/////////////////+TOwP/PdkP/0XdE/9B3RP/PdkP/zXVD/8x0Qv/y3ND/////////////////uWo7/8VwQP/DcD//wm8//8FuP//sh03/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANl8R//nhEv/5oNL/+WDS//kgkr/4oFK/+GASf/ggEn/339J/91+SP/cfkj/231H/9p8R//YfEb/13tG/+rDrf/n1sz/27un/859Tv/Rd0T/0HdE/892Q//NdUP/zHRC/8t0Qv/y3ND/////////////////uGk7/8NwP//Cbz//wW4//8BtPv/th03/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANp8R//mg0v/5YNL/+SCSv/igUr/4YBJ/+CASf/ef0j/3X5I/9x+SP/bfUf/2XxH/9h7Rv/Xe0b/1npG/9R5Rf/TeUX/0nhE/9F3RP/QdkT/znZD/811Q//MdEL/y3RC/8lzQf/x3ND/////////////////tmk6/8JvP//Bbj//v20+/79tPv/uiE7/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANp9R//lgkv/44JK/+KBSv/hgEn/4IBJ/95/SP/dfkj/3H5I/9t9R//ZfEf/2HtG/9d7Rv/Wekb/1HlF/9N5Rf/SeET/0XdE/892RP/OdkP/zXVD/8x0Qv/Kc0L/yXNB/8hyQf/x3ND/////////////////tWg6/8BuPv+/bT7/v20+/79tPv/uiE7/AAAAAAAA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AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOuGTZ/sh03/7YdN/+6ITt/viU6f8IlOYPGKTzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////9/AAD/////4D8AAP////4APwAA////wAA/AAD///wAAD8AAP//gAAAPwAA//gAAAA/AAD/gAAAAD8AAP4AAAAAPwAA/gAAAAA/AAD+AAAAAD8AAP4AAAAAPwAA/gAAAAA/AAD+AAAAAD8AAP4AAAAAPwAA/gAAAAA/AAD+AAAAAD8AAP4AAAAAPwAA/gAAAAA/AAD+AAAAAD8AAP4AAAAAPwAA/gAAAAA/AAD+AAAAAD8AAP4AAAAAPwAA/gAAAAA/AAD+AAAAAD8AAP4AAAAAPwAA/gAAAAA/AAD+AAAAAD8AAP4AAAAAPwAA/gAAAAA/AAD+AAAAAD8AAP4AAAAAPwAA/gAAAAA/AAD+AAAAAD8AAP4AAAAAPwAA/gAAAAA/AAD+AAAAAD8AAP4AAAAAPwAA/gAAAAA/AAD+AAAAAP8AAP4AAAAP/wAA/gAAAP//AAD+AAAf//8AAP4AAf///wAA/gA/////AAD+A/////8AAP///////wAAKAAAACAAAABAAAAAAQAgAAAAAACAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANJ4RDDUeUVw1XpFgNd7RlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMx0QhDNdUNQz3ZDgNJ4Rb/ZfEf/3n9I/+OBSv/jgkr/3H1I/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADHcUEwyHJBcMpzQp/TeEXf3H1I/+KBSv/phUz/64ZN/+mFTP/ohEz/5oNL/+SCSv/ff0n/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAbj4QwW4/UMNvP4DJc0G/0nhE/95/SP/phUz/8IlO//CJTv/viE7/7YdN/+uGTf/phUz/54RL/+aDS//kgkr/4oFK/99/Sf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv20+ML9tPmC/bT6fzXVD39d7Rv/lg0v/74lO//iNUf/2jFD/9ItQ//KKT//wiU7/7ohO/+2HTf/rhk3/6YVM/+eES//lg0v/5IJK/+KBSv/ggEn/339J/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv20+YMx0Qu/ff0n/7ohO//qPUv/9kFP/+49S//mOUf/3jVH/9oxQ//SLUP/yik//8IlO/+6ITv/sh03/6oZM/+mFTP/nhEv/5YNL/+OCSv/hgUn/4IBJ/95/SP/ff0n/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADPdkP//pFT//6RU//+kVP//ZBT//uPUv/5jlH/941R//WMUP/zi0//8opP//CJTv/uiE7/7IdN/+qGTP/phUz/54RL/+eKVv/xwKX/7riZ/99/Sf/ef0j/3H1I/99/Sf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN9/Sf/+kVP//pFT//2QU//7j1L/+Y5R//eNUf/1jFD/84tP//GKT//wiU7/7ohO/+yHTf/qhkz/6IVM/+eES//lgkv/+ODS////////////zpJt/9t9R//afEf/339J/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA339J//6RU//8kFL/+o9S//mOUf/3jVH/9YxQ//OLT//xik//74lO/+2ITf/sh03/6oZM/+iETP/mg0v/5IJK//HApf////////////////+xdE3/2XxH/9d7Rv/ff0n/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADff0n//JBS//qPUv/4jlH/9o1Q//WMUP/zi0//8YpP/++JTv/th03/64ZN/+qFTP/ohEz/5oNL/+SCSv/omWz/////////////////wZ+I/8JwPv/Xe0b/1XpF/95/Sf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN9/Sf/6j1L/+I5R//7q3v//////+syy//GJT//viE7/7YdN/+uGTf/phUz/6IRM/+aDS//kgkr/5IlV//vv6P///////////93Kvf+wZjf/13tG/9V6Rf/UeUX/3n9I/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3n9J//iNUf/4onH/////////////////+dO9/+2HTf/rhk3/8cCl//HApf/////////////////////////////////49PL/pWc+/9d7Rv/VekX/03lF/9F3RP/ef0j/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADef0j/9oxQ//SLUP/6073//////////////////////////////////////////////////////////////////////7GCYv/Jc0H/1XlF/9N4Rf/Rd0T/z3ZD/95/SP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN5/Sf/0i1D/8opP//CJTv/50r3//////////////////////+WDS//jgkr/4YFJ/+aYa//99/T////////////PtaP/uGo6/9R5Rf/TeEX/0XdE/892Q//NdUP/3n9I/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3n9I//KKT//wiU7/7ohO/+yHTf/30rz/////////////////+ODS/+OIVf/ff0n/+efd////////////6t/X/6ZhNP/UeUX/03hF/9F3RP/PdkP/zXVD/8t0Qv/ef0j/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADef0j/8IlO/+6ITv/sh03/6oZM/+iFTP/lrIv/////////////////+efd//PPuv////////////j08v+qd1X/0HdD/9uRZ////////Pbz/8+EWf/LdEL/yXNB/95/SP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN5/SP/tiE3/7IdN/+qGTP/ohEz/5oNL/+SCSv/tsI7/////////////////////////////////wZ+I/8NwP//SeET/6Lui////////////u4dm/8lzQf/HckH/3n9I/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3n9I/+uGTf/qhUz/6IRM/+aDS//kgkr/4oFK/+CASf/rr43//////////////////////93Kvf+uZTf/0nhE/9B3RP/nuqH///////////+6h2b/x3JB/8VwQP/ef0j/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADef0j/6YVM/+iETP/mg0v/5IJK/+KBSv/ggEn/3n9I/91+SP/oroz////////////49PL/pGY+/9J4RP/Qd0T/znVD/+a6of///////////7qHZv/FcED/w28//95/SP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN5/SP/nhEv/5oNL/+SCSv/igUr/4IBJ/95/SP/cfkj/2n1H/9l8R//Wj2X/zKyX/6dvSf/FcUD/0HZE/851Q//MdEL/5bmg////////////uYZm/8NvP//Bbj//3n9I/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3n9I/+WDS//jgkr/4oFK/+CASf/ef0j/3H5I/9p9R//YfEb/13tG/9V5Rf/TeEX/0XdE/892Q//OdUP/zHRC/8pzQv/kuaD///////////+5hmb/wW4//79tPv/ef0n/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADef0j/44JK/+GBSf/ggEn/3n9I/9x+SP/afUf/2HtG/9Z6Rv/UeUX/03hF/9F3RP/PdkP/zXVD/8t0Qv/Kc0L/yHJB/+O4oP///////////7iG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8YlP//CJTv/viE7/7ohO/+2HTf/sh03/64ZN/+qGTP/phUz/6IVM/+iETP/nhEv/5oNL/+WCS//kgkr/77mZ///////////////////////v28//2XxH/9x+SP/bfUf/2n1H/9l8R//kgkr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv20+//6RU//+kVP//pFT//6RU//9kFP//JBS//uPUv/6j1L/+Y5R//iOUf/3jVH/9o1Q//WMUP/0i1D/84tP//KKT//yik//8YlP//CJTv/viE7/7ohO/+2HTf/sh03/64ZN/+qGTP/phUz/6IVM/+eES//mg0v/5oNL/+WCS//kgkr/6Jls//339P///////////////////////////75tPf/bfUf/2n1H/9l8R//YfEb/5YJL/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL9tPv/+kVP//pFT//6RU//9kFP//JBS//uPUv/6j1L/+Y5R//iOUf/3jVH/9oxQ//WMUP/0i1D/84tP//KKT//xik//8IlO//CJTv/viE7/7ohO/+2HTf/sh03/64ZN/+qGTP/phUz/6IRM/+eES//mg0v/5YNL/+SCSv/kgkr/44FK//rn3f////////////////////////////Pr5f+9bTz/2n1H/9l8R//Ye0b/13tG/+aDS/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/bT7//pFT//6RU//9kFP//JBS//uPUv/6j1L/+Y5R//iNUf/3jVH/9oxQ//WMUP/0i1D/84tP//KKT//xik//8IlO/++JTv/uiE7/7ohO/+2HTf/sh03/64ZN/+qFTP/phUz/6IRM/+eES//mg0v/5YNL/+SCSv/jgkr/4oFK//LIsP////////////////////////////////+4hmX/xHA//9l8R//Ye0b/13tG/9Z6Rv/nhEv/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv20+//2RU//9kFP//JBS//uPUv/6jlL/+Y5R//iNUf/3jVH/9oxQ//WMUP/0i1D/84tP//KKT//xik//8IlO/++JTv/uiE7/7YhN/+yHTf/sh03/64ZN/+qFTP/phUz/6IRM/+eES//mg0v/5YNL/+SCSv/jgkr/4oFK/+uogv/////////////////////////////////VuKX/smc4/9l8R//Ye0b/13tG/9Z6Rv/VekX/6IRM/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBuPv/8kFL/+49S//uPUv/6jlL/+Y5R//iNUf/3jVH/9oxQ//WMUP/0i1D/84tP//KKT//xik//8IlO/++JTv/uiE7/7YhN/+yHTf/rhk3/6oZM/+qFTP/phUz/6IRM/+eES//mg0v/5YNL/+SCSv/jgkr/4oFK/+OIVf/99/T////////////////////////////t4dj/o18y/9V6Rf/Ye0b/13tG/9Z6Rv/VekX/1HlF/+mFTP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBbj//+49S//qPUv/5jlH/+Y5R//iNUf/8zbP////////////828j/9JJa//KKT//xik//8IlO/++JTv/uiE7/7YdN/+yHTf/rhk3/6oZM/+mFTP/phUz/6IRM/+eES//mg0v/5YNL/+SCSv/jgkr/4oFK/+GASf/339L////////////////////////////59fL/sXtY/8p0Qf/Ye0b/13tG/9Z6Rv/VekX/1HlF/9N4Rf/qhUz/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwm8///qPUv/5jlH/+I5R//eNUf/6uJL///////////////////////3p3v/ykVr/8IlO/++ITv/uiE7/7YdN/+yHTf/rhk3/6oZM/+mFTP/phUz/6IRM/+eES//mg0v/5YNL/+SCSv/jgUr/4oFK/+GASf/wwKT/////////////////////////////////yaSL/7hqOv/Ye0b/13tG/9Z6Rv/VeUX/1HlF/9N4Rf/SeET/64ZN/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMNwP//5jlH/+I5R//eNUf/2jVD//eLT/////////////////////////////One//CQWf/uiE7/7YdN/+yHTf/rhk3/6oZM/+mFTP/ohUz/6IRM/+eES//mg0v/5YJL/+SCSv/jgUr/4oFK/+GASf/mmGv/////////////////////////////////4cy//6pjNf/Xe0b/13tG/9Z6Rv/VeUX/1HlF/9N4Rf/SeET/0XdE/+yHTf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEcED/+I5R//eNUf/2jVD/9YxQ//vUvf/////////////////////////////////86d7/75Zj/+yHTf/rhk3/6oZM/+mFTP/ohUz/54RL/+aDS//mg0v/5YJL/+SCSv/jgUr/4oFK/+GASf/iiFT/++/o////////////////////////////+fXy/6lpP//NdUL/1npG/9V6Rf/UeUX/1HlF/9N4Rf/SeET/0XdE/9B3RP/th03/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxXFA//eNUf/2jFD/9YxQ//SLUP/1mmX//vj0//////////////////////////////////749P/xx6//8cev//HHr//xx6//8cev//HHr//xx6//8cev//HHr//xx6//8cev//HHr//xx6//88+7/////////////////////////////////7eGZf/CcD7/1npG/9V6Rf/UeUX/1HlF/9N4Rf/SeET/0XdE/9B3RP/PdkP/7ohO/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMZxQP/2jFD/9YxQ//SLUP/zi0//8opP/+6WY//z5Nr//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8+umP+wZjj/1npG/9V6Rf/UeUX/1HlF/9N4Rf/SeET/0XdE/9B3RP/PdkP/znVD/++ITv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADHckH/9YxQ//SLUP/zi0//8opP//GKT//wiU7/54tW//zp3v////////////////////////////////////////////////////////////////////////////////////////////339P///////////////////////////+3h2P+mYTT/03hF/9V6Rf/UeUX/03lF/9N4Rf/SeET/0XdE/9B2RP/PdkP/znVD/811Q//wiU7/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyHJB//SLUP/zi0//8opP//GKT//wiU7/74lO/+6ITv/uj1j//One//////////////////////////////////339P/sonj/5IJK/+OCSv/igUr/4YBJ/+CASf/ff0n/3n9I//nn3f////////////////////////////n18v+rcUv/yHNB/9V6Rf/UeUX/03lF/9J4RP/Rd0T/0HdE/9B2RP/PdkP/znVD/811Q//MdEL/8YlP/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMlzQf/zi0//8opP//GKT//wiU7/74lO/+6ITv/th03/7IdN/+2OWP/76N7//////////////////////////////////////+6xjv/igUr/4YBJ/+CASf/ff0n/3n9I//HHr//////////////////////////////////DmX7/ums7/9V6Rf/UeUX/03hF/9J4RP/Rd0T/0HdE/892Q//OdkP/znVD/811Q//MdEL/y3RC//KKT/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADKc0L/8opP//GKT//wiU7/74hO/+6ITv/th03/7IdN/+uGTf/qhkz/641X/+rKt///////////////////////////////////////7LCN/+CASf/ff0n/3n9I/+aedv/////////////////////////////////hzL//qWI1/9V5Rf/UeUX/03hF/9J4RP/Rd0T/0HdE/892Q//OdkP/zXVD/8x1Qv/MdEL/y3RC/8pzQv/zi0//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAy3RC//GJT//wiU7/74hO/+6ITv/th03/7IdN/+uGTf/qhkz/6YVM/+iFTP/jgkr/9tG8///////////////////////////////////////rr43/3n9I/9+GU//99/T////////////////////////////z6+X/qGg//852Q//UeUX/03hF/+Oriv/89/P///////z28//hqYr/zXVD/8x1Qv/LdEL/ynNC/8pzQv/Jc0H/9ItQ/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMx1Qv/wiU7/74hO/+6ITv/th03/7IdN/+uGTf/qhkz/6YVM/+iFTP/nhEv/5oNL/+WDS//10Lv//////////////////////////////////////+6/pP/018b/////////////////////////////////t4Vl/8BuPv/UeUX/03hF/9J4RP/89/P/////////////////+PTy/7prO//LdEL/ynNC/8lzQf/IckH/yHJB//WMUP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADNdUP/74hO/+6ITv/th03/7IdN/+uGTf/qhkz/6YVM/+iETP/nhEv/5oNL/+WDS//kgkr/44JK//TQu///////////////////////////////////////////////////////////////////////z66Y/69lN//UeUX/03hF/9J4RP/Rd0T///////////////////////////+fXTL/ynNC/8lzQf/IckH/x3JB/8ZxQP/2jFD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAznZD/+6ITv/th03/7IdN/+uGTf/qhUz/6YVM/+iETP/nhEv/5oNL/+WDS//kgkr/44JK/+KBSv/hgUn/4rGU////////////////////////////////////////////////////////////7eDY/6VgNP/Qd0T/03hF/9J4RP/Rd0T/0HdE////////////////////////////n10x/8lzQf/IckH/x3JB/8ZxQP/FcUD/941R/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM92Q//sh03/7IdN/+uGTf/qhUz/6YVM/+iETP/nhEv/5oNL/+WDS//kgkr/44JK/+KBSv/hgUn/4IBJ/99/Sf/nrYv/////////////////////////////////////////////////+fXy/6pwS//Jc0H/0nhE/9J4RP/Rd0T/0HZE/892Q////////////////////////////59cMf/IckH/x3JB/8ZxQP/FcUD/xHBA//iNUf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQd0T/64ZN/+qGTP/phUz/6YVM/+iETP/nhEv/5oNL/+WDS//kgkr/44JK/+KBSv/hgEn/4IBJ/99/Sf/ef0j/3X5I/+mujf///////////////////////////////////////////7yPcf+5ajv/0nhE/9F3RP/Qd0T/0HZE/892Q//OdUP///////////////////////////+fXDH/x3JB/8ZxQP/FcUD/xHBA/8NwP//5jlH/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0nhE/+qGTP/phUz/6YVM/+iETP/nhEv/5oNL/+WDS//kgkr/44JK/+KBSv/hgEn/4IBJ/99/Sf/ef0j/3X5I/9x+SP/bfUf/6K6M/////////////////////////////////9vCsv+rYzb/0nhE/9F3RP/Qd0T/z3ZD/852Q//OdUP/zXVD////////////////////////////nlwx/8ZxQP/FcUD/xHBA/8NvP//Cbz//+o9S/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANN4Rf/phUz/6YVM/+iETP/nhEv/5oNL/+WDS//kgkr/44FK/+KBSv/hgEn/4IBJ/99/Sf/ef0j/3X5I/9x+SP/bfUf/2n1H/9l8R//Vj2X/+fXy/////////////////+3g2P+naD//zHRC/9F3RP/Qd0T/z3ZD/852Q//NdUP/zHVC/8x0Qv///////////////////////////55cMf/FcED/xHBA/8NvP//Cbz//wW4///uPUv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADUeUX/6IVM/+eES//nhEv/5oNL/+WCS//kgkr/44FK/+KBSv/hgEn/4IBJ/99/Sf/ef0j/3X5I/9x+SP/bfUf/2n1H/9l8R//YfEb/13tG/9uRZ//q2M3/8+vl/9vCsv+kZj7/wm8+/9F3RP/Qd0T/z3ZD/852Q//NdUP/zHVC/8t0Qv/Kc0L///////////////////////////+eXDH/xHBA/8NvP//Cbz//wW4//8BuPv/8kFL/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1HlF/+eES//mg0v/5YNL/+WCS//kgkr/44FK/+KBSv/hgEn/4IBJ/99/Sf/ef0j/3X5I/9x+SP/bfUf/2n1H/9l8R//YfEb/13tG/9Z6Rv/VekX/znZD/7lqO/+4ajv/y3RC/9F3RP/Qd0T/z3ZD/852Q//NdUP/zHRC/8t0Qv/Kc0L/yXNB////////////////////////////nlwx/8NvP//Cbz//wW4//8BuPv+/bT7//ZBT/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANV6Rf/mg0v/5YNL/+SCSv/jgkr/44FK/+KBSv/hgEn/4IBJ/99/Sf/ef0j/3X5I/9x+SP/bfUf/2n1H/9l8R//Ye0b/13tG/9Z6Rv/VekX/1HlF/9R5Rf/TeEX/0nhE/9F3RP/Qd0T/z3ZD/851Q//NdUP/zHRC/8t0Qv/Kc0L/yXNB/8hyQf///////////////////////////51cMf/Cbz//wW4//8BuPv+/bT7/v20+//6RU/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADWekb/5YNL/+SCSv/jgkr/4oFK/+GBSf/hgEn/4IBJ/99/Sf/ef0j/3X5I/9x+SP/bfUf/2nxH/9l8R//Ye0b/13tG/9Z6Rv/VekX/1HlF/9R5Rf/TeEX/0nhE/9F3RP/Qd0T/z3ZD/851Q//NdUP/zHRC/8t0Qv/Kc0L/yXNB/8hyQf/HckH///////////////////////////+dWzH/wW4//8BtPv+/bT7/v20+/79tPv/+kVP/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA13tG/+SCSv/jgkr/4oFK/+GBSf/ggEn/339J/99/Sf/ef0j/3X5I/9x9SP/bfUf/2nxH/9l8R//Ye0b/13tG/9Z6Rv/VekX/1HlF/9N5Rf/SeET/0nhE/9F3RP/QdkT/z3ZD/851Q//NdUP/zHRC/8t0Qv/Kc0L/yXNB/8hyQf/HckH/xnFA////////////////////////////nVsx/8BtPv+/bT7/v20+/79tPv+/bT7//pFT/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANh8Rv/jgkr/4oFK/+GASf/ggEn/339J/95/SP/dfkj/3X5I/9x9SP/bfUf/2nxH/9l8R//Ye0b/13tG/9Z6Rv/VekX/1HlF/9N5Rf/SeET/0XdE/9B3RP/QdkT/z3ZD/851Q//NdUP/zHRC/8t0Qv/Kc0L/yXNB/8hyQf/HckH/xnFA/8VxQP///////////////////////////51bMf+/bT7/v20+/79tPv+/bT7/v20+//6RU/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADZfEf/4oFK/+GASf/ggEn/339J/95/SP/dfkj/3H5I/9t9R//afUf/2nxH/9l8R//Ye0b/13tG/9Z6Rv/VekX/1HlF/9N4Rf/SeET/0XdE/9B3RP/PdkP/znZD/851Q//NdUP/zHRC/8t0Qv/Kc0L/yXNB/8hyQf/HckH/xnFA/8VxQP/EcED///////////////////////////+dWzH/v20+/79tPv+/bT7/v20+/79tPv/+kVP/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2n1H/+GASf/ggEn/339J/95/SP/dfkj/3H5I/9t9R//afUf/2XxH/9h8Rv/Ye0b/13tG/9Z6Rv/VeUX/1HlF/9N4Rf/SeET/0XdE/9B3RP/PdkP/znZD/811Q//MdUL/zHRC/8t0Qv/Kc0L/yXNB/8hyQf/HckH/xnFA/8VwQP/EcED/w28//9mlh/////////////////+6lXv/ol4z/79tPv+/bT7/v20+/79tPv+/bT7//pFT/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA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n//pFT//2QU//7j1L/+o9S//iOUf/3jVH/9YxQ//SLUP/yik//8YlP/++JTv/uiE7/7IdN/+uGTf/phUz/6IRM/+aDS//lgkv/44JK//HApf/////////////////w1MT/2nxH/9h8Rv/ef0n/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3n9J//2QU//7j1L/+o5S//iOUf/3jVH/9YxQ//SLUP/yik//8YlP/++ITv/tiE3/7IdN/+qGTP/phUz/6IRM/+aDS//lgkv/44FK/+mgd///////////////////////1JVw/9h8Rv/Xe0b/3n9J/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN5/Sf/7j1L/+Y5R//iNUf/2jVD/9YxQ//OLT//yik//8IlO/++ITv/th03/7IdN/+qGTP/phUz/54RL/+aDS//kgkr/44FK/+OIVf/77+j/////////////////2rSc/9h7Rv/Xe0b/1XpF/95/Sf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADef0n/+Y5R//iNUf/81L7///////7x6f/0oHD/8IlO/++ITv/th03/7IdN/+qGTP/phUz/54RL/+aDS//kgkr/44FK/+GASf/118b/////////////////69jN/9F3Q//Wekb/1XpF/9N5Rf/ef0j/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3n9I//iNUf/2jFD//////////////////vj0//Keb//th03/64ZN/+qGTP/ohUz/54RL/+WDS//kgkr/4oFK/+GASf/rr43/////////////////+fXy/86EWP/Wekb/1XlF/9N5Rf/SeET/3n9J/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN5/SP/2jFD/9ItQ//749P/////////////////++PT//////////////////////////////////////////////////ff0/////////////////86ZeP/Wekb/1HlF/9N4Rf/SeET/0HdE/95/SP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADef0j/9ItQ//OLT//0oHD//vj0//////////////////739P//////8cCl///////////////////////xwKX//////////////////////+LGtP/SeET/1HlF/9N4Rf/Rd0T/0HdE/852Q//ef0j/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3n9I//KKT//xik//74lO/+aKVf/86d7//////////////////////++xjv/jgkr/4oFK/+CASf/ff0n/8cev//////////////////Pr5f/OfU3/1HlF/9N4Rf/Rd0T/0HZE/852Q//NdUP/3n9I/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN5/Sf/xiU//74lO/+6ITv/sh03/7I1Y//vo3f//////////////////////7bCO/+CASf/ff0n/6KeB///////////////////////MiWL/1HlF/+Gif//ou6L/25ly/851Q//MdUL/y3RC/95/SP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADef0j/74hO/+2ITf/sh03/6oZM/+mFTP/pjFf/+ujd///////////////////////rr43/34ZT//339P/////////////////ctZ3/1HlF/9J4RP/////////////////FcUD/y3RC/8lzQf/ef0j/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3n9J/+2HTf/sh03/6oZM/+mFTP/nhEv/5oNL/+aKVv/6593///////////////////////vv6P/////////////////q2M3/zXVC/9J4RP/Rd0T/////////////////vGw8/8lzQf/HckH/3n9I/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN5/SP/sh03/6oZM/+mFTP/nhEv/5oNL/+SCSv/jgUr/3X5I/+/Nuf/////////////////////////////////59fL/yXpM/9J4RP/Qd0T/z3ZD/////////////////7trPP/HckH/xnFA/95/Sf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADef0j/6oZM/+iFTP/nhEv/5YNL/+SCSv/igUr/4YBJ/99/Sf/ef0j/8s+6////////////////////////////0Jl5/9J4RP/Qd0T/z3ZD/811Q/////////////////+5ajz/xnFA/8RwQP/ef0j/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3n9I/+iFTP/nhEv/5YNL/+SCSv/igUr/4YBJ/99/Sf/ef0j/3H5I/9t9R//xzrr/////////////////27un/852Q//Qd0T/z3ZD/811Q//LdEL/////////////////uGo7/8RwQP/Cbz//3n9I/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN5/SP/nhEv/5YNL/+SCSv/igUr/4IBJ/99/Sf/dfkj/3H5I/9p9R//ZfEf/13tG/+e7of/n1sz/4cW0/858Tf/Qd0T/znZD/811Q//LdEL/ynNC/////////////////7dpO//Cbz//wW4//95/SP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADef0j/5YNL/+OCSv/igUr/4IBJ/99/Sf/dfkj/3H1I/9p9R//ZfEf/13tG/9Z6Rv/UeUX/03hF/9F3RP/QdkT/znZD/811Q//LdEL/ynNC/8hyQf////////////////+2aDr/wG4+/79tPv/ef0n/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3n9I/+OCSv/igUr/4IBJ/99/Sf/dfkj/231H/9p8R//YfEb/13tG/9V6Rf/UeUX/03hF/9F3RP/PdkP/znVD/8x1Qv/LdEL/yXNB/8hyQf/GcUD/////////////////tGc6/79tPv+/bT7/339J/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA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v/5IJK/99/Sf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/bT5AxXFAn9d7Rs/igUr/7ohO//yQUv/5jlH/941R//WMUP/yik//8IlO/+2HTf/rhk3/6IVM/+aDS//kgkr/4YBJ/99/Sf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADYe0bv/pFT//6RU//+kVP//JBS//mOUf/3jVH/9ItQ//KKT//viU7/7YdN/+qGTP/ohUz/7qqD//LBpf/jiFX/3n9I/99/Sf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADff0n//pFT//6RU//7j1L/+Y5R//aNUP/0i1D/8opP/++JTv/th03/6oZM/+iETP/pk2H//ff0///////Xspv/3H1I/99/Sf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADff0n//ZFT//uPUv/5jlH/9oxQ//SLUP/xik//74hO/+yHTf/qhkz/6IRM/+WDS//66N3///////j08v+mZz7/2XxH/99/Sf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADff0n/+49S//zAnf//////+LeR//GKT//viE7/7IdN/+qFTP/ohEz/5YNL//PIsP///////////7OKbv/LdEL/1npG/99/Sf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADff0n/+I5R//zbyP////////////W1kP/xwKX/8cCl//HApf/xwKX/8cCl////////////z7Wj/7lrO//Wekb/1HlF/99/Sf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADff0n/9oxQ//SSWv/86d7//////////////////////////////////ff0///////q39f/qWlA/9Z6Rv/UeUX/0XdE/99/Sf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADff0n/84tP//CJTv/vj1n/9N7Q////////////9dC7/+KBSv/339L///////j08v+qd1X/0XhE/9N5Rf/Rd0T/z3ZD/99/Sf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADff0n/8IlO/+6ITv/rhk3/44JK//bRvP////////////nn3f///////////8GfiP/EcD//5KuL/+Wzlv/OdkP/zHRC/99/Sf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADff0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'
$LogoData = 'Qk0+0gAAAAAAADYAAAAoAAAAvgAAAF4AAAABABgAAAAAAAjSAAB0EgAAdBIAAAAAAAAAAAAA/////////////f39+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7/v7+/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Pz8+Pj48/Pz7u7u6urq5+fn5ubm5ubm6Ojo7Ozs8PDw9fX1+vr6/v7+/////////////////////////////////////////////////////////////////////////////////v7+/Pz8+/v7+/v7+/v7+/v7+/v7+/v7/Pz8/f39/////////////////////////////////v7++/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7/f39/////////////////////////////////////////////v7+/Pz8+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7/f39/////v7+/Pz8+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7/f39/////////////////////////f39+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7/f39////////////+//////////29vbk5OTY2NjV1dXW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbV1dXa2trq6ur7+/v////////////////////////////////////////////////////////////////////////////////////////////////////////////8/Pzz8/Pm5ubZ2dnOzs7Hx8fBwcG7u7u2tra1tbW1tbW4uLi9vb3ExMTKysrU1NTg4ODt7e34+Pj+/v7////////////////////////////////////////////////////////////////6+vrp6ena2trV1dXW1tbW1tbW1tbW1tbV1dXY2Njm5ub4+Pj////////////////////////5+fno6OjZ2dnV1dXW1tbW1tbW1tbW1tbV1dXW1tbh4eH09PT////////////////////////////////////5+fno6Oja2trV1dXW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbV1dXX19fi4uLv7+/q6urb29vV1dXW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbV1dXX19fk5OT29vb////////////////29vbk5OTX19fV1dXW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbV1dXX19fj4+P19fX////////W//////39/efn57+/v5+fn52dnZ6enp6enp6enp6enp6enp6enp6enp6enpycnKOjo87OzvDw8P////////////////////////////////////////////////////////////////////////////////////////////////////z8/PHx8d3d3cvLy7u7u6amppycnKqqq7W1tcPDxMrMzNHR083NzcjIyLu7u7GysqKiopubm7KyssTExNTU1Ojo6Pj4+P///////////////////////////////////////////////////////////+3t7cnJyaKiopycnJ6enp6enp6enp6enpycnKCgoMPDw+np6f7+/v////////////////7+/uzs7MfHx6GhoZycnJ6enp6enp6enp6enp2dnZ2dnbW1teDg4Pr6+v///////////////////////////////+zs7MjIyKKiopycnJ6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp2dnZ6enri4uNPT08rKyqSkpJubm56enp6enp6enp6enp6enp6enp6enp6enp2dnZ6enr6+vubm5v39/f////////39/eTk5L29vZ6enp2dnZ6enp6enp6enp6enp6enp6enp6enp6enp6enp2dnZ6enr+/v+fn5/39/f///57//////f392tra2NjY9PT08PHy8PDx8PDx8PDx8PDx8PDx8PDx8PDx7vDw8vPz7Oztz8/P7+/v////////////////////////////////////////////////////////////////////////////////////////////////+Pj44+Pjy8vLsbGxpqamxcXF6urr/v7+////////9PLx6+nn7evp7Ono7uzq//39/////v7+9vf41NXVsLCwnp6ewMDA1tbW7u7u/f39/////////////////////////////////////////////////Pz85OTkzc3N8PHx8fLz8PDw8PDx8PDx8PDx8fLy8vT00tLS2tra+/v7/////////////////Pz84eHhzc3N8PHx8fLz8PDw8PDx8PDx8PDx8PDw9fb33d3dysrK9/f3/////////////////////////////v7+5+fn0tLS7/Dw8fLy8PDw8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx9PT13t7evr6+x8fH7e3t8vP07vDw8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PHx8vLz29vb2dnZ/f39////////+fn5z8/P1NTU9PT18PHy8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PDx8PHy7u7v3d3d4uLi/v7+////8f/////////f39/////EwLymoJurpqGrpqGrpqGrpqGrpqGrpqGrpqGrpaGln5rq6Ob5+fnn5+f////////////////////////////////////////////////////////////////////////////////////////////z8/Pa2tq9vb2np6fY2Nr+/v77+vnEwL2IgHpbUUlANCwzJh0tIRcuIRcuIRcvIxk5LSRMQTlzamOnoZzn5OL////x8vO+vr6kpKTLy8vn5+f7+/v////////////////////////////////////////////7+/vPz8/5+fnZ1tOknZmspqGrpqGrpqGrpqGln5nLx8T////Nzc36+vr////////////////8/PzR0dH7+/vV0s+knpmspqGrpqGrpqGrpqGpo56yran////V1dX29vb////////////////////////////////h4eH9/f3Z1dOknpmspqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGnoZy7trL////Jycnx8vLr6OeknpqrpaGrpqGrpqGrpqGrpqGrpqGrpqGrpqGmoJvEv7z////g4OD////////////5+fnPz8////++uramoZyrpqGrpqGrpqGrpqGrpqGrpqGrpqGrpqGspqKhm5bV0s/////v7+////////+h/////////+Hh4f///1pRSA8AABwOAxwOAxwOAxwOAxwOAxwOAxwOAxsNAg4AALCqpf7+/ujo6P////////////////////////////////////////////////////////////////////////////////////////Pz89fX16+vr8XHx/7+/u/u7IR8djcqIR0PBRoMAR8RBiMWCyUYDiIUCh4QBR8SByQXDCUXDSEUCRsNAxoMAScZEFtQSb24tf///+jo6a+vr8jIyOXl5fv7+/////////////////////////////////////////j4+M/Pz////2FXUA0AABwOAxwOAxwOAxwOAxEDAEU5Mf///9TU1Pb29v////////////////n5+dHR0f///1pPRw4AABwOAxwOAxwOAxwOAxkKABwOA+fl4+nq6unp6f39/f///////////////////////////9/f3/7+/omCfAwAABwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxEDAEY7Mv///8vLy/f4+bGspg4AABsNAhwOAxwOAxwOAxwOAxwOAxwOAxwOAw8AAFpQSP///+Li4v////////////X19ePj5Pf29SsdExYIABwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxcIACEUCuDd2/v7/Pz8/P///////wP/////////4ODg/v7+ZVxUHhAGKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSHQ8EtbCr/P3+6enp////////////////////////////////////////////////////////////////////////////////////9vb229vbra2t3Nzc////nJaQLiEXGAoAJBcMKhwSKh0TKx4UJhkPHA4ENSkfS0A4QjYtJhgOHhAGKh0TKh0TKh0TJxoQHRAFGw0CW1FJ4+De/v7+urq6yMjI6enp/f39////////////////////////////////////8/Pz3Nzc/Pz7OCwjJBcNKh0TKh0TKh0TKh0TJxoQKBsR6+nn6Ojo6urq/f39////////////9PT03d3d/f38NysiJBcMKh0TKh0TKh0TKh0TKh0TGgsAq6Wh/P390NDQ+/v7////////////////////////////39/f/v7+kYqEGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TIBMIUkc//v7+ycnJ9vf4trGsHQ8EKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0THhAGZVxU/v7+4eHh////////////6urq9fb2zcnGHg8FKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGgwCf3dw/v7+7u7u////////////E//////////g4OD+/v5lXFQeEAYqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIdDwS1sKv8/f7p6en////////////////////////////////////////////////////////////////////////////////7+/vj4+O0tLTg4OD///9oX1gXCgAkFwwrHhQqHRMqHRMqHRMlFw0nGQ+blI/39fT///////7Y1dJdU0wcDgQqHRMqHRMqHRMqHRMpHBIaDAIsHxW9uLT///+8vLzR0dHv7+/////////////////////////////////8/Pzj4+Px8vLU0M0gEgcpHBIqHRMqHRMqHRMqHRMqHRMaDAKwq6b8/P3R0dH7+/v////////9/f3m5ubw8PHW09AhEwkpHBEqHRMqHRMqHRMqHRMqHRMcDwRsY1z+/v7Nzc34+Pj////////////////////////////f39/+/v6RioQbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMrHhQkFwwbDQIbDQIbDQIbDQIbDQIbDQIbDQIbDQIbDQIbDQIbDQIbDQIbDQIbDQIQAgBGOjH+/v7Pz8/3+Pm2sawdDwQpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMeEAZlXFT+/v7h4eH////////////a2tr9/v6gmZQbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIfEgfPzMn9/f39/f3///////////8C/////////+Dg4P7+/mVcVB4QBiodEyodEyodEyodEyodEyodEyodEykcEh0PBLWwq/z9/unp6f///////////////////////////////////////////////////////////////////////////////+7u7snJydbW2P///1xTSxYIACkcEiodEyodEyodEyodEykbER8SB7KsqP7+/v7+/v7+/v7+/v7+/v///15TTB4QBSodEyodEyodEyodEyseFCIUCiETCbq1sv7+/ri4uN/f3/j4+P////////////////////////////r6+s3Nzf7+/pWOiRkMASodEyodEyodEyodEyodEyodExwOBHBnYP7+/s3Nzfj4+P////////v7+9HR0f7+/qCalRkLASodEyodEyodEyodEyodEyodEyQWDDwwJ////tvb3PPz8////////////////////////////9/f3/7+/pGKhBsNAiodEyodEyodEyodEyodEyodEyodEyodEyQWDExCOYR9d4qDfYuDfouDfYuDfYuDfYuDfYuDfYuDfYuDfYuDfYuDfYuDfYuDfYV9d6Gblv///9zc3Pn6+7axrB0PBCkcEiodEyodEyodEyodEyodEyodEyodEx4QBmVcVP7+/uHh4f///////////9ra2v7+/oN7dRoMASodEyodEyodEyodEyodEyodEyodEyodEyUYDjQnHvn49/Pz9P///////////////33/////////4ODg/v7+ZVxUHhAGKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSHQ8EtbCr/P3+6enp////////////////////////////////////////////////////////////////////////////+Pj44ODgxMTE////eXBqFgcAKh0TKh0TKh0TKh0TKh0TKh0THQ8EbWNc////8/Pz////////////+/v7/v7+4N3cJRgOKBsRKh0TKh0TKh0TKh0TKx4UIhQKKBsR39vZ8fLyvb297e3t/v7+////////////////////////+Pj40dHR////W1FJHhEGKh0TKh0TKh0TKh0TKh0TKh0TIxYMPjIp////2dnZ8/Pz////////+fn5z8/P/v7+Z11WHQ8FKh0TKh0TKh0TKh0TKh0TKh0TKRwRIBMJ1tPQ8PLy4uLi/Pz8////////////////////////39/f/v7+kYqEGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGgwChX54/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/f395+fn/Pz9trGsHQ8EKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0THhAGZVxU/v7+4eHh////////////3Nzc/v7+cmljHA4DKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TIRMIUEY9////6enp/////////////////v/////////g4OD+/v5lXFQeEAYqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIdDwS1sKv8/f7p6en////////////////////////////////////////////////////////////////////////////w8PDAwMD5+vq/urcaDAEoGxEqHRMqHRMqHRMqHRMqHRMpHBIhEwnV0s/9/f38/Pz////////////////t7u7///9XTUUfEQcqHRMqHRMqHRMqHRMqHRMrHhQcDwRNQjr////T09Xf39/5+fn////////////////////+/v7x8fHf3+H39vUxJRwmGA4qHRMqHRMqHRMqHRMqHRMqHRMoGxEiFArb19Xu7+/k5OT8/Pz////29vbb3Nz///89MikjFgwqHRMqHRMqHRMqHRMqHRMqHRMqHRMaCwGYkIv+/v7MzMz6+vr////////////////////////f39/+/v6RioQbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMbDQOHf3n+/v7g4OD+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7////////v7+/8/f62sawdDwQpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMeEAZlXFT+/v7h4eH////////////e3t7+/v5rYVodDwUqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMcDgRxaWL+/v7m5ub////////////////+/////////+Dg4P7+/mVcVB4QBiodEyodEyodEyodEyodEyodEyodEykcEh0PBLWwq/z9/unp6f////////////////////////////////////////////////////////////////////////v7++bm5tXV1f///0I3LiASCCodEyodEyodEyodEyodEyodEyUYDTcrIv79/PDx8v///////////////////+bm5v7+/omBfBsNAiodEyodEyodEyodEyodEyodEyodExgKAKeinf7+/sLCwvLy8v////////////////////z8/N/f3/X19sjEwR0PBSkcEiodEyodEyodEyodEyodEyodEyodExkLAJuVj/7+/s3Nzfv7+/7+/urq6uzt7eDd2yQWDCgbESodEyodEyodEyodEyodEyodEyodEx4RBlxRSv///9DR0ff39////////////////////////9/f3/7+/pGKhBsNAiodEyodEyodEyodEyodEyodEyodEyodExsNA4d/ef7+/t/f3////////////////////////////////////////////////////////////+np6fz9/raxrB0PBCkcEiodEyodEyodEyodEyodEyodEyodEx4QBmVcVP7+/uHh4f///////////+Dh4f///2NZUh4QBiodEyodEyodEyodEyodEyodEyodEyodExkLAIuEff7+/uPj4///////////////////////////4ODg/v7+ZVxUHhAGKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSHQ8EtbCr/P3+6enp////////////////////////////////////////////////////////////////////////9/f3ycnJ+/v8sqyoGAsAKh0TKh0TKh0TKh0TKh0TKh0TKh0TIBIIUUY+////6enp////////////////////8PDw/v7+sqyoGgwBKh0TKh0TKh0TKh0TKh0TKh0TKh0TIRQJQDUr////19fY6+vr/Pz8////////////////+vr6zMzM/v7+iYF7GgwBKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0THhEGXlRM////0NDQ+Pj4/Pz809PT/v7+qqSfGgwBKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TJhkOMSUb9/b14OLi7+/v/v7+////////////////////39/f/v7+kYqEGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGw0Dh395/v7+39/f////////////////////////////////////////////////////////////6enp/P3+trGsHQ8EKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0THhAGZVxU/v7+4eHh////////////4ODg////YlhRHhEGKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGw0CoZuW/v7+5eXl///////////////////////////g4OD+/v5lXFQeEAYqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIdDwS1sKv8/f7p6en////////////////////////////////////////////////////////////////////////09PTQ0ND///9SRz4fEQcqHRMqHRMqHRMqHRMqHRMqHRMqHRMdEAVoXlf+/v7l5eX////////////////////7+/v7/P3MyMUfEgcpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMaDAK/urf5+vrQ0ND5+fn////////////////39/fS0tL///9TSEAgEggqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMlGA4zJx35+Pff4eHx8fH4+PjPz8/+/v5xaGEcDgMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRIcDwTEwLz3+Pjb29v7+/v////////////////////f39/+/v6RioQbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMbDQOHf3n+/v7f39/////////////////////////////////////////////////////////////p6en8/f62sawdDwQpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMeEAZlXFT+/v7h4eH////////////i4uL///9hV1AeEQYqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIdEAW4s6/+/v7s7Oz//////////////////////////+Dg4P7+/mVcVB4QBiodEyodEyodEyodEyodEyodEyodEykcEh0PBLWwq/z9/unp6f////////////////////////////////////////////////////////////////////39/ejo6Ovs7ePh3yQXDCgbECodEyodEyodEyodEyodEyodEyodExsOA4B3cf7+/uTk5P////////////////////7+/vT19uDd2icaECgbECodEyodEyodEyodEyodEyodEyodExwOA2tiW////87Ozvj4+P////////////7+/u/v7+Pj5PHv7i0fFiYZECodEyodEyodEyodEyodEyodEyodEyodEykcEh4QBcjEwfb399vb2/Ly8tfY2P///0Q5LyIVCiodEyodEyodEyodEyodEyodEyodEyodEyodExoMAYR8d/7+/svLy/n5+f///////////////////9/f3/7+/pGKhBsNAiodEyodEyodEyodEyodEyodEyodEyodExsNA4d/ef7+/t/f3////////////////////////////////////////////////////////////+np6fz9/raxrB0PBCkcEiodEyodEyodEyodEyodEyodEyodEx4QBmVcVP7+/uHh4f///////////+Hh4f///2JYUR4RBiodEyodEyodEyodEyodEyodEyodEykcEiASB9LOy/r7/Pr6+v//////////////////////////4ODg/v7+ZVxUHhAGKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSHQ8EtbCr/P3+6urq/////////////////////////////////////////////////////////////////////Pz80tLS/v7+npiSGQsAKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGgwBlI2I/v7+4+Pj////////////////////////7+/w8fDuLSAWJhkPKh0TKh0TKh0TKh0TKh0TKh0TKh0TJBcNNysh/v3839/f9fX1/////////////Pz82dnZ+Pn6vbi0Gw0DKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGgwBh395/v7+yMjI5eXl6erq6ebkJxoQKBsQKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TIRMJTEE4////1NTU9fX1////////////////////39/f/v7+kYqEGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGw0Dh395/v7+39/f////////////////////////////////////////////////////////////6enp/P3+trGsHQ8EKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0THhAGZVxU/v7+4eHh////////////4ODg////YlhRHhEGKh0TKh0TKh0TKh0TKh0TKh0TKh0TKBsRJRgO5uTi+Pn5///////////////////////////////g4OD+/v5lXFQeEAYqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIdDwS1sKv7/P3i4uL39/f29vb29vb39/f5+fn6+vr9/f3+/v7////////////////////////////////////8/PzT09P+/v5nXVYdDwUqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMZCwCjnZj+/v7l5eX////////////////////////r6+v8+/ozJhwmGA4qHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBEhEwnW09Dz8/Tq6ur////////////6+vrLy8z+/v5+dm8bDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMgEwhOQzv////Ozs7Nzc38/P20rqoaDQIqHRIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMnGhApHBHr6efn6Onq6ur9/f3////////////////f39/+/v6RioQbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMbDQOHf3n+/v7f39/////////////////////////////////////////////////////////////p6en8/f62sawdDwQpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMeEAZlXFT+/v7h4eH////////////f39////9iWFEeEQYqHRMqHRMqHRMqHRMqHRMqHRMqHRMlFw41KR/39vXy8vP//////////////////////////////+Dg4P7+/mVcVB4QBiodEyodEyodEyodEyodEyodEyodEykcEh0PBLWwrPT19sLCws7Ozs7Ozs7OztDQ0NPT09bW1t3d3eTk5O3t7fX19fv7+/////////////////////////z8/N3d3v///0E1LSMWCyodEyodEyodEyodEyodEyodEyodEyodExkLAK+qpf7+/u3t7f///////////////////////+np6f38+zsvJSQXDSodEyodEyodEyodEyodEyodEyodEyodExkLAKiinf7+/tnZ2f7+/v////////f399XW1v///0o/NiETCSodEyodEyodEyodEyodEyodEyodEyodEyodEyodEycaECodE+7s6t3d3aioqP7+/ntybBsNAiodEyodEyodEyodEyodEyodEyodEyodEyodEyodEyodExoMAbCqpvz8/dHR0fv7+////////////////9/f3/7+/pGKhBsNAiodEyodEyodEyodEyodEyodEyodEyodExsNA4d/ef7+/t/f3////////////////////////////////////////////////////////////+np6fz9/raxrB0PBCkcEiodEyodEyodEyodEyodEyodEyodEx4QBmVcVP7+/uHh4f////////39/dXV1v///19VTR8RBiodEyodEyodEyodEyodEyodEyodEyETCUxBOP///+3t7v//////////////////////////////4ODg/v7+ZVxUHhAGKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSHQ8Eta+r8vLzmpqbnZ2doKCgnZ2dmpubmpqan5+fq6urt7e3wcHBzc3N29vb6+vr+Pj4////////////////+Pj46enp8fDuLB8VJxoPKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0THA4DurWx/v7+7+/v////////////////////////5+fn/v39RDgvIxYLKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGw0Cg3t1/v7+19fX/////////v7+7Ozs5ujo6eflKBoQKBsRKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKBsRKh0TKh0TGg0CtK+r8fLzsbGx////S0A3IRQJKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKBsRKRwSKh0THA4DcWhh/v7+zMzM+Pj4////////////////39/f/v7+kYqEGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGw0Dh395/v7+4ODg////////////////////////////////////////////////////////////6enp/P3+trGsHQ8EKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0THhAGZVxU/v7+4eHh/////v7+7+/vzs7O////Sj42IRQKKh0TKh0TKh0TKh0TKh0TKh0TKh0TGgwBenJr/v7+7Ozs///////////////////////////////g4OD+/v5lXFQeEAYqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIcDgOvqqf+/v76+/z8/f7+/v78/f75+vv3+Pn09vbg4eHLy8u4uLifn5+rq6vCwsLV1dXr6+v7+/v////////x8fHz9fXTz8wiFQspHBEqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIdEAXAu7f8/f7x8fH////////////////////////k5OT9/f1JPTUiFQoqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMeEAVkWlP////a2tr////////8/PzV1dX7+/yyrKgaDQEqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRIsHxUqHRMqHRMcDgNzamT9/v7i4uLl4+IrHhUnGhAqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIsIBYrHhQqHRMjFgs+Myr////Z2dvz8/P////////////////f39/+/v6RioQbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMbDQOHf3n+/v7a2tr6+vr4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj8/Pz////////////////p6en8/f62sawdDwQpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMeEAZlXFT+/v7a2tr29vbl5eXPz8/e3+Dw7uwsHhUnGQ8qHRMqHRMqHRMqHRMqHRMqHRMpHBIbDQLHw7/////6+vr////////////////////4/////////+Dg4P7+/mVcVB4QBiodEyodEyodEyodEyodEyodEyodEyodEyUYDVpQSIB5c4Z+eIV9d4N7dYR8dpKLhZqSja2no9PPzPTy8f////7+/uHj47e3t6GhocbGxt/f3/f39////+3t7fv8/L+6tRsNAyodEyodEyodEyodEyodEyodEyodEyodEykcEh8SB8bBvvr7/PLy8v///////////////////////+Li4v7+/k1DOiEUCSodEyodEyodEyodEyodEyodEyodEyodEyASB1JIP////97e3v////////n5+czMzP7+/nNqYxwOAyodEyodEyodEyodEyodEyodEyodEyodEyYZDnVtZjYqISgaECMVC0A0K/X09P7+/q+rpxwOAykdEyodEyodEyodEyodEyodEyodEyodEyASCGZcVVZLRCIUCikcEiIUCtvY1e/w8OTk5Pz8/P///////////9/f3/7+/pGKhBsNAiodEyodEyodEyodEyodEyodEyodEyodExsNA4d/ef7+/ru7u9PT09DQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0M/Pz9XV1eXl5fj4+P///////////+np6fz9/raxrB0PBCkcEiodEyodEyodEyodEyodEyodEyodEx4QBmVcVP7+/ry8vMvLy8DAwKmpqf7+/piRjBoMAiodEyodEyodEyodEyodEyodEyodExgKAFtQSf////f39////////////////////////9D/////////4ODg/v7+ZVxUHhAGKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKx4UIRQJGw0CGw0DGw0DGw0DGw0DGgwCGQsBGgwBIhQKLB8VST41iIB61NHO////7e7us7S0ubm53d3d9/f35OTk/v7+q6WgGQsAKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSIBIIysXC+Pj58vLy////////////////////////4uLi////T0Y8IRMJKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TIhQKSD00////4eHh////////9vb22dnZ////QjcuIxULKh0TKh0TKh0TKh0TKh0TKh0TKh0TKBoQLB8Vz8zKT0Q7IhQKKBsRIxULy8jG////fXZvGgwBKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGgwCraejjIV/GgwBKh0TGQsBnJaQ/v7+zc3N+vr6////////////39/f/v7+kYqEGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGw0Dh395/v7+nJycnp6em5ubm5ubm5ubm5ubm5ubm5ubm5ubmpqapaWlxcXF7u7u////////////6enp/P3+trGsHQ8EKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0THhAGZVxU/v7+q6uro6Ojubm5+/z93NnYLiIXJRgOKh0TKh0TKh0TKh0TKh0TJhkPFggAQjcu7u3r/f39+vr6////////////////////////m//////////g4OD+/v5lXFQeEAYqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMnGhAlGA4mGA4mGQ8pHBEqHRMqHRMqHRMqHRMpGxEnGg8hFAkaDAEfEQZXTUXRzsv////MzMy6urrj4+PZ2dn+/v6fmJMaDAEqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIgEgjJxMH4+Pnx8fH////////////////////////i4uL///9PRTwhEwkqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMjFgtDNy7+/f3k5eX////+/v7p6enr6+zh3tskFgwoGxEqHRMqHRMqHRMqHRMqHRMqHRMqHRMiFApFOjL+/v5yaWIbDgMqHRMaDAGXkIz///9QRj4gEggqHRMqHRMqHRMqHRMqHRMqHRMqHRMoGxEkFw3d29q8uLUcDgQqHRMdEAVfVk7////Pz8/39/f////////////f39/+/v6RioQbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMaDAKFfnj+/v77/P36+vv5+vv5+vv5+vv5+vv5+vv5+vv6+/v8/f73+PjX19fq6ur////////////p6en8/f62sawdDwQpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMdDwVlW1T+/v7+/v7+/v7////Bvbo6LiUgEwgrHhQqHRMqHRMrHhQlGA4ZCwAqHRN5cWv8+/r+/v77+/v////////////////////////////7/////////+Dg4P7+/mVcVB4QBiodEyodEyodEyodEyodEyodEyodEyodEykcEy4iGDMnHTMmHTAkGiIVChsOAycZDyseFCodEyodEyodEyodEyodEykcEh0PBR4QBoyFgP///9PT08XFxcrKyv7+/piRixsNAiodEyodEyodEyodEyodEyodEyodEyodEykcEiASCMjEwfr7/PDw8P///////////////////////+Xl5f///09EPCETCSodEyodEyodEyodEyodEyodEyodEyodEyMWC0E1LP/+/urq6v////v7+9DQ0P39/aagmxoLASodEyodEyodEyodEyodEyodEyodEyodExwOA25lXv///5+ZlRoMASodEx4QBWddVuno5zEkGiYZDyodEyodEyodEyodEyodEyodEyodEyMWCz4yKfv7++fl5C8iGCYZDyUYDjQnHvr5+N/f3/Dw8P7+/v///////9/f3/7+/pGKhBsNAiodEyodEyodEyodEyodEyodEyodEyodEyQWDE1COoZ+eYyFf42FgI2Ff42Ff42Ff42Ff42Ff42Ff42Ff4R8dtXRz/7+/uLi4v///////////+np6fz9/raxrB0PBCkcEiodEyodEyodEyodEyodEyodEyodEyUYDUE1LIV+eIZ+eXNqY05DOiIUCiIVCiseFCodEyodEyodEyYYDj8zKpWOiePh4P7+/tXV1cbGxvLy8vv7+////////////////////////3//////////4ODg/v7+ZVxUHhAGKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSHxEGk42I5ePi8vDv7+3r1dHOgXlzKRsRIhULKx4UKh0TKh0TKh0TKh0TKh0TKh0TJxkPGAkAhHx3////w8PDt7e3/v7+lY6JGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSIBIIycTB+vr88vLy////////////////////////4+Pj////T0U8IRMJKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TIxYLQTUs/v396enp////+vr6zM3N/v7+aF9YHQ8EKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGw0CopyY////0c7MJRgOKBsQJRgNRDgvoZyXJRcNKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0THA8EZ15X////////UUY+IBIIKRwSHhAFycTB9fb23Nzc+/v7////////39/f/v7+kYqEGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKx4UJBcMGw0CGw0CGw0CGw0CGw0CGw0CGw0CGw0CGw0CGw0CDAAAo5yY/v7+4uLi////////////6enp/P3+trGsHQ8EKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0TKx4UJhkPGw0CGw0CHA4DIRMJKRwRKh0TKh0TKh0TKh0TKh0TJhgOQzgvmpSP4d/d/v7+2NjYqampxcXF4+Pj+vr6////////////////////Av/////////g4OD+/v5lXFQeEAYqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIdDgO0rqr+/v73+Pj+/v7+/v7+/v7MyMUvIxokFgwqHRMqHRMqHRMqHRMqHRMqHRMqHRMoGhAXCQC7trP7/Pyqqqr7+/yZko0bDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIgEgjJxMH4+Pny8vL////////////////////////j4+P///9PRTwhEwkqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMiFQpFOjH+/v7n6en////19fXZ29v//v07LyYkFgwqHRMqHRMqHRMqHRMqHRMqHRMqHRMoGxAlGA7U0c/8/f3z8vFANCwjFgspHBItIRdDOC8nGhAqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMaCwGel5P+/v7+/v6Hf3kaDAEqHRMaDAGHgHr+/v7Ly8v6+vr////////f39/+/v6RioQbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMcDgOpo5/+/v7j4+P////////////p6en8/f62sawdDwQpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMrHhQmGQ8cDgMcDgMcDgMbDQIcDwQmGQ4qHRMqHRMqHRMqHRMrHhQlGA0ZCwAqHRN2bWfw7+39/v67u7vGxsbo6Oj9/f3///////////////8T/////////+Dg4P7+/mVcVB4QBiodEyodEyodEyodEyodEyodEyodEykcEh0PBLaxrPv8/vn5+f////////n5+f7+/reyrx4QBSkcEiodEyodEyodEyodEyodEyodEyodEyEUCT4zKv/+/cvLzfL09KKclxoMASodEyodEyodEyodEyodEyodEyodEyodEykcEiASCMnEwfj4+fHx8f///////////////////////+Li4v///09FPCETCSodEyodEyodEyodEyodEyodEyodEyodEyETCUxBOf///+np6f///+Xl5fDw8NbT0CATCCkcEiodEyodEyodEyodEyodEyodEyodEyMVC0E1Lfr5+ebm5v7+/m1jXBwOBCodEykcEiUYDiodEyodEyodEyodEyodEyodEyodEyodEygcESIVCtjV0vP09Pj4+cnFwR4QBSkcEiATCE5DO////9PU1Pb29v///////+Dg4P7+/pGKhBsNAiodEyodEyodEyodEyodEyodEyodEyodEyseFCQXDRwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAxwOAw0AAKOcmP7+/ujo6P///////////+np6fz9/raxrB0PBCkcEiodEyodEyodEyodEyodEyodEyodEyMWDEg9NKCblquloK+qpZyWkG1kXTAkGh4QBSodEyodEyodEyodEyodEyodEyYZDxgKADElG7m0sP///8HBwdPT0/Ly8v///////////////wP/////////4ODg/v7+ZVxUHhAGKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSHQ8EtbCr/P3+6enp////////////8vLy////UEU8IBMIKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGQsAv7u38PHx8PHzsKqmGQsBKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSHhEGw766+vr87+/v////////////////////////4+Pj////Sj82IhUKKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0THxEGWU9H////5+fn////z8/P/v7+mpOOGQwBKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0THA4EcGdg/v7+19fX/v7+pqCcGgwBKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TJBYMPDAn//7+5+jo7e7u9/X0MSUbJhgOJxoQKh0T7uzr5ebm6+vr/v7+////4ODg/v7+kYqEGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TIhQKV01Fn5qVqaOeqqSfqqSfqqSfqqSfqqSfqqSfqqSfqqSfo5yX5uPh/f399vb2////////////6enp/P3+trGsHQ8EKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0THQ8FZlxV/////v7+/v7+/v7+/v7+6ufmYFZOHA4EKx0UKh0TKh0TKh0TKh0TKh0TKx4UIRQJHQ8Fsq2p/v7+vr6+6enp/f39////////////n//////////g4OD+/v5lXFQeEAYqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIdDwS1sKv8/f7p6en////////////p6en+/v6YkYwaDAIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMbDQN2bmf+/v74+fq9uLUeEAYpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIcDwS+ubX7/P3s7Oz////////////////////////j4+T///9HOzIiFQoqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMdDwRxZ2H+/v7n6Oj+/v7Pz9D///9fVU0eEAYqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMZDAGpo5/+/v7u7u76+/vf3NojFgwoGxEqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMdDwRnXVX+/v7l5ebp6en///9aUEgfEQYqHRMaDQK1sKv6+/vS0tL8/Pz////g4OD+/v6RioQbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMaDAKGf3n+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v77+/v////////////////p6en8/f62sawdDwQpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMeEAZlXFT+/v7g4OD////////9/f7+/v79/f1PRD0gEgcqHRMqHRMqHRMqHRMqHRMqHRMrHhQjFQsnGhDi4N7w8PDT09P4+Pj////////////+/////////+Dg4P7+/mVcVB4QBiodEyodEyodEyodEyodEyodEyodEykcEh0PBLWwq/z9/unp6f////////////r6+vz9/c7Kxx4QBiocEiodEyodEyodEyodEyodEyodEyodEyEUCUo+Nvr6+vj5+dLPzSYZDygbESodEyodEyodEyodEyodEyodEyodEyodExsMArWwrP7+/unp6f///////////////////////+Tk5f79/UA0KyMWDCodEyodEyodEyodEyodEyodEyodEyodExkLAJOMhv7+/ufn5/b29t7e3/r5+DUoHyUYDiodEyodEyodEyodEyodEyodEyodEygbESMWDN/b2fz8/f////Dx8f79/T0xKCMWDCodEyodEyodEyodEyodEyodEyodEyodEyodEyodExoLAZyVkP7+/uvr6+vr6/7+/pOMhxkLASodExsNA3VsZf7+/s3Nzfr6+v///+Dg4P7+/pGKhBsNAiodEyodEyodEyodEyodEyodEyodEyodExsNA4d/ef7+/t/f3////////////////////////////////////////////////////////////+np6fz9/raxrB0PBCkcEiodEyodEyodEyodEyodEyodEyodEx4QBmVcVP7+/uHh4f////////////j4+P7+/snFwR8RBikcEiodEyodEyodEyodEyodEyodEyseFBkLAG5lXv///8/Pz/n5+f//////////////////////4ODg/v7+ZVxUHhAGKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSHQ8EtbCr/P3+6enp/////////////v7+8vLy5uPhKRwSJxoQKh0TKh0TKh0TKh0TKh0TKh0TKh0TIxYLQDQr7+7u7/Dw7evqNSkgJRgOKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGQoAqqSg/v7+4+Pj////////////////////////5OXl/fz7NysiJRcNKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSGw4Du7ay/v7+8/Pz4uLi8vT0zMjFHhAFKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0TIxYMPzMq////8/Pz////6+vr/v7+aWBYHA8EKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwRIRQJ19PQ/P39/////v7+/v7+z8vIHhEGKRwSIxULQTUs////19jY9fX1////4ODg/v7+kYqEGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGw0Dh395/v7+39/f////////////////////////////////////////////////////////////6enp/P3+trGsHQ8EKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0THhAGZVxU/v7+4eHh////////////////7/Dw////PDAnJBYMKh0TKh0TKh0TKh0TKh0TKh0TKh0TJRgNMiUc+Pf25eXn9/f3///////////////////////g4OD+/v5lXFQeEAYqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIdDwS1sKv8/f7p6en////////////9/f3s7e3s6uguIRcmGQ8qHRMqHRMqHRMqHRMqHRMqHRMqHRMlGA03KiHq6Ofu7+/6+vlVS0MfEgcqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMaDAGdlpH+/v7a2tr////////////////////+/v7m5ub5+PYwIxkmGQ8qHRMqHRMqHRMqHRMqHRMqHRMqHRMoGhAoGxHr6ef6+/v+/v7Nzc3+/v6OhoAaDAEqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMcDwRqYVr+/v7r6+v////u7u7+/v6gmZQZCwEqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMlFw04LCP9/fzy8/P////////z8/T6+fg2KiAlFw0oGxEkFgzg3dru7u7m5ub+/v7g4OD+/v6RioQbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMbDQOHf3n+/v7f39/////////////////////////////////////////////////////////////p6en8/f62sawdDwQpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMeEAZlXFT+/v7h4eH////////////////i4uL///9bUEkfEQcqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIfEQfSzsz29/jw8PD//////////////////////+Dg4P7+/mVcVB4QBiodEyodEyodEyodEyodEyodEyodEykcEh0PBLWwq/z9/unp6f////////////n5+erq6uzq6S4hGCYZDyodEyodEyodEyodEyodEyodEyodEyQXDDktJPPy8eLj4/7+/oqCfBoMASodEyodEyodEyodEyodEyodEyodEyodExsNAouEfv7+/tnZ2f////////////////////j4+Onp6uro5iseFCcaECodEyodEyodEyodEyodEyodEyodEyEUCkc8M/////Dw8P///9LS0v///1RKQSASByodEyodEyodEyodEyodEyodEyodEyodExoMAaKcl/7+/u3t7f////////z8/dnW0yEUCikcESodEyodEyodEyodEyodEyodEyodEyodEx4QBWBWT////+rq6v///////+zs7P///2FYUB0QBSodExoLAaGblv3+/s7Ozvz8/ODg4P7+/pGKhBsNAiodEyodEyodEyodEyodEyodEyodEyodExsNA4d/ef7+/t/f3////////////////////////////////////////////////////////////+np6fz9/raxrB0PBCkcEiodEyodEyodEyodEyodEyodEyodEx4QBmVcVP7+/uHh4f///////////////97e3v///2ZcVR4QBiodEyodEyodEyodEyodEyodEyodEykcEh0PBLeyrv39/unp6f//////////////////////4ODg/v7+ZVxUHhAGKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSHQ8EtbCr/P3+6enp/////////v7+8PDw5+fn5+TiKRwSJxoQKh0TKh0TKh0TKh0TKh0TKh0TKh0TIxULQjYt//7+3t/f+vv70c3KHxEGKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0THA8EdGxl/v7+19fX////////////////////8PDw7/Hx19TRJBYMKBsRKh0TKh0TKh0TKh0TKh0TKh0TKh0TGQsAhX13/v7+7Ozs9vb24uPj9PLxLyIYJhkPKh0TKh0TKh0TKh0TKh0TKh0TKh0TKBsRIxUK3NjV/Pz9////////////8fHy/v39Oi8lJBYMKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGgwBmJGM/v7+6urq////////7e3t/v7+mZOOGgwAKh0THQ8FY1pS////0M/P+vr64ODg/v7+kYqEGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGw0Dh395/v7+39/f////////////////////////////////////////////////////////////6enp/P3+trGsHQ8EKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0THhAGZVxU/v7+4eHh/////////////f391dXW////ZFpTHhAGKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSHQ8Ft7Ou/v7+7u7u///////////////////////g4OD+/v5lXFQeEAYqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIdDwS1sKv8/f7q6ur////////29vbX19fx8fLMyMUeEAUqHRIqHRMqHRMqHRMqHRMqHRMqHRMqHRMgEghSRz/////o6Oju7vD///9ANSsiFAoqHRMqHRMqHRMqHRMqHRMqHRMqHRMfEQZcUkr////U1NT7+/v////////////9/f3k5OT4+fnBvLgcDgMqHRMqHRMqHRMqHRMqHRMqHRMqHRMoGxEgEwjY1dL+/v79/f3d3d329/jBvLkcDgQqHRIqHRMqHRMqHRMqHRMqHRMqHRMqHRMkFww6LyX//v7x8vL////////////r6+v+/v5jWVIdEAUqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIfEgfRzsv9/f39/f3////////////8/f3X1NEhEwkpHBIlGA01KR/7+vnf39/z8/Pe3t7+/v6RioQbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMbDQOHf3n+/v7g4OD////////////////////////////////////////////////////////////p6en8/f62sawdDwQpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMeEAZlXFT+/v7h4eH////////+/v7w8PDNzc3///9QRj4hEwkqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIeEAbV0s/+/v7+/v7//////////////////////+Dg4P7+/mVcVB4QBiodEyodEyodEyodEyodEyodEyodEykcEh0PBLWwq/v8/eXl5fn5+fHx8d7e3rGxsf7+/o+HgRoMAiodEyodEyodEyodEyodEyodEyodEyodExkLAIuDff///+zs7fPz8/7+/p2WkhgKACodEyodEyodEyodEyodEyodEyodEyMVC0M4L////9PT1PHx8f7+/v////////n5+czMzP3+/p2WkRoMASodEyodEyodEyodEyodEyodEyodEx0PBVhNRf////X19f///83Nzf7+/oJ6dBoNAiodEyodEyodEyodEyodEyodEyodEyodEx0PBWRbVP///+vr6////////////+zs7P7+/pqTjhoLASodEyodEyodEyodEyodEyodEyodEyUYDTUoH/r59/Pz9f////////////////Lz8/79/TsuJSMXDCkcEh4QBs7KxvT19eDg4Nra2v7+/pGKhBsNAiodEyodEyodEyodEyodEyodEyodEyodExsNA4d/ef7+/tbW1vb29vT09PPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/T09Pr6+v///////+np6fz9/raxrB0PBCkcEiodEyodEyodEyodEyodEyodEyodEx4QBmVcVP7+/t3d3fz8/Pb29ujo6NLS0tjY2Pb19DAkGiYZDyodEyodEyodEyodEyodEyodEyodEyYZDy8iGPTy8fn6+v////////////////P/////////4ODg/v7+ZVxUHhAGKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSHQ8EtbCr9vf4x8fH0NDQx8fHtbW109PU///+QDQsIxULKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSHQ8E1NDN/v7+/v7+////+fn5//7+Oi4lIRQKKh0TKh0TKh0TKh0TKh0TKh0TJxoQKRwS7uzq5eXl1tbW8fHx/f39+vr66urqwcHB/v7+bWRdHQ8EKh0TKh0TKh0TKh0TKh0TKh0TKBsRHQ8Ey8fE/v7+9/f3+vr61NTU////TEE4IRMJKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGgwBnpiT/v7+7Ozs/////////////v7+/Pz91dLPIRMJKRwSKh0TKh0TKh0TKh0TKh0TKh0THhAGXlRM////7Ozt////////////////6+zs/v7+Z11WHQ8EKh0TGQwBjIV//v7+yMjI0tLS/v7+kYqEGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGw0Dh395/v7+sbGxzMzMycnJycnJycnJycnJycnJycnJycnJycnJyMjIyMjIzs7O39/f9/f3////6enp/P3+trGsHQ8EKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0THhAGZVxU/v7+xcXF1tbWzc3NwsLCp6en/v7+qKOeGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh4UGwwCZ11V////8fHx////////////////yf/////////g4OD+/v5lXFQeEAYqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIdDwS1sKzv8PGZmZmZmZmlpqbPz8////+EfHYbDQMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMdDwRVS0P////39/f////////39/f+/v64s7AYCgAoGxEqHRMqHRMqHRMqHRMqHRMqHRMcDgOdl5L+/v6srKzR0dHc3NzX19fJycnU1NT9/Ps5LSQkFw0qHRMqHRMqHRMqHRMqHRMrHhQYCgBwZ2D////29vb////t7e3l5+ft6+kqHRMnGhAqHRMqHRMqHRMqHRMqHRMqHRMqHRMpHBIhEwjV0s/9/f3+/v7////////////////z8/T8+vo2KiElGA0qHRMqHRMqHRMqHRMqHRMqHRMaDAGRioX+/v7p6en////////////////u7u7+/v6jnZgaDAEqHRMgEghSRz/////Pz8/Nzc3+/v6RioQbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMbDQOHf3n+/v6mpqalpaWioqKioqKioqKioqKioqKioqKioqKioqKjo6Ojo6OsrKy7u7vs7Oz////q6ur8/f62sawdDwQpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMeEAZlXFT+/v6lpaWenp6bm5u0tLT19vfo5uU3KyEjFgwqHRMqHRMqHRMqHRMqHRMqHRMqHRMnGhAeEQbRzsr+/v75+fn///////////////+i/////////+Dg4P7+/mVcVB4QBiodEyodEyodEyodEyodEyodEyodEykcEhwOA7Ouq/7+/vLz9Pv8/f7+/vr494N7dR0QBSkcEiodEyodEyodEyodEyodEyodEyseFCQXDR0QBdXSz/7+/vn5+f////////////j4+P///3x0bhUHACkdEiodEyodEyodEyodEyodEyMWCzgsIvb19OLi46CgoLGxsaysrK6urv7+/qSemRoMAiodEyodEyodEyodEyodEyseFB0PBD8zKvr5+Pv7+/////39/dbW1vr7+7awrBsNAiodEyodEyodEyodEyodEyodEyodEyodEyUXDTcqIfv7+vLz8////////////////////+zt7P///15UTB4QBiodEyodEyodEyodEyodEykcEh4QBsvHxP7+/vv7+/////////////////////39/eDc2iMWCygbEScaDywfFvHv7uHj48TExP7+/pGKhBsNAiodEyodEyodEyodEyodEyodEyodEyodExsNA4F6dP////7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v3+/v7+/v///+Pj4+fn5////+rq6vz9/raxrB0PBCkcEiodEyodEyodEyodEyodEyodEyodEx0PBWZcVf7+/vX29/j5+f7+/v///87LyEU5MB8RBiseFCodEyodEyodEyodEyodEyodEyocExQGAIV9d/////j4+P////////////////////7/////////4ODg/v7+ZVxUHhAGKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TIhUKcWlirKeir6qlmpOOd25oOy4lHA4EKRsRKh0TKh0TKh0TKh0TKh0TKh0TKx4UIhQKHA8EqKOe////+fn5////////////////////+/v7////bGNbFggAKBsRKh0TKh0TKh0TKh0TKx0UHA8EYllR////8vP019nZ39/h/v7+ysbDLB8VJRgOKh0TKh0TKh0TKh0TKh4UHA4DNCge4uDd/v7++fn5////+fn5zMzN/v7+dm5nHA4DKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0THRAFYlhR////7Ozs////////////////////7Ozs/v7+mJCLGgwBKh0TKh0TKh0TKh0TKh0TJRgOMycd+Pf29fX1////////////////////////8PHx////PjMqIxYLKh0TGw4DurWx9/j4sLCw/v7+kYqEGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TJhkPQTUsZl1VaF9YaV9YaV9YaV9YaV9YaV9YaV9YaV9YaV9YaV9YaV9YXVNMvrq2/v7+4eHh////6urq/P3+trGsHQ8EKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0TIxYLSj42p6KesaynpJ6ZkIiDWlBIJBcNIRMIKx4UKh0TKh0TKh0TKh0TKh0TKh0TJhkPFQcAbGNc////+vr7////////////////////////WP/////////g4OD+/v5lXFQeEAYqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMrHhQiFQodDwQcDgQaDAEbDQMkFwwqHRMqHRMqHRMqHRMqHRMqHRMqHRMlFw0YCgAxJBqxrKj////6+vr////////////////////////9/f39/f3///+AeHIcDgMfEQcqHRMqHRMqHRMqHRMqHRMdDwRSRz+/urfp5+Xe2tiNhoArHRQjFQsrHhQqHRMqHRMqHRMmGQ8XCABHPDPl4+H+/v76+vr////////19fXW19f///9EOTAjFQoqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMaDACXkIv+/v7q6ur////////////////////9/f39/v7Py8gfEQcpHBIqHRMqHRMqHRMqHRMfEQdYTUb////t7O3////////////////////////q6ur+/v5vZl8cDgMqHRMbDQJ5cWv+/v6xsbH8/P2RioQbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMrHhQlGA0dDwUeEAUeEAUeEAUeEAUeEAUeEAUeEAUeEAUeEAUeEAUeEAUOAACblZD+/v7g4OD////q6ur8/f62sawdDwQpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMrHhQnGQ8dDwQcDwQbDQMaDAEfEQcoGxEqHRMqHRMqHRMqHRMqHRMqHRMlGA4aDAEjFgx9dW/////9/f37+/v///////////////////////8F/////////+Hh4f7+/mRbUx0PBCkcEikcEikcEikcEikcEikcEikcEikcEikcEigbESgbESgbESkbESkcEikbESgbESgbESgaECUXDR8SBxsNAhsNAjMnHXtybPDu7f7+/vv7+/////////////////////////////////////7+/v///8G8uEk9NRoMAR0PBCYZDykcEiodEyodEyATCB4QBikcEiMWDBwOBCYZDyseFCodEykcEiMVCxkLACgaEIR8dv///v7+/vz8/P////////7+/u/v7+3t7uPg3iQXDSYZDykcEikcEikcEikcEikcEikcEikcEigaEB4RBtDMyf39/f39/f////////////////////////T19fn49zMmHSQWDCkcEikcEikcEikcEhkLAIqDff7+/unp6f////////////////////////Dw8P7+/qumoRkLACgbESETCUM3L//+/sXFx/j5+ZGKgxoMACkcEikcEikcEikcEikcEikcEikcEikcEikcEikcEikcEikcEikcEikcEikcEikcEikcEikcEikcEikcEikcEikcEhoMAaCalf7+/uHh4f///+vr6/3+/raxqxwOAigbESkcEikcEikcEikcEikcEikcEikcEikcEikbESgbESgbESgbESkcESkcEigbESgbEScaECUXDR8SBxsNAhsNAjMmHXFpYt7b2f////////z8/P///////////////////////////xL/////////6+vs/v7+XlVNFAYAIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIhQKJRgNJxoQKBsRNyshUkg/cWhiqaOf7Orp/v7+/v7+/f39/////////////////////////////////////////////Pz8/v7+////urWxYFZPLyIYHA4EGgwBHQ8EHxEHIBMIHhEGHxIHIRMJHxEGHA4DGQsBIBMIPjIqgnp05uTh/v7+/v7+/Pz8////////////////6enp/v7+oZuWEQIAIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJGw0DMCMa/Pv69vf3////////////////////////////7+/v////WE5GFQcAIRMJIRMJIRMJIBIIFgcAycXB/v7++vr6/////////////////////////////f395uPhHxIHHxEGHxEHGw0D19TR8fHz/P39i4N9EQMAIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJEQMAnZaR/v7+6urq////8/Pz/v7+s62pEwUAIBIIIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJIRMJJBcMJxoQKh0TOS0jVUtDe3NsuLOw+Pf2/v7+/v7+/f39////////////////////////////////////Cf/////+/v729vb8/PzPzMq5tbG9uba9uba9uba9uba9uba9uba9uba9uba9uba9uba9uba9uba9uba8uLXAvLnMycfV0tDd2tnp5+b////////+/v7+/v78/P39/f3+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v79/f3+/v7+/v7////08vHAu7iTjIdyaWJbUUhOQztOQztOQztOQztdUkt4cGifmZTSzsv////+/v7+/v7////////////////////////////39/f+/v3n5ePJxMHOysfOysfOysfOysfOysfOysfOysfOysfLx8Pa1tT////4+Pj////////////////////////////5+fn+/v7q5+XJxMHNysbOysbNysbNycbNycb////6+vr////////////////////////////////5+fn////Sz8zMyMXOysfJxMH59/b8/f38+/vt6+nJxcHOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfJxcL08vD9/f34+Pj////9/f38/Pz7+vnJxcLOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfOysfNysba19Tp5uTy7+749/b////+/v7+/v7+/v79/f3////////////////////////////////////////////H//7+/v////////z8/P////////////////////////////////////////////////////////////////////////////////////////7+/v39/f7+/v7+/v//////////////////////////////////////+fzt3+nWxf3t3v////7+/v7+/v////7+/v7+/v7+/v7+/v7+/v7+/vr6+v38/P39/Pv6+v7+/v7+/v7+/v7+/v7+/vr6+v////////39/f39/f7+/v////////////////z8/P7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/vj4+P7+/v39/f7+/v////////////////////////f39/7+/v7+/v7+/v7+/v7+/v7+/v7+/v3+/v39/f////////39/fz8/Pz8/Pz8/Pz8/P7+/vv7+/r7+/////7+/v7+/v7+/v7+/vv7+/n5+f7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v////z8/P////////////z8/P7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v////7+/v7+/v7+/v7+/v////////////////////////////////////////////////////////7//v7+/////////////v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+//////////////////////////////////////////////////zz9+nb3sq4vqiUn4ZweWBKXkUwSzQgXUMt38y7/v7+////////////////9fX12tra2dnZ3Nzc3d3d3Nzc3d3d3N3d3Nzc2dra29vb6+vr7u7u5eXl3Nzc29vb3d3d4ODg5OTk6urq8fHx+Pj4/f39////////////////////////////////////////////+/v77Ozs6+vr3d3d3Nzc5ubm9vb2////////////9fX15ubm6enp6enp6urq6urq6enp6urq9fX1/////////////v7+8/Pz5OTk3Nzc3Nzc3d3d3d3d3Nzc4ODg7Ozs6enp6enp6+vr9vb2///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////+/v7/////////////////////////////////////////////////////////////////////////////////////////////////////////////////+vDy5Nfdyri8ppKcg2t7YkpiSDJMMx5CKhc9JxRAKhdDLRtFLx4xHQyfhnP+/v7////////9/f3q6urKysqvr6+xsbG0tLS2tra3t7e3t7e2tra0tLSxsbGtra2qqqqqqqqqqqqnp6empqapqamurq63t7e+vr7Hx8fR0dHf39/t7e36+vr////////////////////////////////x8fHS0tKvr6+np6eoqKioqKjBwcHk5OT7+/v////6+vrg4OC8vLyoqKiqqqqrq6urq6upqamqqqrFxcXn5+f9/f3////4+Pjd3d25ubmoqKipqampqampqampqampqamqqqqrq6upqamsrKzKysrq6ur+/v7///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/////////////////////////////////////////////////////////////////////////////////////////////57/Hk1tzJt7qkjp2EbH1iSmRIMVE2IEcuGUMrF0UuGkgxHUs1IUo0IUozIUgzIEcyIEYxHzcjEZyFcv7+/v////////39/d/f383NzeXl5+Hj4+Dh4eDh4uDh4uDh4uDh4uDh4uDh4uDh4uDh4uDh4uDh4eTl5ejo6eLi49zc3c3Nz7y8vKioqJ2dna+vr8TExNbW1uvr6/r6+v////////////////////7+/uzs7MnJyeLi4uPk5eDh4eXn59TU1NTU1Pv7+/////T09MfHx9XV1efn6ODh4uDh4uDh4eHh4ufo6M7OztDQ0Pj4+P////j4+M3NzdnZ2eXm5+Dh4uDh4uDh4uDh4uDh4uDh4uDh4eDh4+Tl5dDQ0N7e3v39/f////////////7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7//v7+//////////////////////////////////////////////////////////////////////////rw8OPV2cazvKaQn4VtfWFIZkoyVTkiSzEaSC8ZSzIdTjUhUDcjUDgkTzgkTTYjTDUiSzUiSTMhRzIgRzEgRTAfRDAeNSERnIVy/v7+////////////3t7e////4N3bxsK+y8bDysbDysbDysbDysbDysbDysbDysbDysbDysbDy8fDysXCycXBycXB1tPQ7+3r/fz7/////f//3d3esrKyoqKixsbG3d3d9PT0////////////////////4+Pj9/f48O7txcG9yMPA1dHO////4ODg////////8/Pz1NTU////zcrHycXBysbDy8bDx8O/2NTS////zc7N+Pj4/////v7+5+fn////ysbDycXCysbDysbDysbDysbDysbDy8bDxsK+4d7c////4ODg/////////////////Pz8/////Pz8/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v79/v39/////////////////////////f/+/v7/////////////////////////////////////////////////////+e7u4tPZx7W6o42cgmqBZUtoTDJYOyJRNBxOMxxRNh9TOSNVOyVVPCZUOyZSOiVROSVQOCRONyNNNyNMNSJKNCJJMyFHMiBGMR9FMB9DLx5CLh4yIBCbhXL+/v7////////////h4eH+/v5qYlsSBAAgEwggEwggEwggEwggEwggEwggEwggEwggEwggEwggEwggEwggEwggEggiFQopHBI9MSheVE2XkIvf3Nn////t7u6zs7O1tbXX19fx8fH////////////////g4OD+/v6clZAQAgAXCABHOzL////l5ub////8/Pzj4+Pt7u/d2tgcDgQeEAYgEwggEwgaDAEyJRz8+/vc3t7w8PD////+/v7w8PHr6ecjFwwdDgQgEwggEwggEwggEwggEwggEwgRBABuZV7+/v7h4eH////////////////7+/vMysl4c29sZmBuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNuaGNtZ2JtZ2KdmZbu7u3///////////////9j//7+/v/////////////////////////////////47e7i09bFsbmii5yCaYBjSWlLMVs9JFM1HVI1HVQ4IVc8JVo/KFk/KFk/KFg+KFY9J1U8JlM7JVI6JVE5JVA4JE43I0w2Ikw1IUo0IkkzIUgyIEYxH0QwH0MvHkEuHUAtHDAeD5qDcf7+/v///////////+Dg4P7+/nBoYRwOAykcEikcEikcEikcEikcEikcEikcEiodEyIUChsNAxwOAxwOAx4RBiUYDikcEigaECQWDB4QBhkLACQXDV1TTNHNyv///9HR0aqqqtfX1/Pz8////////////+Dg4P7+/p+ZlBoMASASCE5DO////+Pj4/////n5+cvLy/7+/paPihgKACkcEikcEikcEigbER0PBczHxPT29tvb2/z8/P7+/u7u7+vp5ywgFiYYDikcEikcEikcEikcEikcEikcEhsOA3RrZP7+/t/f3/////////////////7+/ubk4mlhWykdEyQXDSYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyYZDyUYDiMXDV9XUNfW1v///////////////w///v7+//////////////ft7N/Q1MOvu6SNmoBngWNIa0wyXT4kVjceVjggWDsjWz4nXUEpXUEqXEEqXEApW0ApWT8oWD4oVz0nVTwmVDsmUzolUTkkUDgkTzcjTjcjTDUiSzUiSjQhSDMgRzIgRTEfRC8eQi4eQS0dPywcPSsbLRwNmYJw/v7+////////////4ODg/v7+cWliHQ8EKh0TKh0TKh0TKh0TKh0TKh0TKh0TJhgOTEE5bWRdcGdgbmVeV0xFLSAWHA8EKRwSKh0TKh0TKh0TKBsQHA4EIBIHf3dx////4+PksLCw3d3d9/f3////////4ODg/v7+oJqVGw0CIRMJT0Q8////4uTk////9vb2z9DQ////VkxDHxEHKh0TKh0TKh0TKh0TGgwBhn54/v7+ycnJ+fn5/v7+7u7v6+nnLSEXJxkPKh0TKh0TKh0TKh0TKh0TKh0THA8EdWxl/v7+4ODg/////////////////v7+////s6+tSkA4JxoPKBoQKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRKBsRJxoQJRgOUEdAyMbF////////////////Ef/+/v7////j1cKdg2l/YkdpSjBePyRYOR9ZOiFbPSReQShgQytgQytgQytfQyteQipdQSpcQSpbQClaQClZPyhYPihWPSdVPCZUOyZSOiVROSVPOCRONyNNNiNMNSJKNCJJMyFJMyFBLBo3IQ41IA07JxVALh0+LBw8Khs6KRorGgyXgW/+/v7////////////g4OD+/v5xaWIdDwQqHRMqHRMqHRMqHRMqHRMqHRMqHRMbDQKjnpn+/v7+/v7+/v7////p5+V0bGUdDwQpHBIqHRMqHRMqHRMqHRMnGhAWCABYTkb8+/vk5eW3t7fn5+f9/f3////g4OD+/v6gmpUbDQIhEwlPRDz////i5OT////r6+vk5Obw7u0rHhQnGhAqHRMqHRMqHRMqHRMhFAlKPzb////U1NT19fX9/f3u7u/r6ectIRcnGQ8qHRMqHRMqHRMqHRMqHRMqHRMcDwR1bGX+/v7g4OD////////////////////+/v7r6+uin5t9dXB5cm16c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c256c214cGuNh4PU09L///////////////9u//7+/vDi0mpJLlU2HF0+JWFDKmNFLGRGLWJFLGJELGFELGFEK2BDK15DK11CKl1BKlxBKltAKVo/KVg+KFc9J1Y8J1Q8JlM6JlI6JVA5JE84JE43I0w2Iks1Iko0IUgzIUgzIT0nFVI/L5GFe5SJgFdGNzMhETwqGzooGjgnGSkYC5aAb/7+/v///////////+Dg4P7+/nFpYh0PBCodEyodEyodEyodEyodEyodEyodExwOA6qkoP7+/ufn5/7+/v7+/v7+/v///4R9dxoMASodEyodEyodEyodEyodEyodExcJAFxSS////9XV1tLS0vPz8////+Dg4P7+/qCalRsNAiETCU9EPP///+Lk5Pz8/NDQ0Pr7+7GspxoMAiodEyodEyodEyodEyodEygbESYZD+bj4err6+fn5/r6+u/v8evp5y0hFycZDyodEyodEyodEyodEyodEyodExwPBHVsZf7+/uDg4P////////////////////////7+/vT09PLx8e/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/u7u/v7/f39/7+/v///////////+7//v7+uZ+GVTYcZEcuZEYtZEYtZEUtY0UsYUQsYUQrYEMrX0MrXkIqXkIqXEEpXEApW0ApWj8oWT4oVz0nVjwnVTsmUzslUjklUDkkTzgjTjcjTDYiSzUiSjQhSDMhRzIhOyYTU0Aw4N3a////////7+3raFdJMR8QOCcZNiYYJhcKlX9u/v7+////////////4ODg/v7+cWliHQ8EKh0TKh0TKh0TKh0TKh0TKh0TKh0THA4Dq6Wi/v7+7e3t////////////+fn5////Sj83IBMJKh0TKh0TKh0TKh0TKh0TKh0TFgcAjoaB////wMDA6urq/f394ODg/v7+oJqVGw0CIRMJT0Q8////4uTk+fn5zMzM/v7+a2JbHA4EKh0TKh0TKh0TKh0TKh0TKh0TGgwBpZ+b/P39zc3N9/f37u7v6+nnLSEXJxkPKh0TKh0TKh0TKh0TKh0TKh0THA8EdWxl/v7+4ODg/////////////////////////v7+/v7+///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////+/v6xl35ZOSBkRi1kRi1jRSxiRCxhRCxgQytgQyteQipeQipdQSpcQSlbQClaPyhZPihYPSdWPCdVOyZUOyVSOiVROSRQOCRONyNNNiJMNSJKNCFJMyBIMiBHMiA+KRdDLx7Tzsr////////////////PvK41HQozJBYzJBcjFQmTfW3+/v7////////////g4OD+/v5xaWIdDwQqHRMqHRMqHRMqHRMqHRMqHRMqHRMcDgOrpaH+/v7k5OT////////////y8vL+/v6zrqobDQMqHRMqHRMqHRMqHRMqHRMqHRMmGQ8kFgzg3tzt7u7T09P4+Pjg4OD+/v6gmpUbDQIhEwlPRDz////h4eHy8vLc3N79/Ps4KyIkFw0qHRMqHRMqHRMqHRMqHRMqHRMdDwVjWVH////Nzs709PTu7u/r6ectIRcnGQ8qHRMqHRMqHRMqHRMqHRMqHRMcDwR1bGX+/v7g4OD////////////////////////+/v7+/v719PXNy8nAvLrAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbvAvbq/vLrS0M729vb///////////+7//7+/rOZgFk6IGNGLWNFLWJFLGFELGBDK2BDK19CKl1BKl1BKlxBKltAKVo/KFk+KFc9J1Y8J1U7JlM6JVI5JVE5JE84JE43I002Iks1Iko0IUgzIEcyIEYxIEIsGzkkEry0r////////////////////76chTggDDAiFjEiFiETCJJ9bP7+/v///////////+Dg4P7+/nFpYh0PBCodEyodEyodEyodEyodEyodEyodExwOA6ulof7+/uTk5P////////////////X29/Hv7iwgFicaDyodEyodEyodEyodEyodEyoeFBkLAXNqZP///8nJyfX19eDg4P7+/qCalRsNAiETCU9EPP///93d3d7e3vX29svHxB4QBSkcEiodEyodEyodEyodEyodEyodEyUYDjMnHvn49+Dg4Ozs7Ozt7evp5y0hFycZDyodEyodEyodEyodEyodEyodExwPBHVsZf7+/uDg4P////////////////////////7+/v7+/ubm5Xx1cEM5MEQ5MUU6MkU6MkU6MkU6MUU6MUU6MUU6MUU6MkU6MkU6MkU6MkU6MUU6MUU6MUU6MUU6MkU6MkU6MkU6MUU6MUU6MUU6MUU6MkU6MkU6MkU6MkU6MUU6MUU6MUU6MUU6MUU6MkU6MkU6MkU6MUU6MUU6MUU6MUU6MkU6MkU6MkU6MkU6MUU6MUU6MUU6MUU6MkU6MkU6MkU6MUU6MUQ5MEQ4MH53cuXl5P///////////zL//v7+s5mBWDkgY0UtYkUsYUQsYEQsX0MrXkIrXUIqXEEqXEEqW0ApWkApWD4oVz0nVjwnVDsmUzolUjklUDkkTzgkTjcjTDYiSzUiSjQhSDMhRzIgRTEfQy4dNB4MoJaO////////////////////38a1XTYaLSATMSIWLyEVHxIHkXxs/v7+////////////4ODg/v7+cWliHQ8EKh0TKh0TKh0TKh0TKh0TKh0TKh0THA4Dq6Wh/v7+5OTk////////////////6enr////RjsyIhUKKh0TKh0TKh0TKh0TKh0TKh0TJhgPLSAX8/Hw5ebm6+vr3d3d/v7+oJqVGw0CIRMJT0Q8////1NTVwMDA/v7+g3x2GgwBKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0THQ8ExcG99vf41dXV6enq6+nnLSEXJxkPKh0TKh0TKh0TKh0TKh0TKh0THA8EdWxl/v7+4ODg/////////////////////////v7+/v7+8fHwfHZxJRgOIBIHIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIhQKIRMJHxEHVkxF09HQ////////////Cv/+/v6ymIBXOB9iRCxhRCtgRCxZOyNTNRxSNRxTNh5bQClbQClaPyhYPihXPSdVPCZUOyZTOiVROSVQOCRPNyNNNiNMNSJLNCFJNCFIMiBHMiBFMR9EMB4yHQqFeW/////////////////////u3dJuRCQpGw4vIhYuIRUtHxQcEAWQe2v+/v7////////////g4OD+/v5xaWIdDwQqHRMqHRMqHRMqHRMqHRMqHRMqHRMcDgOrpaH+/v7k5OT////////////////m5ub+/v5kW1MeEAYqHRMqHRMqHRMqHRMqHRMqHRMqHRMZCwGtp6L8/f3R0dHa2tr+/v6gmpUbDQIhEwlPRDz////IyMjHyMj///9IPDMiFAoqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMaDAF/d3D+/v64uLjh4eLr6ectIRcnGQ8qHRMqHRMqHRMqHRMqHRMqHRMcDwR1bGX+/v7g4OD////////////////////////+/v7+/v79/f2loqBLQjs/NCxBNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy9BNy8+NCxiWlPNy8r///////////8v//7+/rKYgFY4H2FELGBDLFc6InNaRrWoncC1rIl1ZE8zG1U7JVg+KFc9J1U8JlM7JlI6JVE5JVA4JE43I002I0s1Iko0IkkzIUgzIEYxIEUxH0QwHzMeDGtcT/n5+f////////////////nv6IZZOysaCi0hFS4gFSwfFCoeExkOBY56av7+/v///////////+Dg4P7+/nFpYh0PBCodEyodEyodEyodEyodEyodEyodExwOA6ulof7+/uTk5P///////////////+Tk5P7+/n11bhsNAiodEyodEyodEyodEyodEyodEyodExwOA21kXf7+/s/Pz9vb2/7+/qCalRsNAiETCU9EPP///729veHh4uPg3iUXDSgbESodEyodEyodEyodEyodEyodEyodEyodEyIUCkY7Mv///8PDw9fX1+vp5y0hFycZDyodEyodEyodEyodEyodEyodExwPBHVsZf7+/uDg4P////////////////////////7+/v7+/v///+Tj48C+vbu5t7y6uLy6uLy6uL26uL26uL26uL26uLy6uLy6uLy6uLy6uLy6uL26uL26uLy6uLy6uLy6uLy6uLy6uL26uL26uL26uLy6uLy6uLy6uLy6uLy6uL26uL26uL26uLy6uLy6uLy6uLy6uLy6uL26uL26uLy6uLy6uLy6uLy6uLy6uL26uL26uL26uLy6uLy6uLy6uLy6uLy6uL26uL26ubu5t8TCwejn5////////////7j//v7+sZd/VDceX0MrWTwjcFdD7uvo////////////rJ6SUDUeTzUeVTwnUzolUTklUDgkTzcjTjYjTDUiSzQiSTMhSTQhOiUUNiIQRC8dRTEgNiEQVUQ16+no//////////////////v4nXNVMRoJKh8VLiAULB4TKh0SKBwSFg0DjXhp/v7+////////////4ODg/v7+cWliHQ8EKh0TKh0TKh0TKh0TKh0TKh0TKh0THA4Dq6Wh/v7+5OTk////////////////4uLi/v7+j4iCGQsBKh0TKh0TKh0TKh0TKh0TKh0TKh0TIxULQjYu////3Nzc2tra/v7+oJqVGw0CIRMJT0Q8/Pz7urq6+vr7nZaRGQsBKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKBsRJBcN4t/d3N3dzs7Q6+nnLSEXJxkPKh0TKh0TKh0TKh0TKh0TKh0THA8EdWxl/v7+4ODg/////////////////////////v7+/v7+/v7+///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////+/v6xl39TNh5eQipRNBuci33////////////////////Iv7hZQSxJLxhTOyZROSVQOCRPNyNNNiNMNSJKNCJJMyFBKxl1amBjWlMrGw4mEwRGMyTf29j///////////////////+1jnQ6HggoHRMtHxQrHhMpHRInGxEmGhEUCwKMd2j+/v7////////////g4OD+/v5xaWIdDwQqHRMqHRMqHRMqHRMqHRMqHRMqHRMcDgOrpaH+/v7k5OT////////////////l5eX+/v6gmpUbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMmGQ8uIRfv7Ovn6OjX19f+/v6gmpUbDQIhEwlPRDz29fXLy8v+/v5bUUkeEAYqHRMqHRMqHRMqHRMqHRMqHRMqHRMoGxEnGg8rHhQaCwGfmJP4+fnS0tLm5OItIRcnGQ8qHRMqHRMqHRMqHRMqHRMqHRMcDwR1bGX+/v7g4OD////////////////////////////+/v7////7+vrIx8asqqetqqitqqitqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqqisqaisqqjMy8n4+Pj///////+o//7+/qyTfFI1HV1BKlY5IXVeSvb18////////////////////9/Z1WhUQjUeCjciDzYhDzUgDjQfDTMeDTEeDDAcDB0JAKegmv///8bEwmlhXoqFgeLj4/j4+P///////////8yrlUclDCYbEi0gFCoeEykdEicbESUaECMZEBIJAYt2aP7+/v///////////+Dg4P7+/nFpYh0PBCodEyodEyodEyodEyodEyodEyodExwOA6ulof7+/uTk5P///////////////+np6f39/q2nohwOAyodEyodEyodEyodEyodEyodEyodEykcEiATCNrW1PPz9NTU1P7+/qCalRsNAiETCU9EPPLy8u/w8Ofl4y4hGCYZDyodEyodEyodEyodEyodEyodEygbETElGzUpHygbEB4QBl5UTf7+/ujp6d3b2S0hFycZDyodEyodEyodEyodEyodEyodExwPBHVsZf7+/uDg4P////////////////////////////7+/v7+/uXl5Hp1cDgtJTcsJDgtJTgtJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTctJTYsJDYsJHRuaeLh4P///////yX//v7+nYRsUTUdXEEpW0AqUTUdeWNR6OTg////////////////////x8bFdm1mbmVecGhhcGdgb2dgb2dgbmZgbmZfYlpUvLm2////////////7u7vxcXFt7e31NTU////4Me1WDAUJBkPLB8UKh4TKBwSJhsRJBoQIxgQIRcPDwcAiXVn/v7+////////////4ODg/v7+cWliHQ8EKh0TKh0TKh0TKh0TKh0TKh0TKh0THA4Dq6Wh/v7+5OTk////////////////6urq/P3/tbCrHQ8FKRwSKh0TKh0TKh0TKh0TKh0TKh0TKRwSHQ8ExMC89/j4zMzM/v7+oJqVGw0CIRMJTUI69fX1/v7+rKejGw0DKh0TKh0TKh0TKh0TKh0TKh0TKh0THxEHZFtThH13HQ8EJhgOMSQb5uTj/v7+2NbULSAXJxkPKh0TKh0TKh0TKh0TKh0TKh0THA8EdWxl/v7+4ODg/////////////////////////////////v7+5ubmfHZxKBsQIBMIIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhUKIhQJHxEGTEI7yMbF////////Cv////+bgmtPMxxbQClZPyhYPyhLMBhiSTTSysP////////////4+Pj09fX////////////////////////////////////////////////////////////z8/Pm6Oro1sttQiQkFwwqHhMqHRIoHBImGhAkGRAiGA8gFg4fFQ0NBQCIdGb+/v7////////////g4OD+/v5xaWIdDwQqHRMqHRMqHRMqHRMqHRMqHRMqHRMcDgOrpaH+/v7k5OT////////////////p6en8/f24s64dDwUpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMdDwS1sKz6+/zHx8f+/v6gmpUbDQIhEwlMQjn7+/v///9tZF0cDgMqHRMqHRMqHRMqHRMqHRMqHRMqHRMZCwGdl5LOy8kfEQYpHBEcDgOwq6f////Z19UtIBYnGQ8qHRMqHRMqHRMqHRMqHRMqHRMcDwR1bGX+/v7g4OD////////////////////////////////+/v7v7u+Xko5GPDRANS1CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy9CNy8+MytXT0nAvr3///////8v/////5uBak4zHFk/KFg9J1Y9J1Y8J0syHE83ILSpnv///////////////////////////9rV0cnDvtPOytLOydLNyc3Jxenn5f////////////////////////3y64RYOCYWCSgdEycbECEVCiEWDCQZECEYDyAWDh4VDRwTDAoEAIZyZf7+/v///////////+Dg4P7+/nFpYh0PBCodEyodEyodEyodEyodEyodEyodExwOA6ulof7+/uTk5P///////////////+jo6P3+/raxrR0PBSkcEiodEyodEyodEyodEyodEyodEyodExwOA62oo/3+/sTExP7+/qCalRsNAiETCUxCOf7+/vX09DwwJiQWDCodEyodEyodEyodEyodEyodEykbESIVC9DNy/n5+TgsIyQXDRsNAnVsZv///9rY1i0gFicZDyodEyodEyodEyodEyodEyodExwPBHVsZf7+/uDg4P////////////////////////////////7+/vf399nX17u4trq3tbq4tbq4tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbq3tbm2tL+9u+Pi4v///////7X/////moFqTDEbVz0nVjwnVDsmUzolUzomTDMfQyoUlYZ5+/r5////////////////////0szHVkQ0LhkHOygXOygYIw8AnZWP/////////////v7+//////v3m3BTLBcGJh0TIhYLIxcNOS8mKR8WFQwEIBcPHhUNHBMMGhILBwIAhXFk/v7+////////////4ODg/v7+cWliHQ8EKh0TKh0TKh0TKh0TKh0TKh0TKh0THA4Dq6Wh/v7+5OTk////////////////6Ojo/f7+trCsHQ8FKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0THA4DrKai/v7+xcXF/v7+oJqVGw0CIRMJTEI5////w8C9HxEHKRwSKh0TKh0TKh0TKh0TKh0TKh0TIxULQDQs+Pj3////Z15XHA4EIhULQjcu/f393tzaLSAWJxkPKh0TKh0TKh0TKh0TKh0TKh0THA8EdWxl/v7+4ODg/////////////////////////////////v7+/v7+//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////+Yf2hLMBpWPCZUOyZTOiVROSVQOCRPNyNLNCE8JA92Y1Ts6OX////////////////////s6uhwYVUsGAcuGwtBMCLY1tP///////////////////+0jXI1GgYiGREjFww0KiG+u7jw8O/b2ddcT0YUCgMbEwwZEgsXEAoFAACEcGT+/v7////////////g4OD+/v5xaWIdDwQqHRMqHRMqHRMqHRMqHRMqHRMqHRMcDgOrpaH+/v7k5OT////////////////p6en8/f24s60dDwUpHBIqHRMqHRMqHRMqHRMqHRMqHRMqHRMcDgSyran9/v7Ly8v+/v6gmpUbDQIhEwlNQjr///+Hf3kaDAEqHRMqHRMqHRMqHRMqHRMqHRMqHRMbDQJ1bWf+/v7+/v6noZ0aDAEoGxEjFQvV0tDm5eMtIBYnGQ8qHRMqHRMqHRMqHRMqHRMqHRMcDwR1bGX+/v7g4OD////////////////////////////+/v7+/v75+fny8fHt7O3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3u7e3t7e3y8fH8/Pz////t//7+/pqBakkvGVQ7JlI6JVE5JVA4JE43JE02I0s1Iko0ITskEFpGNdTOyP////////////////////39/IuAdzYlFsfDv////////////////////8qqk0MiCiAYDyccEhUJAIqEf////////////+fXzC0ZCxINCBcQChUOCQIAAIJvY/7+/v///////////+Dg4P7+/nFpYh0PBCodEyodEyodEyodEyodEyodEyodExwOA6ulof7+/uTk5P///////////////+jo6Pz9/baxrB0PBSkcEiodEyodEyodEyodEyodEyodEyocEh0PBb25tfz9/tHR0f7+/qCalRsNAiETCVBFPfj3909EPCETCSodEyodEyodEyodEyodEyodEyodExsOA7y3s/z8/fDw8Onn5SkcEicaEBkLAJqTj+rp6C0gFycZDyodEyodEyodEyodEyodEyodExwPBHVsZf7+/uDg4P////////////////////////7+/v7+/v7+/ujo55mVknVuaHdwandxandxandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandwandvanVuaZqVkufm5v///2r//v7+qI95Ry0YUjklUDgkTzcjTjYjTDUiSzUiSjMhSDIgSDMhPCYTRS8etayk////////////////////////4+De////////////////////3sSyVC4THhUNJhsSJRoQEwgAlZCM////////////8ODVQScVDAkFFA4IEgwIAAAAgG5i/v7+////////////4ODg/v7+cWliHQ8EKh0TKh0TKh0TKh0TKh0TKh0TKh0THA4Dq6Wh/v7+5OTk////////////////5OTk/f7+rqmkHA4DKh0TKh0TKh0TKh0TKh0TKh0TKh0TKRwSHRAF0MzJ+vv82tra/v7+oJqVGw0CIRMJV05GzsvIKh0TKBsQKh0TKh0TKh0TKh0TKh0TKh0TJhkPLyIZ9fTy8/P05OTk////UUU9IBIIHhEGYVhQ3tzbLyIZJxkPKh0TKh0TKh0TKh0TKh0TKh0THA8EdWxl/v7+4ODg/////////////////////////v7+/v7+////1dPSWU9IJBcMJhkPJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJxoQJhkPJBYMVUxF0tDP////EP/+/v6okHpELBhQOCRPNyNONiNMNSJLNCJJNCFIMiBGMSBFMR9FMR89KRc1IQ6ViH7//v3////////////////////////////////////u3M9pPyEeEwolGhEkGhAiGA8QBgCRjIj////////////t3tM9JBIKBwQRDAcPCwcAAAB/bWH+/v7////////////g4OD+/v5xaWIdDwQqHRMqHRMqHRMqHRMqHRMqHRMqHRMcDgOrpaH+/v7k5OT////////////////f39/+/v6knpkbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMnGhAmGQ/k4d/29/fi4uL+/v6gmpUbDQIhEwldU0yTjYgdDwUqHRMqHRMqHRMqHRMqHRMqHRMqHRMeEQZbUEj////s7Ozq6ur+/v6OhoAaDAEmGQ84LCO7t7Q2KiAnGQ8qHRMqHRMqHRMqHRMqHRMqHRMcDwR1bGX+/v7g4OD////////////////////////+/v7+/v7///+wrqs/NS0kFw0nGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGxEnGhAjFw1JPzjEwr////8R//7+/qeOeUMrF083I002I0w1Iko0IUkzIUcyIEYxH0UwH0QwH0IvHUEuHTwpGSwZCHFjVu7s6v////////////////////////////jt5oFVNyESBiMZESQZECIYDyAXDg4FAI+LiP///////////+3d0zsjEgcFAw8KBg0JBgAAAH5sYP7+/v///////////+Dg4P7+/nFpYh0PBCodEyodEyodEyodEyodEyodEyodExwOA6ulof7+/uTk5P///////////////9jY2P7+/pOMhhkLACodEyodEyodEyodEyodEyodEyodEyUXDTYqIPn49+/v8Obm5v7+/qCalRsNAiIVC1JIQFhORiIUCiodEyodEyodEyodEyodEyodEyodExkLAZqTjv7+/u3t7f////3+/tLOyx8RBykcEiUXDYZ+eT0xKCcZDyodEyodEyodEyodEyodEyodExwPBHVsZf7+/uDg4P////////////////////////7+/v7+/v7//7m3tXt2cnZwa3dxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXdxbXRuaoR/fNDPzv///23//v7+po54QSoWTTYiSzUiSjQhSTMgRzIgRjEfRTAfQy8eQi4eQC0cPiwbPCobOigZKRcHUEE019LP//////////////////////r3mm5RJhMEIBcQIxkQIRgPHxYOHhUNCwIAjoqH////////////7d7TOSIRBQMBDAkFCgcEAAAAfGpg/v7+////////////4ODg/v7+cWliHQ8EKh0TKh0TKh0TKh0TKh0TKh0TKh0THA4Dq6Wh/v7+5OTk/////////////v7+1dXV/v7+gnlzGgwBKh0TKh0TKh0TKh0TKh0TKh0TKh0TIBIIU0hA////7Ozs6Ojo/v7+oJqVGw0CKBsRMyYdLiEXKRwSKh0TKh0TKh0TKh0TKh0TKh0TKBsRIxYL3tvZ/f3+////////9PT0/v79Oi4kJBcNJRgOST41OCwjJxsQKh0TKh0TKh0TKh0TKh0TKh0THA8EdWxl/v7+4ODg/////////////////////////v7+////////+Pf38PDw8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fDw8fHx+/v7////8f/+/v6ljXc/KRVLNSJKNCFIMyFHMiBGMSBEMB9CLx5BLh0/LRw+Kxs8Khs6KBo4Jxk3JxkoGAo4KBu3r6r///////////////+yiW4wGAUdFg8jGRAhFw8fFg4dFQ0bEwwJAQCNiof////////////u3tM3IBECAQAJBwQIBQQAAAB7aV/+/v7////////////g4OD+/v5xaWIdDwQqHRMqHRMqHRMqHRMqHRMqHRMqHRMcDgOrpaH+/v7k5OT////////////9/f3V1dX+/v5rYVodDwUqHRMqHRMqHRMqHRMqHRMqHRMqHRMZCwGHf3r////p6enk5OT+/v6gmpUbDQIqHRMoGxEpGxEqHRMqHRMqHRMqHRMqHRMqHRMqHRMjFQtCNy7////w8vL////////t7e3+/v5uZF4cDgQqHRMoGxEqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMcDwR1bGX+/v7g4OD////////////////////////+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+//7+/qSLdz4nFEkzIUgyIEcxH0UwH0QvHkIuHkAtHT8sGz0rGzsqGjkpGjcnGDYlGDQkFzMkFykaDSYXCouAduLWzuDMvqB5XjkfCxwVDiIYDyAXDh4VDR0UDRsTDBkRCwYAAIyJhv///////////+7e0zYfDwAAAAcFAwUDAgAAAHloXv7+/v///////////+Dg4P7+/nFpYh0PBCodEyodEyodEyodEyodEyodEyodExwOA6ulof7+/uTk5P////////////f399XU1P///0s/NyEUCSodEyodEyodEyodEyodEyodEykcEh4RBtHNyv7+/v39/eHh4f7+/qCalRsNAiodEyodEyodEyodEyodEyodEyodEyodEyodEyodExsNAnpxa/7+/uvr6/////////T09P7+/rKsqBoMASodEykcEiodEyodEyodEyodEyodEyodEyodEyodExwPBHVsZf7+/uDg4P////////////////////////7+/v7+/v7+/v///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////v7+o4t2PCYTSDIgRjEfRTAfQy8eQi4eQCwcPiscPCobOykaOSgZNycZNSUYNCQXMiMWMCEVLiEVKRwRHhEFMh4POCANIxMGHhYPIhgPIBYOHhUNHBQMGhIMGBELFhAKAgAAioiF////////////7t7TNB4OAAAABAMCAgIBAAAAeWde/v7+////////////4ODg/v7+cWliHQ8EKh0TKh0TKh0TKh0TKh0TKh0TKh0THA4Dq6Wh/v7+5eXl////////+vr65+fn3Nzc9fPyMCMaJhkOKh0TKh0TKh0TKh0TKh0TKh0TIRMJRTox////9vb2////4ODg/v7+oJqVGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0SGw4Dv7q2/v7+9/f3////////////+Pn57uzqKh0TJxoQKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0THA8EdWxl/v7+4ODg///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////+/v6hinU6JRNGMR9EMB9DLx5BLh0/LB09Kxs7Khs6KRo4Jxk3Jhk1JRgzIxcxIhYvIRUtIBQsHxMqHRMoHBIiGA8fFg4hFw8hFw8fFg4eFQ0cEwwaEgsYEQsWDwoTDgkAAACKh4X////////////u3tMyHQ4AAAACAQEAAAAAAAB5Z17+/v7////////////g4OD+/v5xaWIdDwQqHRMqHRMqHRMqHRMqHRMqHRMqHRMcDgOrpaH+/v7h4eH8/Pz29vbk5OS/v7/z8/TGwb4dDwQpHBIqHRMqHRMqHRMqHRMqHRMqHRMYCQCln5v+/v719fX////g4OD+/v6gmpUbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMmGQ8wJBr39fT3+Pr////////////////w8PD///9SRz8gEggqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMcDwR1bGX+/v7g4OD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/qGJdTgkEkQwH0IvHkAuHT8sHT0rGzsqGjkoGjcnGTYmGTQlFzIkFzAiFi8hFS0gFCseEykdEyccEiYaESQZECIYECAXDx8WDh0UDRsTDBkSCxcQChUPChMOCREMCAAAAI2Liv////////////Pj2TIdDQAAAAAAAAAAAAAAAHlnXv7+/v///////////+Dg4P7+/nFpYh0PBCodEyodEyodEyodEyodEyodEyodExwOA6ulofv7/MfHx9fX183NzcLCwrm5u////2phWh0PBCodEyodEyodEyodEyodEyseFB4QBkU5Mf////j4+P///////+Dg4P7+/qCalRsNAiodEyodEyodEyodEyodEyodEyodEyodEyodEx4QBl1SS////+3u7v///////////////+3t7f7+/pCJgxkLASodEyodEyodEyodEyodEyodEyodEyodEyodExwPBHVsZf7+/uDg4P///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////v7+oIh0NiIRQi8eQC0dPiwcPCsbOykbOSgZNycZNSYYMyQXMiMWMCIWLiAVLB8UKx4TKRwSJxwSJRoRIxkQIRcPIBcPHhUOHBQNGhMMGBELFhAKFA8JEg0IEAwIDgoHAQAAVlRS////////////17qnGgsDAAAAAAAAAAAAAAAAeWdd/v7+////////////4ODg/v7+cWliHQ8EKh0TKh0TKh0TKh0TKh0TKh0TKh0THA4DrKai9fX2oaGhpKSknZ2durq6/v7+u7azHxEHKRwSKh0TKh0TKh0TKh0TKx4UJBcMIBIIz8vI/v7++Pj4////////4ODg/v7+oJqVGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGQsAnJaQ/v7+7u7u/////////////////////v7+1NDNHxIHKRwSKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0THA8EdWxl/v7+4ODg///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////+/v6eh3Q0IBBALRw+Kxs8Khs6KRo5Jxk3Jhg0JRgzJBcxIhYwIRUuIBQsHhMqHRIoHBInGxElGhAjGA8hFw4fFg4eFQ0bEwwaEgsYEQoWDwoUDgkSDQgQCwcOCgYMCAUJBgMBAABcWFSwpJylkII5IxUAAAAAAAAAAAAAAAAAAAB5Z17+/v7////////////g4OD+/v5xaWIdDwQqHRMqHRMqHRMqHRMqHRMqHRMqHRMbDQKqpaD+/v7i4+Tx8vP7/P3///+0r6wrHhQkFwwqHRMqHRMqHRMqHRMrHhQjFgsdDwSrpqL+/v75+fn////////////g4OD+/v6gmpUbDQIqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMoGxEkFgzg3dv8/f3////////////////////////z8/T//v47LyYkFgwqHRMqHRMqHRMqHRMqHRMqHRMqHRMqHRMcDwR1bGX+/v7g4OD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/p2GczEeDz0rHDsqGzkoGjgnGTYmGTQlFzIjFjAiFS8hFC0gFCsfFCkdEigcEiYbESQZECIYDyAXDx4VDR0UDRsTDBkSCxcQChUPCRMOCBEMBw8LBw0JBgsIBQkGBAcFBAQDAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHlnXv7+/v///////////+Dg4P7+/nFpYh0PBCodEyodEyodEyodEyodEyodEyodEyETCHhwab+8uMvHxLm0r52WkVpQSCETCSQWDCseFCodEyodEyodEykcERsNAigbEbGsqP////r6+////////////////+Dg4P7+/qCalRsNAiodEyodEyodEyodEyodEyodEyodEyodEyIVCkQ5MP////Dx8f///////////////////////+zs7P7+/nBnYBwOAyodEyodEyodEyodEyodEyodEyodEyodExwPBHVsZf7+/t/f3////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////v7+nIVyLhwOOykbOSgaNycZNSUYMyQXMSMWMCEVLiAULB8UKx4TKR0TJxsRJRoRIxkQIRcPIBYOHhUOHBQNGhIMGRELFhAKFQ4JEg0IEAwIDgoHDAkGCgcFCAYEBgUDBAMCAwIBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeWde/v7+////////////4ODg/v7+cWliHQ8EKh0TKh0TKh0TKh0TKh0TKh0TKh0TKx4UJRgNIRQJIRMJHQ8EGQsAHxIHKRwRKh0TKh0TKBsRIxYLGw0CHxEGXlRN39za/v7++vr6////////////////////4ODg/v7+oJqVGw0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0TGgwCe3Ns/v7+6urq////////////////////////9PT0/v7+tK+qGg0CKh0TKh0TKh0TKh0TKh0TKh0TKh0TKh0THA8EdWxl/v7+39/f///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////+/v6ahHEsGw05KBo3Jhk1JRgzJBcxIxYvIRUtIBQsHxMqHhMoHRImGxIlGhAjGRAhFw8fFg4eFQ0cFAwaEgwYEQsWEAoUDgkSDQgQCwcOCgYMCAUKBwUIBgQGBAMEAwICAgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2ZFv+/v7////////////l5ub+/v5oYFgPAAAdDwUdDwUdDwUdDwUdDwUdDwUdDwUdDwUcDgQcDgMcDgMcDwQdDwQbDQIaDAIZCwEcDgQjFgs+Mil0a2TOysf////+/v79/f3////////////////////////l5eX+/v6alI4NAAAdDwUdDwUdDwUdDwUdDwUdDwUdDwUcDgQRAgDBvLj+/v74+Pj////////////////////////////5+fvv7ewiFAoZCwAdDwUdDwUdDwUdDwUdDwUdDwUdDwUOAABsY1z+/v7k5OX///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/pmCcCkZDDYmGTQlGDIkFzEiFi8hFS0gFCseEykdEigcEiYbESQaECIYECEXDx8WDh0VDRsTDBkSCxcQCxUPChMOCREMCA8LBw0KBgsIBQkHBAcFAwUEAwMCAgEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIRwZf7+/v////////////Lz8////6CZlWRaU21kXW1kXW1kXW1kXW1kXW1kXW1kXW1kXW1kXW1kXW1kXW1jXHBnYH92cIF4c5aPibawrODd2v/+/f7+/v7+/v7+/v////////////////////////////////Pz8/7+/sO+umNZUW1kXW1kXW1kXW1kXW1kXW1kXW1kXWtiW3BnYP////r7+/////////////////////////////////X19f///4d/eWddVm1kXW1kXW1kXW1kXW1kXW1kXW1kXWNaUqKcl/////Ly8v///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////v7+l4FwJxgKNCQXMiMWMCIVLiEVLR8UKx4TKR0SJxwSJhoRJBkQIhgPIBYOHhUNHRQMGxMMGRELFxAKFQ8JEw0IEQwHDwoGDQkGCwgFCQYEBwUDBQMCAwIBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFw8K3sq9/v7+/////////////Pz8/Pz8/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+////////////////////////////////////////////+/v7/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7++/v7////////////////////////////////+/v7/Pz8/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7++/v7/Pz8///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////+/v6WgG8kFgkxIxYvIRUuIBUsHxQqHhMoHBImGxIlGhAjGBAhGA8fFg4eFQ0cFAwaEgwYEQsWDwoUDgkSDQgQCwcOCgYMCAUKBwUIBgQGBAMEAwICAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQCgcvJB5oVEnZwrP////+/v7////////////////////+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v79/f3+/v7+/v7////////////////////////////////////////////////////////////////9/f3+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v79/v79/f3////////////////////////////////////////+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/pR/biIUCC8hFS0gFCwfFCoeEygcEiYbESQZESMYDyEXDx8WDh0VDRwTDBoSCxgQCxYPChQOCRIMCBALBw4JBgwIBQoGBAgFBAYEAwMCAgEBAAAAAAAAAAAAAAAAAAAAAAAAABELBy4kHmBORIx4bLqileTOwv/t4f//+/////////7+/v///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////v7+k35tIBMHLSAUKx4UKR0TJxwSJRsRJBkQIhgPIBcOHhYOHRUNGxMNGRILFxAKFQ8KEw0JEQwIDwsHDQkGCwgFCQYEBQMBAAAAAAAAAAAAAAAAAAAAEwwJNSojYE9FkXxwwamb5s/D/uzi///7/////////////////////////////vv6RfGwdEQUqHhMoHBInGxElGhAjGRAhFw8fFg4eFQ0cFAwaEwwYEQsWEAoUDgkSDQgQCwcLCAQFAwAAAAAAAAAAAAAAAAAWDwo4LCVjUUeXgnXCq53p0sX/8OX///v////////////////////////////////////////////////+/vpB7bBoPBSgcEiYbESQaECMYDyEXDx8WDR0UDRwTDBoSDBcQCxMNCAwHAwQAAAAAAAAAAAgDABwTDUAyKW1ZTpmDdsKsnuzWyf/w5v///P////////////////////////////////////////////////////////////////////7+/vv7+jXlqGA0EJhsRJBkQIhgPIBcOHhUOGhIKEwwGCwUABQEABgAAEQkDJxwUSzswcV1Root9ybSm7dfK//Lo///+/////////////////////////////////////////////////////////////////////////////////////////vv6MdmYOBQAgFQ0bEgkRCgMNBgAMBQAZDwcwIhlRPzN4ZVapkoLNt6nx3M//9uz///7////////////////////////////////////////////////////////////////////////////////////////////////////////////+/vtTBsTEhFCQXDTUmGl1JPIBtXquUhNG8rvTf0v/27P////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/vv7+////9ODT5tDC9+ba//72/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////v
[bool]$StartupWindow = $true 
[bool]$PromptAuth = $false 
[array]$ADCs = @()
#Optionally persist settings in the registry
[string]$RegistryPath = "hkcu:\Software\Citrix\ADM"
[array]$RegistryValues = @("ADMHost", "UseSSL", "BrowsePath", "ADMUser", "BGColor", "BGColor2", "FGColor", "HeadingColor")
#Definte what's shown for each Nitro object in the main datagridview
$NitroColumns = @{  
    aaasession	=	@("username", "publicip", "ipaddress", "port")
    aaauser	=	@("username", "loggedin", "intranetip")
    aaagroup	=	@("groupname", "loggedin", "intranetip")
    aaa_server	= @("secondary_server_name", "fallback_local_authentication", "enable_secondary_server", "primary_server_name", "id", "secondary_server_type", "primary_server_type")
    application = @("name","app_category","curclntconnections","ns_ip_address", "vsvr_app_components", "id","configpack_id")
    authenticationldappolicy = @("name", "rule", "reqaction", "activepolicy")
    authenticationldapaction = @("name", "serverip", "serverport", "ldapbinddn", "ldapbinddnpassword", "ldaploginname", "ldapbase", "groupattrname", "subattribbutename", "sectype", "svrtype")
    authenticationradiuspolicy = @("name", "rule", "reqaction", "activepolicy")
    authenticationradiusaction = @("name", "serverip", "authtimeout", "radkey", "radnasip", "ipaddress", "passencoding") 
    backup_file	=	@("file_name", "file_size", "file_last_modified")
    config_job	= @("name", "devices", "on_error", "execute_sequentially", "execute_batch", "credentials_required", "template_info", "variables")
    configuration_template = @("name", "is_inbuilt", "commands", "variables") 
    configpacks = @("id","name", "namespace", "targets", "last_modified_datetime")
    config_template_temp= @("template_file")
    device_profile = @("name", "http_port", "https_port", "id", "is_default", "ssh_port", "svm_ns_comm", "tenant_id", "type", "use_global_setting_for_communication_with_ns", "username")
    device_group = @("name", "static_device_list", "device_family", "id") 
    external_server = @("priority", "external_server_name", "external_server_type")
    lbvserver	= @("name", "curstate", "ipv46", "port", "lbmethod", "health", "persistencetype", "backupvserver")
    lbmonitor	= @("monitorname", "state", "type", "interval", "units3", "resptimeout", "retries")
    mps_datacenter = @("name", "city", "country", "region", "zipcode", "latitude", "longitude") 
    mps_network_config = @("ip_address", "netmask", "gateway", "dns")
    mpsuser	= @("name", "is_default", "session_timeout", "external_authentication", "enable_session_timeout")
    mpsgroup	=	@("name", "role", "roles")
    mps_health	=	"memory_total", "disk_total_capacity", "disk_usage", "disk_total", "memory_usage",	"disk_free", "page_size", "node_id", "memory_free", "cpu_usage", "id", "disk_used"
    ns	=	@("hostname", "profile_name", "display_name", "ha_master_state", "instance_state",	"upsince",	"version",	"is_ha_configured",	"ipv4_address",	"encoded_serialnumber", "mgmt_ip_address","user_profile_name","system_hardwareversion","license")
    ns_configtemplate =	@("name","description","devicelistCombined","commands","variables")
    ns_device_profile = @("name", "username", "http_port", "https_port", "id", "is_default", "ssh_port", "svm_ns_comm", "tenant_id", "type", "use_global_setting_for_communication_with_ns")
    ns_image	=	@("file_name", "file_size", "file_last_modified")
    ns_ssl_certkey = @("certkeypair_name", "valid_from", "valid_to", "days_to_expiry", "status", "issuer", "no_domain_check", "ns_ip_address", "public_key_size", "subject", "version", "public_key_algorithm","days_to_expire","poll_time","display_name","no_of_bound_entities","ssl_certificate","file_name","partition_name","cert_format")
    nsip	= @("ipaddress", "type", "netmask", "vserver", "icmp", "telnet", "ssh", "gui", "mgmtaccess", "restrictaccess")
    nssdx	=	@("hostname", "profile_name", "display_name", "ha_master_state", "instance_state",	"upsince",	"version",	"is_ha_configured",	"ipv4_address",	"encoded_serialnumber","mgmt_ip_address","user_profile_name","system_hardwareversion","license")        
    rba_role	=	@("name", "description", "groups", "policies")
    rba_policy	=	@("name", "description", "tenant_name", "roles")
    repositories = @("repository_name", "repository_branch", "repository_url", "status", "type", "username")
    responderpolicy	=	@("name", "rule", "action")
    responderaction	=	@("name", "target", "respondwith")
    response_header_settings = @("URLs")
    rewritepolicy	=	@("name",	"rule", "action")
    rewriteaction	= @("name", "type", "target", "stringbuilderexpr", "search")
    route	= @("network", "netmask", "gateway", "routetype", "dynamic", "static")
    server_nodes	= @("name", "is_primary", "priority", "deployment_status", "state", "username", "is_pooled_license", "is_star_node", "build_name", "public_key", "device_count")
    servicegroup	= @("servicegroupname", "state", "servicetype", "port")
    stylebooks = @("name", "id", "display_name", "description", "repository_name")
    syslog_messages	= @("system_time", "source", "event_type", "message", "severity", "module")
    system_info	= @("nsversion", "hostname", "nsbrand", "nsmodel", "licenses", "snipconfigured", "ha_nodes")
    system_settings = @("svm_ns_comm", "session_timeout", "enable_nsrecover_login", "enable_session_timeout", "enable_apiproxy_credentials", "ns_br_interface_2", "basicauth", "secure_access_only")
    systemcmdpolicy	=	@("policyname", "action", "cmdspec")
    systemuser	=	@("username",	"password", "externalauth", "logging")
    systemgroup	=	@("groupname",	"timeout")
    task_device_log	=	@("starttime","device_user","ip_address","status","task_id")
    task_command_log	=	@("starttime",	"command", "task_device_id", "protocol",	"statusmessage", "status")
    task_log	=	@("starttime",	"name", "executed_by", "status", "id")
    vpnvserver  = @("name", "ipv46", "port", "servicetype", "curstate","authentication", "icaonly", "dtls", "curaaausers", "appflowlog", "httpprofilename")
}
$LogView = @("Time","Line","Message")
# TreeView Structure: Each of the following hashtables will be used to create the left-hand TreeView 
$SystemNodes = @{
    Basic = @("Network,mps_network_config,ip_address","System Settings,system_settings,id", "Backups,backup_file,file_name")
    Deployment	= @("ADM Health,mps_health,id", "Server Nodes,server_nodes,name")
    "Users & Groups" = @("Users,mpsuser,name", "Groups,mpsgroup,name", "Roles,rba_role,name", "Policies,rba_policy,name")
    Authentication	= @("External Servers,external_server,external_server_name", "Authentication Settings,aaa_server,primary_server_name")
}
# Treeview node for Applications
$AppNodes = @{
    Applications = @()
    Stylebooks = @()    
}
# Define ADC-Specific tree nodes and child-nodes 
$ADCNodes = @{
    "Change Log" = @("ADM Task Log,task_device_log,starttime")
    Diagnostics = @("System,system_info,nsversion")
    AppExpert = @("Responder Policies,responderpolicy,name", "Responder Actions,responderaction,name","Rewrite Policies,rewritepolicy,name","Rewrite Actions,rewriteaction,name")
    "Traffic Management" = @("Load Balancers,lbvserver,name", "Service Groups,servicegroup,servicegroupname", "Monitors,lbmonitor,monitorname")
    "Network Config" = @("IP Addresses,nsip,ipaddress", "Routes,route,network")
    "Users & Groups" = @("Users,systemuser,username", "Groups,systemgroup,groupname", "Command Policies,systemcmdpolicy,policyname")
    "Authentication" = @("LDAP policies,authenticationldappolicy,name", "LDAP servers,authenticationldapaction,name", "Radius policies,authenticationradiuspolicy,name", "Radius servers, authenticationradiusaction,name")
    "VPN Services" = @("Virtual Servers,vpnvserver,name", "AAA Sessions,aaasession,username", "AAA Users,aaauser,username", "AAA Groups,aaagroup,groupname")
}
# Define ADM-Specific tree nodes
$TreeViewNodes = @{
    Applications = @("Applications,application,name","Config Packs,configpacks,id", "Repositories,repositories,repository_name","Stylebooks,stylebooks,name")
    Configurations = @("Templates,configuration_template,name", "Jobs,config_job,name", "Master Configs,ns_configtemplate,name", "Firmware,ns_image,file_name", "Uploads,config_template_temp template_file")
    Inventory	= @("All,ns,hostname", "Sites,mps_datacenter,name", "Groups,device_group,name", "Profiles,ns_device_profile,name", "SSL CertKeys,ns_ssl_certkey,certkeypair_name")
    Settings	= $SystemNodes
}
Add-Type @"
 using System;
 using System.Runtime.InteropServices; 
 public static class NativeMethods {
                 [DllImport("shell32.dll", SetLastError=true)]
                 public static extern void SetCurrentProcessExplicitAppUserModelID( [MarshalAs( UnmanagedType.LPWStr )] string AppID );
 }
"@
[NativeMethods]::SetCurrentProcessExplicitAppUserModelID("ADMPower")
$showWindowAsync = Add-Type -memberDefinition @"
[DllImport("user32.dll")]
public static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);
"@ -name "Win32ShowWindowAsync" -namespace Win32Functions -passThru
[void]$showWindowAsync::ShowWindowAsync((Get-Process -id $pid).MainWindowHandle, 2)
#endregion
#region Functions
function Add-ContextMenuItems ($TreeViewNode, [System.Windows.Forms.ContextMenu]$CTMenu, [array]$MenuItems)
    {
        #This function handles all of the right-click actions for nodes in the treeview
        foreach ($Item in $MenuItems)
        {
            if ($TreeViewNode.Tag.Length -gt 0)
            {
                Set-Variable -Name ResourceType -Value $TreeViewNode.Tag.Split(',')[0] -Scope Global 
                Set-Variable -Name ResourceName -Value $TreeViewNode.Tag.Split(',')[1] -Scope Global
            }
            $MenuItem = New-Object -TypeName System.Windows.Forms.MenuItem
            $MenuItem.Text = $Item
            $TopNode = Get-TopNode $TreeViewNode
            switch -wildcard ($Item)
            {
                "Add Device Profile" {
                $MenuItem.add_Click({ 
                    param ($sender,
                        $eargs)
                    Show-Add-Profile
                    })
                }
                "Batch Delete" {
                    $MenuItem.add_Click({ 
                        param ($sender,
                            $eargs)
                        if ($global:ClickedNode.Tag.Length -gt 0)
                        {
                            Set-Variable -Name DeleteObject -Value $global:ClickedNode.Tag.Split(',')[0] -Scope Global
                        }
                        elseif ($global:ClickedNode.Text -eq "Inventory")
                        {
                            Set-Variable -Name DeleteObject -Value 'managed_device'
                        }
                        elseif ($global:ClickedNode.Text -eq "Sites")
                        {
                            Set-Variable -Name DeleteObject -Value 'mps_datacenter'
                        }
                        Show-Batch-Delete
                    })
            }
            "Change Device Profile" {
                $MenuItem.add_Click({
                        param ($sender,
                            $eargs)
                        Set-Variable -Name SelectObject -Value 'ns_device_profile' -Scope Global 
                        Set-Variable -Name TargetObject -Value $global:ClickedNode.Text -Scope Global 
                        Show-Select-Object
                        $Filter = @{ hostname = $global:ClickedNode.Text }
                        $ADC = (Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType ns -Filters $Filter).ns 
                        if ($global:SelectObject -eq "ns_device_profile")
                        {
                            $Device = (Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType managed_device -ResourceName $ADC.id).managed_device 
                            $PutDevice = @{
                                id = $ADC.id
                                ip_address = $ADC.ip_address 
                                profile_name = $global:NewItem.name 
                                datacenter_id = $ADC.datacenter_id 
                                sync_operation = 'false'
                            }
                            $Response = Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod PUT -ResourceType managed_device -Payload $PutDevice 
                            if ($Response.message -eq "Done")
                            {
                            try
                            {
                                $PopUp = New-Object -ComObject wscript.shell
                                $Answer = $PopUp.popup("Updated $($global:SelectObject) to $($global:NewItem.name) for $($global:ClickedNode.Text)",0,"Changed $($global:SelectObject) on $($global:ClickedNode.Text)")
                                Update-Node $global:ClickedNode.Parent
                            }
                            catch
                            {
                                Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to create COM object: $($_.Exception)"
                            }
                        }
                    }
                })
            }            
    "Create backup" {
        $MenuItem.add_Click({ 
                param ($sender,
                    $eargs)
                Create-Backup
            })
    }
    "Download Backup" {
        $MenuItem.add_Click({
                param ($sender,
                    $eargs)
                $OutFile = New-Object -TypeName System.Windows.Forms.SaveFileDialog 
                $OutFile.FileName = ($global:ClickedNode.Text)
                $OutFile.Filter = ("TGZ files *.tgz|*.tgz")
                $result = $OutFile.ShowDialog() 
                if ($result -eq 'OK')
                {
                    $Filter = @{ file_name = $global:ClickedNode.Text }
                    $uri = "$($global:ADMSession.Endpoint)/nitro/v1/download/backup_file/$($global:ClickedNode.Text)"
                    Invoke-RestMethod -websession $global:ADMSession.WebSession -Method Get -Uri $uri -OutFile $OutFile.FileName
                    Invoke-Item $OutFile.InitialDirectory
                }
            })
    }
    "Delete*" {
        $MenuItem.add_Click({ 
            param ($sender,
                $eargs)
            try
            {
                $PopUp = New-Object -ComObject wscript.shell
                $Answer = $PopUp.popup("Delete $($global:ClickedNode.Text) from $($global:ADMHost)?", 0, "Delete", 4) 
                if ($Answer -eq 6)
                {
                    $global:ResourceType = $global:ClickedNode.Tag.Split[0] 
                    if ($global:ResourceType -in @('ns_image', 'config template temp'))
                    {
                        $global:ResourceName = $global:ClickedNode.Text
                    }
                    else
                    {
                        $global:ResourceName = $global:ClickedNode.Tag.Split(',')[2]
                    }
                    $Response = Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod Delete -ResourceType $global:ResourceType -ResourceName $global:ResourceName 
                    if ($Response.message -eq "Done")
                    {
                        $PopUp = New-Object -ComObject wscript.shell
                        $Answer = $PopUp.popup("Deleted $($global:ClickedNode.Text) from $($global:ADMHost)", 0, "Deleted $($global:ClickedNode. Text)")
                        Update-Node $global:ClickedNode.Parent
                    }
                    else
                    {
                        $PopUp = New-Object -ComObject wscript.shell
                        $Answer = $PopUp.popup("Unable to delete $($profileName.Text) because $($Response.message)", 0, "Unable to add device profile")
                    }
                }
            }
            catch
            {
                Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to create COM object: $($_.Exception)"
            }
        })
    }
    "Download" {
        $MenuItem.add_Click({ 
            param ($sender,
                $eargs)
            $TemplateToUpload = Get-FileName "JSON (*.json)| *.json" 
            try {
                $jsonHash = Convert-JsonFileToHash -File $TemplateToUpload
                $Upload = Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod POST -APIType upload -ResourceType $global:ResourceType -Payload $jsonHash
            }
            catch
            {
                Write-Log -Type "Info" -Line (Get-LineNumber) -Message "Unable to upload $($TemplateToUpload) to $($global:ADMHost): $($_.Exception)"
            }
            Update-Node $global:ClickedNode                
        })
    }
    "Export to .json" {
        $MenuItem.add_Click({ 
            param ($sender,
                $eargs)
            $global:ResourceType = $global:ClickedNode.Tag.Split(', ')[0] 
            if ($global:ResourceType -eq 'ns')
            {
                $ExportObjects = Get-Content (Get-FileName "JSON (*.json)| *.json") | ConvertFrom-Json | Convert-ObjecttoHash 
                $OutPath = Get-Path -Description "Specify path to export .json files (e.g. master_configs\tier2\checkouts):"
                $Filter = @{ 'hostname' = $global:ClickedNode.Text }                        
                try
                {
                    $ADC = (Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType ns -Filters $Filter).ns 
                    foreach ($ObjectName in $ExportObjects.Keys)
                    {                           
                        $NitroArg = $null 
                        switch ($ObjectName)
                        {
                            "icaglobal_icapolicy_binding" { $NitroArg = @{ type = "ICA_REQ_OVERRIDE" } }
                        }
                        try
                        {
                            if ($NitroArg -ne $null)
                            {
                                $NitroObject = (Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType $ObjectName -ADCHost $ADC.ip_address -Arguments $NitroArg).$ObjectName | ConvertTo-Json
                            }
                            else
                            {
                                $NitroObject = (Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType $ObjectName -ADCHost $ADC.ip_address).$ObjectName | ConvertTo-Json
                            }
                            $LabelKey = Export-Nitro $ObjectName $NitroObject $OutPath $ExportObjects.$ObjectName
                            Export-Bindings -ObjectName $ObjectName -NitroObject $NitroObject -PathName $OutPath -LabelKey $LabelKey
                        }
                        catch
                        {
                            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to export $ObjectName to $OutPath $($_.Exception)"
                        }
                    }
                    Invoke-Item $OutPath
                }
                catch
                {
                    Write-Output "Unable to get ADCs from $ADMHost"                        
                }
            }
            else
            {
                $OutFile = New-Object -TypeName System.Windows.Forms.SaveFileDialog $OutFile.FileName = ($global:ClickedNode.Text + ".json")
                $OutFile.Filter = ("Json files *.json|*.json")
                $result = $OutFile.ShowDialog() 
                if ($result -eq 'OK')
                {
                    $Filter = @{ name = $global:ClickedNode.Text }
                    $NitroObject = (Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod Get -ResourceType $global:ResourceType -Filters $Filter).$global:ResourceType | ConvertTo-Json -Depth 5 [System.IO.File]::WriteAllLines($outFile.FileName, $NitroObject)
                    Invoke-Item -Path $OutFile.FileName
                }
            }
        })
    }
    "Export All" {
        $MenuItem.add_Click({ 
            param ($sender,
                $eargs)
            $global:ResourceType = $global:ClickedNode.Tag.Split(',')[0]
            $OutFile = New-Object -TypeName System.Windows.Forms.SaveFileDialog $OutFile.FileName = ($global:ClickedNode.Text + ".json")
            $OutFile.Filter = ("JSON files *.json|*.json")
            $result = $OutFile.ShowDialog() 
            if ($result -eq 'OK')
            {
                $NitroObject = @{ }
                foreach ($Node in $global:ClickedNode.Nodes)
                {
                $Filter = @{ name = $Node.Text }
                $NitroObject.Add(((Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod Get -ResourceType $global:ResourceType -Filters $Filter).$global:ResourceType | ConvertTo-Json -Depth 5))
                }
                [System.IO.File]::WriteAllLines($outFile.FileName, $NitroObject)
                Invoke-Item -Path $OutFile.FileName
            }
        })
    }
    "Export to .conf" {
        $MenuItem.add_Click({ 
            param ($sender,
                $eargs)
            $OutFile = New-Object -TypeName System.Windows.Forms.SaveFileDialog
            $OutFile.FileName = ($global:ClickedNode.Text + ".conf")
            $OutFile.Filter = ("ADC Conf files *.conf|*.conf")
            $result = $OutFile.ShowDialog()
            if ($global:ClickedNode.Parent.Text -notmatch "Master")
            {
                switch ($global:ClickedNode.Parent.Text)
                {
                    "Templates"
                    {
                        $global:ResourceType = "configuration_template"
                    }                    
                    "Jobs"
                    {
                        $global:ResourceType = "config_job"
                    }
                }
                if ($result -eq 'OK')
                {
                    $Filter = @{ name = $global:ClickedNode.Text }
                    $NitroObject = (Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod Get -ResourceType $global:ResourceType -Filters $Filter).($global:ResourceType) 
                    if ($global:ResourceType -eq "config_job")
                    {
                        $NitroObject = $NitroObject.template_info
                    }
                    $cmds = @() 
                    foreach ($cmd in $NitroObject.commands)
                    {
                        $cmds += $cmd.command
                    }
                    [System.IO.File]::WriteAllLines($OutFile.FileName, $cmds)          
                    Invoke-Item -Path $OutFile.FileName
                }       
            }
            else
            {
                $Filter = @{ name = $global:ClickedNode.Text}
                $ConfigTemplate = (Invoke-ADMNitro -ADMSession $ADMSession -OperationMethod GET -ResourceType ns_configtemplate -Filters $Filter).ns_configtemplate
                try
                {
                    $DeviceArray = @()
                    foreach ($Device in $ConfigTemplate.devicelistCombined.Split(','))
                    {
                        $DeviceArray = @($Device)
                        $TempName = $ConfigTemplate.name + ("-"	+ "{0:HH:mm:ss}" -f (Get-Date))
                        $NSConfigTemplate = @{
                            name	=	$TempName
                            variables	=	$ConfigTemplate.variables
                            variable_vals = $ConfigTemplate.variable_vals 
                            devices	=	$DeviceArray
                            template_file = $ConfigTemplate.template_file 
                            commands	=	$ConfigTemplate.commands
                        }
                        $Filter = @{ ip_address = $Device }
                        $ADC = (Invoke-ADMNitro -ADMSession $ADMSession -OperationMethod GET -ResourceType ns -Filters $Filter).ns 
                        $Upload = Invoke-ADMNitro -ADMSession $ADMSession -OperationMethod POST -ResourceType ns_configtemplate -Payload $NSConfigTemplate -Action preview
                        $OutFile = ($OutFile.FileName.Split('.')[0] + "-" + $ADC.hostname + "-"	+ $OutFile.FileName.Split('.')[1])
                        [System.IO.File]::WriteAllLines($OutFile, $Upload.ns_configtemplate.preview_commands)
                        Invoke-Item -Path $OutFile
                        Invoke-ADMNitro -ADMSession $ADMSession -OperationMethod DELETE -ResourceType ns_configtemplate -ResourceName $Upload.ns_configtemplate.id
                    }
                }
                catch
                {                        
                    Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to export $($OutFile.FileName): $($_.Exception)"
                }
                    
            }
        })
    }
    "Import *" {
        $MenuItem.add_Click({
            param ($sender,
                $eargs)
            if ($global:ClickedNode.Text -eq "Master Configs")
            {
                $ConfFile = Get-FileName "Conf (*.conf)| *.conf" 
                if ($ConfFile.Length -gt 0)
                {
                    try
                    {
                        $MasterConf = Get-Content $ConfFile
                    }
                    catch
                    {
                        Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to open $($ConfFile): $($_.Exception)"
                    }
                }
                $AnswerFile = Get-FileName "XML (*.xml)| *.xml" 
                if ($AnswerFile.Length -gt 0)
                {
                    try
                    {
                        [xml]$Answers = Get-Content $AnswerFile
                    }
                    catch
                    {
                        Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to open $($AnswerFile): $($_.Exception)"
                    }
                }
                if ($ConfFile.count -gt 0 -and $MasterConf.count -gt 0)
                {
                    $ParentName = $ConfFile.Split('\')
                    $ParentName = $ParentName[($ParentName.Count - 2)]
                    $GroupFilter = @{ name = $ParentName }
                    $TargetGroup = (Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType device_group -Filters $GroupFilter).device_group 
                    $DeviceArray = @()
                    foreach ($Device in $Answers.properties.device)
                    {
                        $DeviceArray += $Device.name
                    }
                    if ($TargetGroup.length -le 0)
                    {
                        $PutGroup = @{
                            category	=	"default"
                            device_family	=	"ns"
                            disable_upgrade	=	"false"
                            duration	=	"60"
                            name	=	$ParentName
                            static_device_list	=	""
                            static_device_list_arr = $DeviceArray
                        }
                        $Upload = Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod POST -ResourceType device_group -Payload $PutGroup
                        if ($Upload.severity -eq "Error")
                        {
                            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to import $($Device.hostname): $($Upload.message)"
                        }
                    }                    
                    $AnswerFileName = $ParentName + "-" + (Get-Date -f MMddyyyy_HHmmss) + ".csv"
                    $Commands = @(); $MasterCommands = @(); $Variables = @(); $VariableVals = @(); $DeviceVals = @()
                    $GlobalVals = @(); $GlobalVariables = @(); $DeviceVariables = @()                    
                    foreach ($Param in $Answers.properties.device[0].param)
                    {
                        $Variable = @{
                            name	= $Param.name
                            display_name = $Param.name 
                            type	= "text_field"
                        }
                        $Variables += $Variable
                    }
                    foreach ($Global in $Answers.properties.global.param)
                    {
                        $Variable = @{
                            name	=	$Global.name
                            display_name = $Global.name 
                            type	=	"text_field"
                        }
                        $GlobalValues = @()
                        foreach ($Device in $DeviceArray)
                        {
                            $GlobalValue = @{
                                value = $Global.value 
                                device = $Device
                            }
                            $GlobalValues += $GlobalValue
                        }
                        $GlobalVariableVal = @{ 
                            name = $Global.name 
                            display_name = $Global.name 
                            device_values = $GlobalValues
                        }
                        $Variables += $Variable 
                        $VariableVals += $GlobalVariableVal
                    }    
                        foreach ($Variable in $Variables)
                        {
                            if ($Variable.name -ne 'extra_conf')
                            {
                                $DeviceValues = @()
                                foreach ($Device in $DeviceArray)
                                {
                                    $DeviceValue = @{
                                        value	= $Device.($Variable.name)
                                        device	= $Device
                                    }
                                    $DeviceValues += $DeviceValue
                                }
                                $DeviceVariableVal = @{
                                    name = $Variable.name 
                                    display_name = $Variable.name 
                                    device_values = $DeviceValues
                                }
                                $VariableVals += $DeviceVariableVal
                            }
                        }
                        foreach ($Line in $MasterConf)
                        {
                            $Command = @{}
                            if ($Line.Length -gt 1 -and $Line.Substring(0, 1) -ne '#')
                            {
                                $Command.Add('command', $Line)
                                $Commands += $Command
                            }
                        }
                        $NSConfigTemplate = @{
                            name	=	$ParentName
                            variables	=	$Variables
                            variable_vals =	$VariableVals
                            devices	=	$DeviceArray
                            template_file	=	$AnswerFileName
                            commands	=	$Commands
                            isDefaultSchedule ="true" 
                            mail_export	=	"false"
                            slack_export	= "false"
                            description	=	($ParentName + " Config Template")
                        }
                        $CSVFile = XMLtoCSV -XmlFile $AnswerFile -OutCsv $AnswerFileName 
                        try 
                        {
                            $Upload = Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod POST -APIType upload -ResourceType ns_configtemplate -InFile $CSVFile
                            $Upload = Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod POST -ResourceType ns_configtemplate -Payload $NSConfigTemplate
                            if ($Upload.severity -eq "Error")
                            {
                                Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to import $($ParentName): $($Upload.message)"
                            }
                        }
                        catch
                        {
                            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to upload $($ParentName) to $($global:ADMHost): $($_.Exception)"
                        }
                    }
                }                        
                if ($global:ClickedNode.Text -in @("Templates"., "Jobs"))
                    {
                        $ImportFile = Get-FileName "JSON (*.json)| *.json" 
                        try {
                            $jsonHash = Convert-JsonFileToHash -File $ImportFile
                            Write-Log -Type "Info" -Line (Get-LineNumber) -Message "Importing $($ImportFile) to $($global:ADMHost)"
                            $Upload = Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod POST -ResourceType $global:ResourceType -Payload $jsonHash
                        }
                        catch
                        {
                            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to upload $($ImportFile) to $($global:ADMHost): $($_.Exception)"
                        }
                    }
                    #Import sites from .csv answer file to specify country, latitude, longitude, region, name, zipcode, & city 
                    elseif ($global:ClickedNode.Text -eq "Sites")
                    {
                        $ImportFile = Get-FileName "CSV (*.csv)| *.csv"
                        $ImportSites = Import-Csv $ImportFile                                
                        $getVars.ResourceType = 'mps_datacenter'
                        $ADMSites = Start-BackgroundJob -Job ${Function:Invoke-ADMNitro} -jobvariables $getVars 
                        function Add-Site ($Site)
                        {
                            $Payload = @{
                                country = $Site.Country 
                                latitude = $Site.Latitude 
                                longitude = $Site.Longitude 
                                region	=	$Site.Region
                                name	=	$Site.Code.ToUpper()
                                zipcode	=	$Site.Zip
                                city	=	$site.city
                            }
                            $NewSite = Invoke-ADMNitro -ADMSession $ADMSession -OperationMethod POST -ResourceType mps_datacenter -Payload $Payload
                        }
                        foreach ($Site in $ImportSites)
                        {
                            if ($ADMSites.mps_datacenter | Where-Object -FilterScript { $_.name -eq $Site.Code.ToUpper() })
                            {
                                if ($Replace)
                                {
                                    try
                                    {
                                        Invoke-ADMNitro -ADMSession $ADMSession -OperationMethod DELETE -ResourceType mps_datacenter -ResourceName $ADMSite.id
                                        Add-Site $site
                                    }
                                    catch
                                    {
                                        Write-Log -Type "Error" -Line (Get-LineNumber) -Message $_.Exception
                                    }
                                }
                            }
                            else { Add-Site $Site }
                        }
                        $getVars.ResourceType = 'ns'
                        $Instances = Start-BackgroundJob -Job ${Function:Invoke-ADMNitro} -jobvariables $getVars                                
                        foreach ($Instance in $Instances.ns)
                        {
                            $BuildingCode = $Instance.hostname.Substring(0, 2).ToUpper()
                            $Filter = @{ name = $BuildingCode }
                            $Site = (Invoke-ADMNitro -ADMSession $ADMSession -OperationMethod GET -ResourceType mps_datacenter -Filters $Filter).mps_datacenter                                
                            if ($Site.Length -gt 0)
                            {
                                $Device = (Invoke-ADMNitro -ADMSession $ADMSession -OperationMethod GET -ResourceType managed_device -ResourceName $Instance.id).managed_device 
                                $PutDevice = @{
                                    id = $Device.id 
                                    ip_address = $Device.ip_address 
                                    profile_name = $Device.profile_name 
                                    Site_id = $Site.id 
                                    sync_operation = 'false'
                                }
                                try
                                {
                                    $Response = Invoke-ADMNitro -ADMSession $ADMSession -OperationMethod PUT -ResourceType managed_device -Payload $PutDevice
                                }
                                catch
                                {
                                Write-Log -Type "Error" -Line (Get-LineNumber) $_.exception
                                }
                            }
                        }
                        Update-Node $global:ClickedNode
                    }
                    elseif ($global:ClickedNode.Text -eq "Inventory")
                    {
                        Import-Devices
                    }
                })
            }
            '*Putty*' {
                $MenuItem.add_Click({ 
                    param ($sender,
                        $eargs)
                    $PuttyCred = Get-Credential -UserName $env:USERNAME -Message "Please enter your credentials for $($global:ClickedNode.Text):" 
                    Start-Process -FilePath "$global:PuttyPath\putty.exe" -ArgumentList "$($PuttyCred.UserName.Replace(`"\`",`"`"))`@$($global:ClickedNode.Tag.split(':')[1]) -pw $($PuttyCred.getnetworkcredential().password)" 
                    $PuttyCred = $null
                })
            }
            '*FileZilla*' {
                $MenuItem.add_Click({ 
                    param ($sender,
                        $eargs)
                    $FZCred = Get-Credential -UserName $env:USERNAME -Message "Please enter your credentials for $($global:ClickedNode.Text):" 
                    Start-Process -FilePath 'FileZilla.exe' -ArgumentList "sftp://$($FZCred.UserName.Replace(`"\`",`"`")):$($FZCred. getnetworkcredential().password)`@$($global:ClickedNode.Text)"
                    $FZCred = $null
                })
            }
            'Show run*' {
                $MenuItem.add_Click({ 
                    param ($sender,
                        $eargs)
                    try
                    {
                        Write-Log -Type "Info" -Line (Get-LineNumber) -Message "Showing running configuration for $($global:ClickedNode.Text)" $StopWatch.Restart()
                        $IP = $global:ClickedNode.Tag.Split(',')[3].Split(':')[1]
                        $adcVars = $getVars
                        $adcVars.ResourceType = 'nsrunningconfig'
                        $adcVars.Add("ADCHost", $IP)
                        $Conf = Start-BackgroundJob -Job ${Function:Invoke-ADMNitro} -jobvariables $adcVars                            
                        $Conf.nsrunningconfig | Out-Conf
                        Write-Log -Type "Info" -Line (Get-LineNumber) -Message "Showed running configuration for $($global:ClickedNode.Text) in $ ($StopWatch.Elapsed) seconds"
                    }
                    catch
                    {
                        Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to show running configuration for $($global:ClickedNode.Text): $ ($_.Exception)"
                    }
                })
            }
            '*Browser*' {
                $MenuItem.add_Click({ 
                    param ($sender,
                        $eargs)
                    $Filter = @{ name = $global:ClickedNode.Text }
                    $ADCIP = $global:ClickedNode.Tag.Split(',')[3].Split(':')[1]
                    $ADCLogin = (Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod Get -ResourceType device_login -ResourceName $ADCIP).device_login
                    $LoginToken = [uri]::EscapeDataString($ADCLogin.login_token)
                    Start "https://$($global:ClickedNode.Text)/menu/ss?sid=$($LoginToken)&username=$($ADCLogin.username)"
                })
            }
            "Install to ADC" {
                $MenuItem.add_Click({
                    Show-Install-Wizard
                })
            }
            "Refresh*" {
                $MenuItem.add_Click({ 
                    param ($sender,
                        $eargs)
                    if ($global:ClickedNode.Text -eq "Inventory")
                    {
                        foreach ($Node in $global:ClickedNode.Nodes)
                        {
                            Update-Node $Node
                        }   
                    }
                    else 
                    { 
                        Update-Node $global:ClickedNode 
                    }
                })
            }
            "Upload*" {
                $MenuItem.add_Click({ 
                    param ($sender,
                        $eargs)
                    $FileToUpload = Get-FileName "Any (*.*)| *.*" 
                    if ($FileToUpload.length -gt 0)
                    {
                        try
                        {
                            $formMain.Cursor = 'WaitCursor'
                            Set-Variable -Name FileToUpload -Value $FileToUpload -Scope Global
                            Set-Variable -Name WaitMessage -Value "Uploading $($global:ResourceType)" -Scope Global Show-Loading
                        }
                        catch
                        {
                            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to upload $($JobToUpload) to $($global:ADMHost): $($Exception)"
                        }
                        Update-Node $global:ClickedNode 
                        $formMain.Cursor = 'Default'
                    }
                })
            }
        }
        $CTMenu.MenuItems.AddRange(@($MenuItem))
    }
    $global:ClickedNode.ContextMenu = $CTMenu        
}
function Add-DataGridViewMenu($DataGridView)
{    
    #This function adds an action menu to a DataGridView
    $DGMenu = New-Object -TypeName System.Windows.Forms.ContextMenuStrip 
    $DGMenuItem1 = New-Object -TypeName System.Windows.Forms.ToolStripMenuItem 
    $DGMenuItem1.Text = "Copy"
    $DGMenuItem1.add_Click({ 
        param ($sender,
            $eargs)
        Set-Clipboard -Value $global:SelectedCells.Value
        })
    $DGMenuItem2 = New-Object -TypeName System.Windows.Forms.ToolStripMenuItem 
    $DGMenuItem2.Text = "Export to .csv"
    $DGMenuItem2.add_Click({ 
        param ($sender,
            $eargs)
        $OutFile = New-Object -TypeName System.Windows.Forms.SaveFileDialog 
        $OutFile.FileName = "out.csv"
        $OutFile.Filter = "CSV files (*.csv)|*.csv"
        $OutFile.ShowDialog()
        $global:ClickedDGV.Rows | Select-Object -expand DataBoundItem | Export-Csv -Path $OutFile.FileName -NoTypeInformation 
        Invoke-Item -Path $OutFile.FileName
    })
    $DGMenuItem3 = New-Object -TypeName System.Windows.Forms.ToolStripMenuItem 
	$DGMenuItem3.Text = "Clear"
    $DGMenuItem3.add_Click({ 
        param ($sender,
            $eargs)
        do
        {
            foreach ($row in $global:ClickedDGV.Rows)
            {
                $global:ClickedDGV.Rows.Remove($row)
            }
        }
        while ($global:ClickedDGV.Rows.Count -gt 1)
    })
    $DGMenu.Items.Add($DGMenuItem1)
    $DGMenu.Items.Add($DGMenuItem2)
    $DGMenu.Items.Add($DGMenuItem3)
    $DataGridView.ContextMenuStrip = $DGMenu
}
function Build-ADCNodes ($treeViewNode, $NodeStructure)
{
    #Populate ADC-Specific nodes on a specified treeview node
    $treeViewNode.Nodes.Clear() 
    if ($global:Cancel -eq $false)
    {
        foreach ($Key in $ADCNodes.Keys)
        {
            $TopNode = $treeViewNode.Nodes.Add($Key)
            if ($global:Cancel -eq $false)
            { 
                foreach ($Child in $ADCNodes.$Key)
                {
                    if ($Child.Keys.Count -gt 1)
                    {
                        if ($global:Cancel -eq $false)
                        {
                            foreach ($ChildKey in $Child.Keys)
                            {
                                $SecondNode = $TopNode.Nodes.Add($ChildKey)
                                if ($global:Cancel -eq $false)
                                {
                                    foreach ($SecondChild in $Child.$ChildKey)
                                    {
                                        $NodeName = $SecondChild.Split(',')[0]
                                        $ResourceType = $SecondChild.Split(',')[1]
                                        $ResourceName = $SecondChild.Split(',')[2]
                                        $ChildNode = $SecondNode.Nodes.Add($NodeName)
                                        $ChildNode.Tag = $ResourceType + "," + $ResourceName + "," + "ADCHost:" + $treeViewNode.Text
                                    }
                                }
                            }
                        }
                    }
                }
                else 
                {
                    $NodeName = $Child.Split[0]
                    $ResourceType = $Child.Split(',')[1]
                    $ResourceName = $Child.Split(',')[2]
                    $ChildNode = $TopNode.Nodes.Add($NodeName)
                    $ChildNode.Tag = $ResourceType + ',' + $ResourceName + ',' + "ADCHost:" + $treeViewNode.Text
                }
            }
        }
    }
    $global:Cancel = $false
}
function Build-TreeView ($treeView, $NodeStructure)
{
    $treeView.Nodes.Clear()
    foreach ($Node in $treeView.Nodes)
    {
        if ($global:Cancel -eq $false)
        {
            Update-Node $Node
        }
    }
    foreach ($Key in $NodeStructure.Keys)
    {
        if ($global:Cancel -eq $false)
        {
            $TopNode = $treeView.Nodes.Add($Key) 
            if ($global:Cancel -eq $false)
            {
                foreach ($Child in $NodeStructure.$Key)
                {
                    if ($Child.Keys.Count -gt 1)
                    {
                        if ($global:Cancel -eq $false)
                        {
                            foreach ($ChildKey in $Child.Keys)
                            {
                                $SecondNode = $TopNode.Nodes.Add($ChildKey) 
                                if ($global:Cancel -eq $false)
                                {
                                    foreach ($SecondChild in $Child.$ChildKey)
                                    {
                                        $NodeName = $SecondChild.Split(',')[0] 
                                        $ResourceType = $SecondChild.Split(',')[1]
                                        $ResourceName = $SecondChild.Split(',')[2]
                                        $ChildNode = $SecondNode.Nodes.Add($NodeName) 
                                        $ChildNode.Tag = $ResourceType +','+ $ResourceName
                                    }
                                }
                            }                            
                        }
                    }
					else
                    {
                        $NodeName = $Child.Split(',')[0]
                        $ResourceType = $Child.Split(',')[1]
                        $ResourceName = $Child.Split(',')[2]
                        $ChildNode = $TopNode.Nodes.Add($NodeName) 
                        $ChildNode.Tag = $ResourceType +','+ $ResourceName
                    }
                }
            }
            $global:Cancel = $false
        }
    }
}
function Create-Backup
{
    Set-Variable -Name Pass -Value "" -Scope Global
    $BackupPass = Show-GetPassword
    if ($BackupPass -ne "Cancel")
    {
        $uri = "$($global:ADMSession.Endpoint)/nitro/v1/config/backup"
        $Arg = "object=%7B%22backup%22%3A%7B%22backup_password%22%3A%22$($BackupPass)%22%7D%7D" 
        try
        {
            $Result = Invoke-RestMethod -WebSession $global:ADMSession.WebSession -Uri $uri -Method Post -Body $Arg 
            try {
                $PopUp = New-Object -ComObject Wscript.Shell
                $PopUp.PopUp("Backup complete: $($Result.backup.backup_file_name)")
            }
            catch
            {
                Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to create COM object: $($_.Exception)"
            }
        }
        catch
        {
            Write-Log -Type "Info" -Line (Get-LineNumber) $_.Exception
        }
    }
}
function Color-Cells ($WorkSheet, $Columns, $Master, $Line, $Row, $Column)
{
    [int]$Match = 0; [int]$Diff = 0; [int]$Missing = 0 
    foreach ($Key in $Columns)
    {
        #Default color
        $BackColor = 35 
        $ForeColor = 1
        #Matching color
        if ($Master.$Key -eq $Line.$Key -and $Key -notin ("hostname", "object_name"))
        {
            if ($Line.$Key.Length -gt 0)
            {
                $BackColor = 43
                if ($Key -ne "differences")
                {
                    $Match++
                }
            }
        }
        #Missing color
        elseif ($Line.Differences -eq "Missing")
        {
            $BackColor = 3 
            $ForeColor = 6
            if ($Key -notin ("differences", "hostname", "object_name"))
            {
                $Missing++
            }
        }
        #'Different' color
        elseif ($Line.Differences -ne "Match")
        {
            $BackColor = 46 
            $ForeColor = 1
            if ($Key -notin ("differences", "hostname", "object_name"))
            {
                $Diff++
            }
        }
        $Worksheet.Cells.Item($Row, $Column) = $Line.$Key
        $Worksheet.Cells.Item($Row, $Column).interior.colorindex = $BackColor 
        $Worksheet.Cells.Item($Row, $Column).Font.Colorindex = $ForeColor 
        $Column++
    }
    $Results = @{
        Match	=	$Match
        Diff	=	$Diff
        Missing	=	$Missing
        Worksheet	=	$Worksheet
    }
    return $Results
}
function Compare-Keys ($Objectl, $Object2, $Excludes)
{
    $Diffs = ""
    #Check for differences, comparing the ADC results to the Master configuration, collecting differences in a string, $Diffs
    foreach ($Key in $Objectl.Keys)
    {
        #Exclude the first three columns
        if ($Key -ne "differences" -and $Key -ne "hostname" -and $Key -ne 'object_name' -and $Object2.$Key.Length -gt 0 -and $Key -notin $Excludes)
        {
            if ($Object2.$Key -ne $Objectl.$Key)
            {
                $Diffs += $Key + "=" + $Object2.$Key + ";"
            }            
        }            
    }
    return $Diffs
}
function Connect-ADM
{
    $Filter = @{
        action = "device_state_summary"
    }
    try
    {
        $TestResult = Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType managed_device_summary -Filters $Filter
    }
    catch
    {
        $TestResult = "Disconnected"
        $global:ADMPass = $null
    }    
    if ($TestResult.errorcode -ne 0)
    {
        if ($global:ADMPass -eq $null) 
        {			
            Show-GetPassword           
        }
        if ($global:ADMHost -match "https")
        {
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 
        }
        
        $object = @{
            "login" =
            @{
                "username" = $global:ADMUser
                "password" = $global:ADMPass
            }
        } | ConvertTo-Json	    
        $loginJson = 'object=' + $object 
        $object = $null     
        try {
            $response = Invoke-RestMethod -Uri "$global:ADMHost/nitro/v1/config/login" -Body $loginjson -Method POST -SessionVariable saveSession -ContentType application/json         
            $loginJson = $null
            Write-Log -Type "Info" -Line (Get-LineNumber) -Message "Logged on to $global:ADMHost as $UserName with a $($response.login.session_timeout) second session timeout." 
            Set-Variable -Name SessionTimeout -Value $response.login.session_timeout -Scope Global 
            Set-Variable -Name SessionStart -Value (Get-Date) -Scope Global 
            if ($response.severity -eq "ERROR")
            {
                throw "Error. See response: `n$($response | Format-List * | Out-String)"
            }
        }  
        catch [Exception] { 
            throw $_
            $global:Cred = $null
        }	        
        $ADMSession = New-Object -TypeName PSObject
        $ADMSession | Add-Member -NotePropertyName Endpoint -NotePropertyValue $global:ADMHost -TypeName String
        $ADMSession | Add-Member -NotePropertyName WebSession -NotePropertyValue $saveSession -TypeName Microsoft.PowerShell.Commands.WebRequestSession 
        Set-Variable -Name ADMSession -Scope Global -Value $ADMSession 
        $getVars.ADMSession = $global:ADMSession
    }
    
}
function Convert-ObjectToHash
{
    [OutputType([hashtable])] 
    param 
    (
        [Parameter(Mandatory = $true,
        ValueFromPipeline = $true)]
        [psobject]$jsonObj
    )
    $hash = @{ }
    foreach ($property in $jsonObj.PSObject.Properties)
    {
        $hash[$property.Name] = $property.Value
    }
    $hash
}
function ConvertTo-DataTable
{
    [OutputType([System.Data.DataTable])] 
    param (
        [ValidateNotNull()]
        $InputObject,
        [ValidateNotNull()]
        [System.Data.DataTable]$Table,
        [switch]$RetainColumns,
        [switch]$FilterWMIProperties,
        [array]$Includes = @(""),
        [array]$Excludes = @("")
    )
    if ($null -eq $Table)
    {
        $Table = New-Object -TypeName System.Data.DataTable
    }
    if ($InputObject -is [System.Data.DataTable])
    {
        $Table = $InputObject
    }
    elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
    {
        $Table = $InputObject.Tables[0]
    }
    else
    {
        if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
        {
            $Table.Clear()
            if ($null -eq $InputObject) { return }                
            foreach ($item in $InputObject)
            {
                if ($null -ne $item)
                {
                    $object = $item 
                    break
                }
            }
            if ($null -eq $object) { return } 
            foreach ($Column in $Includes)
            {
                $prop = $object.PSObject.Properties[$Column] 
                if ($prop -eq $null)
                {
                    $prop = @{
                        Name	= $Column
                        Value	= ""
                    }    
                }            
                if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))
                {
                    $type = $null
                    if ($null -ne $prop.Value -and $Column -ne "commands")
                    {
                    try { $type = $prop.Value.GetType() }
                    catch { Write-Log -Type "Error" -Line (Get-LineNumber) -Message "$($_.Exception)" }
                    }
                    if ($Column -in ("roles","policies","commands", "variables", "template_info", "starttime", "endtime","groups"))
                    {
                        $type = "System.String"
                    }
                    if ($null -ne $type) 
                    {
                        if ($Column -eq "endtime")
                        {
                            [void]$table.Columns.Add("user", "System.String")
                        }
                        else { [void]$table.Columns.Add($prop.Name, $type) }
                    }
                    else
                    {
                        [void]$table.Columns.Add($prop.Name, "System.String")
                    }
                }
            }
        }
        if ($object -is [System.Data.DataRow])
        {
            foreach ($item in $InputObject)
            {
                $Table.Rows.Add($item)
            }
            return @( ,$Table)
        }        
        else
        {
            $Table.Rows.Clear()
        }
        foreach ($item in $InputObject)
        {
            $row = $table.NewRow()
            if ($item)
            {
                foreach ($Column in $Includes)
                {
                    if ($Column -in ("roles", "policies", "groups"))
                    {
                        [string]$Roles = ""
                        $i = 1
                        foreach ($Role in $item.$Column)
                        {
                            $Roles += $Role
                            if ($i -lt $item.$Column.Count)
                            {
                                $i++
                                $Roles += ", "
                            }
                        }
                        $row.Item($Column) = $Roles
                    }
                    elseif ($Column -eq "commands")
                    {
                        [string]$Commands = ""
                        foreach ($Command in $item.$Column)
                        {
                            $Commands += $Command.command + ";" 
                        }
                        $row.Item($Column) = $Commands
                    }
                    elseif ($Column -in ("variables","template_info"))
                    {
                        [string]$Variables = ""
                        foreach ($variable in $item.$Column)
                        {
                            $Variables += $Variable.type + ":"	+ "`$$($variable.name)`$" + ";"
                        }
                        $row.Item($Column) = $Variables
                    }
                    elseif ($Column -eq "starttime")
                    {
                        $niceTime = [System.TimeZone]::CurrentTimeZone.ToLocalTime(([datetime]'1/1/1970').AddSeconds($item.$Column))
                        $row.Item($Column) = ($niceTime.ToString())
                    }
                    elseif ($Column -eq "endtime")
                    {
                        $Filter = @{ id = $row.task_device_id }
                        $DeviceLog = (Invoke-ADMNitro -ADMSession $global:ADMSession -ResourceType task_device_log -OperationMethod Get -Filters $Filter).task_device_log 
                        $row.Item('user') = $DeviceLog.device_user
                    }
                    else
                    {
                        if ($item.$Column -eq $null)
                        {
                            $row.Item($Column) = ""
                        }
                        else
                        {
                            try
                            {
                                $row.Item($Column) = $item.$Column
                            }
                            catch
                            {
                                Write-Log -Type "Error" -Line (Get-LineNumber) -Message "$($_.Exception)"
                            }
                        }
                    }
                }
            }
            [void]$table.Rows.Add($row)
        }
    }    
    return @( ,$Table)
}    
function Convert-JsonFileToHash([string]$file)
{
    $jsonObj = Get-Content $file | ConvertFrom-Json $hash = @{ }
    foreach ($property in $jsonObj.PSObject.Properties)
    {
        $hash[$property.Name] = $property.Value
    }
    $hash   
}
function Disconnect-ADM ($ADMSession)
{
    Write-Log "Info" (Get-LineNumber) "Logging $($global:ADMUser) off of $($ADMSession.Endpoint)"
    try
    {
        [System.URI]$DisconnectURI = "$($ADMSession.Endpoint)/nitro/v1/config/login?args=sessionid:null"
        $Cookie = New-Object System.Net.Cookie
        $Cookie.Name = "logged_in_user_name"
        $Cookie.Value = $global:ADMUser
        $Cookie.Domain = $DisconnectURI.DnsSafeHost
        $ADMSession.WebSession.Cookies.Add($Cookie)
        Set-Variable -Name ADMPass -Scope Global -Value $null
        Set-Variable -Name ADMUser -Scope Global -Value $null
        try 
        {
            $response = Invoke-RestMethod -Uri $DisconnectURI -Method Delete -ContentType application/json -WebSession $ADMSession.WebSession
            Write-Log "Info" (Get-LineNumber) "Logged $($global:ADMUser) off of $($ADMSession.Endpoint): $response.Message"
        }
        catch
        {
            Write-Log "Error" (Get-LineNumber) "Unable to logoff $($global:ADMUser) from $($ADMSession.Endpoint): $_.Exception"
        }
    }
    catch 
    {
        Write-Log "Error" (Get-LineNumber) "Unable to logoff $($global:ADMUser) from $($ADMSession.Endpoint): $_.Exception"
    }
}
function Get-FileName ($Filter)
{
    [System.Reflection.Assembly]::LoadWithPartialName("System.windows.forms") | Out-Null 
    $OpenFileDialog = New-Object -TypeName System.Windows.Forms.OpenFileDialog 
    $OpenFileDialog.Filter = $Filter 
    $OpenFileDialog.ShowDialog() | Out-Null 
    $OpenFileDialog.FileName
}
function Get-Line ($RunningObject, $MasterObject, $LabelKey, $BindingKey)
{
    if ($BindingKey.Length -gt 0)
    {
        $Line = ($RunningObject | Where-Object -FilterScript { $_.$LabelKey -eq $MasterObject.$LabelKey -and $_.$BindingKey -eq $MasterObject.$BindingKey })
    }
    else
    {
        $Line = ($RunningObject | Where-Object -FilterScript { $_.$LabelKey -eq $MasterObject.$LabelKey })
    }
    if ($Line.Count -gt 1)
    {
        return $Line[0]
    }
    else
    {
        return $Line
    }
}
function Get-LineNumber
{
    $MyInvocation.ScriptLineNumber
}
function Get-MasterConfig ($filepath)
{
    $MasterConf = (Get-Content ($filepath) | ConvertFrom-Json) 
    function Hasher 
    {
        [OutputType([hashtable])] 
        param (
            [Parameter(Mandatory = $true,
            ValueFromPipeline = $true)]
        [psobject]$jsonObj
        )
        $hash = @{ }
        foreach ($property in $jsonObj.PSObject.Properties)
        {
            $hash[$property.Name] = $property.Value
        }
        $hash
    }
    if (($MasterConf[0] | Hasher).name -eq "Args")
    {
        $Arguments = $MasterConf[0] | Hasher 
        $Master = @{
            configs	=	$MasterConf[1 .. ($MasterConf.Count - 1)]
            args	=	$Arguments
        }
    }
    else
    {
        $Arguments = @{
            labelkey	=	"name"
            excludes	=	""
            bindingkey	=	""
            bindings	=	$false
        }
    
        $Master = @{
            configs	=	$MasterConf
            args	=	$Arguments
        }
    }
    return $Master
}
function Get-Path
{
    param
    (
        [Parameter(Mandatory = $true)]
        [ValidateNotNull()]
        [string]$Description
    )
    [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null 
    $FolderBrowserDialog = New-Object -TypeName System.Windows.Forms.FolderBrowserDialog 
    $FolderBrowserDialog.Description = $Description 
    $FolderBrowserDialog.SelectedPath = $global:BrowsePath 
    $ExistingValues = Get-Registry $RegistryPath
    if ($FolderBrowserDialog.ShowDialog() -eq "OK")
    {
        if ("BrowsePath" -in $ExistingValues.property)
        {
            try
            {
            Set-ItemProperty -Path $RegistryPath -Name "BrowsePath" -Value $FolderBrowserDialog.SelectedPath Set-Variable -Name BrowsePath -Value $FolderBrowserDialog.SelectedPath -Scope Global
            }
            catch
            {
            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to update the 'BrowsePath' registry value in $RegistryPath : $($_.Exception)"
            }
        }
        return $FolderBrowserDialog.SelectedPath
    }
    else
    {
    return "Cancelled"
    }
}
function Get-Registry
{
    Param (
        [Parameter(Mandatory = $true)] 
        [string]$path)
    Push-Location 
    Set-Location -Path $path 
    Get-Item . |
    Select-Object -ExpandProperty property | 
    ForEach-Object {
        New-Object -TypeName psobject -Property @{
            "property" = $_;
            "Value" = (Get-ItemProperty -Path . -Name $_).$_
        }
    }
    Pop-Location        
}
function Export-Bindings
    {
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory = $true,
        Position = 1)]
        [string]$ObjectName,
        [Parameter(Mandatory = $true,
        Position = 2)]
        [psobject]$NitroObject,
        [Parameter(Mandatory = $true,
        Position = 3)]
        [string]$PathName,
        [Parameter(Mandatory = $true,
        Position = 4)]
        [string]$LabelKey
    )
    $Results = @{ }; $BindingNames = @(); $BindingObjects = @()
    switch ($ObjectName)
    {
        "policypatset" { $BindingNames = "policypatset_pattern_binding" }
        "aaagroup" { $BindingNames = @("aaagroup_authorizationpolicy_binding", "aaagroup_vpnsessionpolicy_binding") }
        "crvserver" { $BindingNames = @("crvserver_icapolicy_binding") }
        "vpnvsenver" { $BindingNames = @("sslvserver_sslciphersuite_binding", "vpnvserver_authenticationldappolicy_binding", "vpnvserver_authenticationradiuspolicy_binding", "vpnvserver_responderpolicy_binding", "vpnvserver_rewritepolicy_binding", "vpnvsenver_vpnsessionpolicy_binding", "sslvserver_ecccurve_binding", "sslvserver_sslcertkey_binding", "sslprofile_sslcipher_binding") } 
        "lbvserver" { $BindingNames = @("lbvserver_servicegroup_binding", "lbvserver_service_binding") }
        "servicegroup" { $BindingNames = @("servicegroup_servicegroupmember_binding", "servicegroup_lbmonitor_binding") }
        "service" { $BindingNames = @("service_lbmonitor_binding") }
        "sslcipher" { $BindingNames = @("sslcipher_sslciphersuite_binding") }
    }
    foreach ($BindingName in $BindingNames)
    {
        $BindingCollection = @()
        foreach ($Object in ($NitroObject | ConvertFrom-Json))
        {
            $ObjectHash = $Object | Convert-ObjectToHash $ResourceName = $ObjectHash.$LabelKey 
            try 
            {
                if ($NitroArg.length -gt 0)
                {
                    $BindingObject = (Invoke-ADMNitro -ADMSession $ADMSession -OperationMethod GET -ResourceType $BindingName -ADCHost $ADC.ip_address -ResourceName $ResourceName -Arguments $NitroArg).$BindingName
                }
                else
                {
                    $BindingObject = (Invoke-ADMNitro -ADMSession $ADMSession -OperationMethod GET -ResourceType $BindingName -ADCHost $ADC.ip_address -ResourceName $ResourceName).$BindingName
                }
            }
            catch
            {
                Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to get $BindingName - $ResourceName from $($ADC.ip_address): $($_.Exception)"
            }            
            if ($BindingObject.length -gt 0)
            {
                foreach ($Binding in $BindingObject)
                {
                    $BindingCollection += $Binding
                }
            }
        }
        if ($BindingCollection.count -gt 0)
        {
            try
            {
                Export-Nitro $BindingName ($BindingCollection | ConvertTo-Json) $PathName $ExportObjects.$ObjectName | Out-Null
            }
            catch
            {
                Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to export $BindingName : $($_.Exception)"
            }
        }
    }
    return $LabelKey
}
function Export-Nitro
{
    [CmdletBinding()] 
    param 
    (
        [Parameter(Mandatory = $true,
            Position = 1)]
        [string]$ObjectName,
        [Parameter(Mandatory = $true,
            Position = 2)]
        [psobject]$NitroObject,
        [parameter(Mandatory = $true,
            Position = 3)]
        [string]$BasePath,
        [parameter(Mandatory = $true,
            Position = 4)]
        [string]$ChildPath
    )
    $Arguments = Get-Args $ObjectName $NitroObject | ConvertTo-Json 
    if ($NitroObject.substring(0, 1) -eq '[')
    {
        $NitroObject = $NitroObject.Insert(2, ("`t" + $Arguments + "`r`n`t,"))
    }
    else
    {
        $NitroObject = "[`r`n`t" + $Arguments + "`r`n" + "," + "`r`n`t" + $NitroObject + "`r`n" + "]"
    }
    $OutPath = "$BasePath\$ChildPath" 
    if (!(Test-Path $OutPath))
    {
        New-Item -ItemType Directory -Force -Path $OutPath
    }
    [IO.File]::WriteAllLines("$OutPath\$ObjectName.json", $NitroObject) 
    return ($Arguments | ConvertFrom-Json | Convert-ObjecttoHash).labelkey
}
function Get-Args
{
[CmdletBinding()] param (
[Parameter(Mandatory = $true,
    Position = 1)]
[string]$ObjectName,
[Parameter(Mandatory = $true,
    Position = 2)]
[psobject]$NitroObject
)
$Excludes = $BindingKey = $LabelKey = "name"
$Arguments = New-Object -TypeName System.Management.Automation.PSObject if ($ObjectName -match "binding")
{
$Excludes = "stateflag"
}
switch -wildcard ($ObjectName)
{
    "aaagroup" { $LabelKey = "groupname" }
    "aaagroup*binding" { $LabelKey = "policy"; $BindingKey = "groupname" }
    "dnsnameserver" { $LabelKey = "dnsvservername" }
    "crvserver" { $LabelKey = "name" }
    "crvserver_icapolicy_binding" { $LabelKey = "policyname" }
    "icaglobal_icapolicy_binding" { $LabelKey = "policyname" }
    "icapolicy" { $Excludes = "hits,undefhits" }
    "lbmonitor" { $LabelKey = "monitorname" }
    "lbvserver" { $Excludes = "statechangetimesec,statechangetimeseconds,statechangetimemsec,tickssincelaststatechange,clmonowner,numofconnections" } 
    "lbvserver_service_binding" { $LabelKey = "servicename"; $BindingKey = "name" }
    "lbvserver_servicegroup_binding" { $LabelKey = "servicegroupname"; $BindingKey = "name" }
    "ntpserver" { $LabelKey = "servername" }
    "rdpclientprofile" { $Excludes = "psk" }
    "rdpserverprofile" { $Excludes = "psk,rdpip" }
    "responder*" { $Excludes = "hits,undefhits" }
    "rewrite*" { $Excludes = "hits,undefhits" }
    "server" { $Excludes = "statechangetimesec,tickssincelaststatechange" }    
    "servicegroup_lbmonitor_binding" { $LabelKey = "monitor_name"; $BindingKey = "serviceGroupname" }
    "service_lbmonitor_binding" { $BindingKey = "monitor_name" }
    "service" { $Excludes = "statechangetimesec,statechangetimemsec,tickssincelaststatechange,numofconnections" }
    "sslcertkey" { $LabelKey = "certkey"; $Excludes = "daystoexpiration.,clientcertnotbefore,clientcertnotafter,certificatetype" } 
    "sslcertlink" { $LabelKey = "certkeyname"; $Excludes = "certificatetype" }
    "sslcipher" { $LabelKey = "ciphername" }
    "sslvserver" { $LabelKey = "vservername" }
    "sslprofile_sslcipher_binding" { $BindingKey = "vservername" }
    "sslvserver_ecccurve_binding" { $LabelKey = "ecccurvename"; $BindingKey = "vservername" }
    "sslvserver_sslcertkey_binding" { $LabelKey = "certkeyname"; $BindingKey = "vservername" }
    "sslvserver_sslciphersuite_binding" { $LabelKey = "ciphername"; $BindingKey = "vservername" }
    "sslvserver_sslpolicy_binding" { $BindingKey = "vservername" }
    "vpnglobal_staserver_binding" { $LabelKey = "staserver" }
    "vpnparameter" { $LabelKey = "usemip" }
    "vpnvserver" { $Excludes = "ipv46, curaaausers, curtotalusers" }
    "vpnvserver*binding" { $LabelKey = "policy"; $BindingKey = "name" }
}
$Arguments	|	Add-Member	-MemberType	NoteProperty	-Name	"name" -Value "Args"
$Arguments	|	Add-Member	-MemberType	NoteProperty	-Name	"labelkey" -Value $LabelKey
$Arguments	|	Add-Member	-MemberType	NoteProperty	-Name	"excludes" -Value $Excludes
$Arguments	|	Add-Member	-MemberType	NoteProperty	-Name	"bindingkey" -Value $BindingKey
if ($NitroArg -ne $null)
{
    $Arguments | Add-Member -MemberType NoteProperty -Name "nitroarg" -Value $NitroArg
}
return $Arguments
}
function Get-TopNode ($Node)
{
    $TopNode = $Node
    while ($TopNode.Parent -ne $null)
    {
        $TopNode = $TopNode.Parent
    }
    $TopNode
}
function Import-Devices
{
    $ImportFile = Get-FileName "XML (*.xml)| *.xml"
    $ParentName = $ImportFile.Split('\')
    $ParentName = $ParentName[($ParentName.Count - 2)]
    [xml]$ImportXML = Get-Content $ImportFile 
    $DeviceCollection = @()
    foreach ($Device in $ImportXML.properties.device)
    {
        $TempObject = New-Object -typename System.Object 
        foreach ($Param in $Device.param)
        {
            $TempObject | add-Member -memberType noteProperty -name $Param.name -Value $Param.value
        }
        try
        {
            $DeviceCollection += $TempObject
        }
        catch
        {
            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to collect $Device.name : $_.Exception"
        }
    }
    $NewCount = $DeviceCollection.Count 
    $Added = 0
    Set-Variable -Name SelectObject -Value 'ns_device_profile' -Scope Global 
    Set-Variable -Name TargetObject -Value "$NewCount devices" -Scope Global 
    Show-Select-Object 
    if ($global:NewItem -ne $null)
    {
        $GroupFilter = @{ name = $ParentName } 
        foreach ($Device in $DeviceCollection)
        {
            $Datacenter = $Device.datacenter
            if ($Datacenter.length -gt 0)
            {
                $SiteFilter = @{ name = $Datacenter }
                $Site = (Invoke-ADMNitro -ADMSession $ADMSession -OperationMethod GET -ResourceType mps_datacenter -Filters $SiteFilter).mps_datacenter 
            }            
            if ($Site.length -le 0 -or $Datacenter.length -le 0)
            {
                $Filter = @{ name = "Default" }
                $Site = (Invoke-ADMNitro -ADMSession $ADMSession -OperationMethod GET -ResourceType mps_datacenter -Filters $Filter).mps_datacenter
            }
            $PutDevice = @{
                ip_address = $Device.nsip 
                profile_name = $global:NewItem.name 
                sync_operation = 'false' 
                datacenter_id = $Site.id    
            }
            try
            {
                if ((Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType managed_device -Filters $PutDevice).managed_device)
                {
                    $Upload = Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod PUT -ResourceType managed_device -Payload $PutDevice
                }
                else
                {
                    $Upload = Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod POST -ResourceType managed_device -Payload $PutDevice
                }
                if ($Upload.severity -eq "Error")
                {
                    Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to import $($Device.hostname) : $($Upload.message)"
                }
                elseif ($Upload.Message -eq "Done")
                {
                    Write-Log -Type "Info" -Line (Get-LineNumber) -Message "Added $($Device.hostname)"
                    $Added++
                    Start-Sleep 2
                }
                $Filter = @{ ip_address = $Device.nsip }
                $ManagedDevice = (Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType managed_device -Filters $Filter).managed_device
                $TargetGroup = (Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType device_group -Filters $GroupFilter).device_group
                if ($TargetGroup.length -le 0)
                {
                    $DeviceArray = @()
                    $DeviceArray += $ManagedDevice.display_name 
                    $PutGroup = @{
                        category	=	"default"
                        device_family	=	"ns"
                        disable_upgrade	=	"false"
                        duration	=	"60"
                        name	=	$ParentName
                        static_device_list =	$ManagedDevice.display_name
                        static_device_list_arr = $DeviceArray
                    }
                    $Upload = Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod POST -ResourceType device_group -Payload $PutGroup 
                    if ($Upload -match "error")
                    {
                        Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to import $($Device.hostname): $Upload"
                    }
                }
                elseif ($TargetGroup.Length -ge 1)
                {
                if ($TargetGroup.static_device_list.length -ge 1)
                {
                    $Devices = $TargetGroup.static_device_list + ',' + $ManagedDevice.display_name
                }
                else { $Devices = $ManagedDevice.display_name }
                [array]$DeviceArray = $TargetGroup.static_device_list_arr 
                $DeviceArray += $ManagedDevice.display_name 
                $PutGroup = @{
                    category	=	"default"
                    device_family	=	"ns"
                    disable_upgrade	=	"false"
                    duration	=	"60"
                    id	=	$TargetGroup.id
                    name	=	$TargetGroup.name
                    static_device_list	=	$Devices
                    static_device_list_arr =	$DeviceArray
                    }
                    $Upload = Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod PUT -ResourceType device_group -Payload $PutGroup
                    if ($Upload.severity -eq "Error")
                    {
                        Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to import $($Device.hostname): $($Upload.message)"
                    }
                }
            }
            catch
            {
                Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to import $($Device.name): $($_.Exception)"
            }
        }
    }
    try
    {
        $PopUp = New-Object -ComObject wscript.shell
        $Answer = $PopUp.popup("Imported $Added of $NewCount ADCs to $global:ADMHost", 0, "Added $Added of $NewCount")
        foreach ($Node in $global:ClickedNode.Nodes)
        {
            Update-Node $Node
        }
    }
    catch
    {
        Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to create COM object: $($_.Exception)"
    }
}
function Invoke-ADMNitro
{
    [cmdletBinding()] 
    param (
        [Parameter(Mandatory = $true)]
        [PSObject]$ADMSession,
        [Parameter(Mandatory = $true)]
        [ValidateSet("DELETE", "GET", "POST", "PUT")]
        [string]$OperationMethod,
        [Parameter(Mandatory = $true)]
        [string]$ResourceType,
        [Parameter(Mandatory = $false)]
        [string]$ResourceName,
        [Parameter(Mandatory = $false)]
        [string]$Action,
        [Parameter(Mandatory = $false)]            
        [hashtable]$Arguments = @{ },
        [Parameter(Mandatory = $false)]
        [ValidateScript({ $OperationMethod -in @("GET", "DELETE") })] 
        [hashtable]$Filters = @{ },
        [Parameter(Mandatory = $false)]
        [ValidateScript({ $OperationMethod -notin @("GET", "DELETE") })] 
        [hashtable]$Payload = @{ },
        [Parameter(Mandatory = $false)]
        [switch]$GetWarning = $false,
        [Parameter(Mandatory = $false)]
        [ValidateSet("EXIT", "CONTINUE", "ROLLBACK")] 
        [string]$OnErrorAction = "CONTINUE",
        [Parameter(Mandatory = $false)]
        [ValidateSet("upload", "config")]
        [string]$ApiType = "config",
        [Parameter(Mandatory = $false)]
        [string]$ADCHost = $null,
        [Parameter(Mandatory = $false)]
        [string]$InFile = $null,
        [Parameter(Mandatory = $false)]
        [string]$Logging = $true
    )
    $APIURL = "/nitro/v1"
    if ($ResourceType -in @("stylebooks","configpacks","repositories"))
    {
        $APIURL = "/stylebook" + $APIURL
    }
    $uri = "$($ADMSession.Endpoint)$APIURL/$ApiType/$ResourceType" 
    if (-not [string]::IsNullOrEmpty($ResourceName))
    {
        $uri += "/$ResourceName"
    }
    if ($OperationMethod -notin @("GET", "DELETE"))
    {
        if (-not [string]::IsNullOrEmpty($Action))
        {
            $uri += "?action=$Action"
        }
    }
    else
    {
        if ($Arguments.Count -gt 0)
        {
            $uri += "?"
            $argsList = @()
            foreach ($arg in $Arguments.GetEnumerator())
            {
                $argsList += "$($arg.Name)=$([System.Uri]::EscapeDataString($arg.Value))"
            }
        }
        $uri += $argsList -join '&'
    }
    if ($Filters.Count -gt 0)
    {
        $uri += "?filter="
        $filtersList = @()
        foreach ($filter in $Filters.GetEnumerator())
        {
            $filtersList += "$($filter.Name):$([System.Uri]::EscapeDataString($filter.Value))"
        }
        $uri += $filtersList -join ','
    }            
    if ($OperationMethod -notin @("GET", "DELETE"))
    {
        $warning = if ($GetWarning) { "YES" } 
        else { "NO" }
        $hashtablePayload = @{ }
        $hashtablePayload."params" = @{ "action"=$Action }
        $hashtablePayload.$ResourceType = $Payload
        $jsonPayload = ConvertTo-Json $hashtablePayload -Depth 6 
        if ($OperationMethod -eq "PUT")
        {
            $jsonPayload = [System.Web.HttpUtility]::UrlPathEncode($jsonPayload).Replace('%20%20', '').Replace('%0d%0a', '')
        }
        else
        {
            $jsonPayload = ("object=" + [System.Web.HttpUtility]::UrlPathEncode($jsonPayload).Replace('%20%20', '').Replace('%0d%0a', ''))
        }
    }
    try
    {            
        if ($ADCHost.length -gt 0)
        {
            $APIProxyHeader = @{ "_MPS_API_PROXY_MANAGED_INSTANCE_IP" = "$(([System.Net.Dns]::GetHostAddresses($ADCHost)))"; "Accept" = "*/*"; "Cache-Control" = "no-cache"; "Content-type" = "application/json"; "Accept-Encoding" = "gzip, deflate, br" }
        }
        else
        {
            $APIProxyHeader = @{ "Accept" = "*/*"; "Cache-Control" = "no-cache"; "Content-type" = "application/json"; "Accept-Encoding" = "gzip, deflate, br" }
        }
        if ($InFile.Length -gt 0)
        {
            $boundary = [guid]::NewGuid().ToString()
            $APIProxyHeader.Add('rand_key', $boundary)
            $InFileName = (Get-Item $InFile).Name 
            if ($ResourceType -eq 'ns_configtemplate')
            {
                $Type = 'application/vnd.ms-excel'
                $Resource = $ResourceType
            }
            else
            {
                $Type = 'application/x-compressed'
            }
            if ($ResourceType -eq 'ns_image')
            {
                $Resource = $ResourceType + "s"
            }
            else 
            {
                $Resource = $ResourceType
            }
            $bodyStart = @"
--$boundary
Content-Disposition: form-data; name="NITRO_WEB_APPLICATION" 

true
--$boundary
Content-Disposition: form-data; name="rand_key"

$boundary
--$boundary
Content-Disposition: form-data; name="$($Resource)"; filename="$InFileName" 
Content-Type: $Type
"@
                $bodyEnd = @"

--$($boundary)--
"@
            $ContentType = "multipart/form-data; boundary=$boundary"
            $TempFile = (Join-Path -Path $env:TEMP -ChildPath ([IO.Path]::GetRandomFileName()))
            $filestream = (New-Object -TypeName 'System.IO.FileStream' -ArgumentList ($TempFile, [IO.FileMode]'Create', [IO.FileAccess]'Write'))
            Try
            {
                $bytes = [Text.Encoding]::UTF8.GetBytes($bodyStart)
                $filestream.Write($bytes, 0, $bytes.Length)
                $bytes = [IO.File]::ReadAllBytes($InFile)
                $filestream.Write($bytes, 0, $bytes.Length)
                if ($ResourceType -eq 'ns_image' -or $ResourceType -eq 'ns_configtemplate')
                {
                    $bytes = [Text.Encoding]::UTF8.GetBytes($bodyEnd)
                    $filestream.Write($bytes, 0, $bytes.Length)
                }
                if ($ResourceType -eq 'ns_configtemplate')
                {
                    #$bytes = [Text.Encoding]::UTF8.GetBytes("")
                    #$filestream.Write($bytes, Qj $bytes.Length)
                }
            }
            finally
            {
                $filestream.Close() 
                $filestream = $null 
                $uri = $uri + '/' 
                [System.GC]::Collect()
            }
        }
        else
        {
            $ContentType = "application/json"
        }
        $restParams = @{
            Uri = $uri  
            ContentType= $ContentType
            Method= $OperationMethod 
            ErrorVariable= "restError"
            WebSession = $ADMSession.WebSession
            Headers = $APIProxyHeader
        }
        if ($OperationMethod -notin @("GET", "DELETE"))
        {
            if ($InFile -gt 0)
            {
                $restParams.Add("InFile", $TempFile)                        
                $header = "application/x-compressed; boundary=`"$boundary`""
            }
            else { $restParams.Add("Body", $jsonPayload) }
        }
        $response = Invoke-RestMethod @restParams 
        if ($TempFile)
        {
            $null = (Remove-Item -Path $TempFile -Force -Confirm:$false)                    
        }
    }
    catch [Exception] {            
        if ($TempFile)
        {
            $null = (Remove-Item -Path $TempFile -Force -Confirm:$false)
        }
        return $_.Exception        
    }
    return $response 
    [System.GC]::Collect()
}                        
function NitroTo-DataGridView ($ResourceType, $DataGridView, [array]$Columns, [hashtable]$Filter, [string]$ADCHost, [hashtable]$Arguments, $progressBar = $null, $formLayout = $formMain)
{        
    $JobArgs = @{
        ADMSession = $global:ADMSession 
        ResourceType = $ResourceType
    }
    if ($ADCHost.Length -gt 0)
    {
        $Command = 'Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod Get -ResourceType $ResourceType -ADCHost $ADCHost'
        $JobArgs.Add('ADCHost', $ADCHost)
        Write-Log -Type "Info" -Line (Get-LineNumber) -Message "Getting $ResourceType from $ADCHost via $global:ADMHost"
    }
    else
    {
        $Command = 'Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType $ResourceType'
    }
    if ($Filter.Length -gt 1)
    {
        $Command += ' -Filters $Filter'
        $JobArgs.Add('Filter', $Filter)
    }
    if ($Arguments.Length -gt 0)
    {
        $Command += ' -Arguments $Arguments'
        $JobArgs.Add('Arguments', $Arguments)
    }
    
    $NitroObject = (Invoke-Expression -Command $Command).$ResourceType 
    $NitroObject = $NitroObject | Sort-Object -Property $Columns[0] 
    if ($NitroObject -eq $null)
    {
        Connect-ADM
        $NitroObject = (Invoke-Expression -Command $Command).$ResourceType
    }
    $jobVars = @{
        InputObject	= $NitroObject
        Includes	= $NitroColumns.$ResourceType
    }
	$NitroTable = ConvertTo-DataTable -InputObject $NitroObject -Includes $NitroColumns.$ResourceType -formLayout $formMain
    $NitroTable = Start-BackgroundJob -Job ${Function:ConvertTo-DataTable} -jobvariables $jobVars -formLayout $formMain
    
    try 
    {
        Update-DataGridView -DataGridView $DataGridView -Item $NitroTable -AutoSizeColumns DisplayedCells
    }
    catch
    {
        Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to update DataGridView: $($_.Exception)"
    }
    if ($Command -match '-ADCHost')
    {
        Connect-ADM
    }
}
function Out-Conf
{
    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $true,
            ValueFromPipeline = $true,
            Position =0)]
        $StrText
    )
    $tempFile = [System.IO.Path]::GetTempFileName()
    $tmpPath = (Get-Item $tempFile).DirectoryName
    $tempFile = $tmpPath + "\" + $global:ClickedNode.Text + ".conf"
    Set-Content -Value $StrText -Path $tempFile -Force 
    try {
        Invoke-Item -Path $tempFile 
        Start-Sleep -Seconds 1
        #Remove-Item $tempFile
    }
    catch
    {
        Invoke-Item -Path (Get-Item $tempFile).DirectoryName
        try {                
                $PopUp = New-Object -ComObject wscript.shell
                $Answer = $PopUp.popup("Associate .conf files for auto-open.", 0, "OK", 4)
            }
        catch
        {
            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to create COM object: $($_.Exception)"
        }            
    }
}
function Start-BackgroundJob
{
    param (
        [scriptblock]$Job = { },
        [hashtable]$jobVariables = @{ },
        $progressBar = $null,
        $formLayout = $formMain
    )
    [string]$Variables = ""
    foreach ($Key in $jobVariables.Keys)
    {
        $Variables = $Variables + " -" + $Key + " " + $jobVariables.$Key
    }
    if ($Job.Startposition.Content.StartsWith("function"))
    {
        $Message = $Job.Startposition.Content.Split("`r`n")[0].Split(' ')[1]
    }
    else { $Message = $Job.Startposition.Content }
    Write-Log -Type "Info" -Line (Get-LineNumber) -Message "$Message $Variables"
    if ($progressBar -ne $null)
    {
        $progressBar.Visible = $true
    }
    $formLayout.SuspendLayout()
    try
    {
        Set-Variable -Name Runspace -Value ([System.Management.Automation.Runspaces.RunspaceFactory]::CreateRunspace()) -Scope Global 
        $Runspace.Open()
        Set-Variable -Name PowerShell -Value ([powershell]::Create()) -Scope Global 
        $PowerShell.Runspace = $Runspace
        $PowerShell.AddScript($job) | Out-Null
        
        foreach ($Var in $jobVariables.GetEnumerator())
        {
            $PowerShell.AddParameter($Var.Name, $Var.Value) | Out-Null
        }
        
        $BackgroundJob = $PowerShell.BeginInvoke()
        do
        {
            [System.Windows.Forms.Application]::DoEvents()
            if ($progressBar -ne $null)
            {
                $progressBar.Increment(1)
            }
            Start-Sleep -Milliseconds 5 
            if ($progressBar -ne $null)
            {
                if ($progressBar.Value -eq 100)
                {
                    $progressBar.Value = 0
                }
            }
        }
        while (!$BackgroundJob.IsCompleted)
        $Result = $PowerShell.EndInvoke($BackgroundJob)
        $PowerShell.Dispose() | Out-Null 
        $Runspace.Close() | Out-Null 
        if ($progressBar -ne $null)
        {
            $progressBar.Visible = $false
        }
        #Return results to the GUI
        $formLayout.ResumeLayout()
        $Result
    }    
    catch
    {
        Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Error executing background job: $($_.Exception)" 
        $formLayout.ResumeLayout()
        $null
    }
}
function Update-DataGridView
{
    Param (
        [ValidateNotNull()]
        [Parameter(Mandatory = $true)]
        [System.Windows.Forms.DataGridView]$DataGridView,
        [ValidateNotNull()]
        [Parameter(Mandatory = $true)]
        $Item,
        [Parameter(Mandatory = $false)]
        [string]$DataMember,
        [System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
    )
    $DataGridView.SuspendLayout()
    $DataGridView.DataMember = $DataMember
    Set-Variable -Name ClickedDGV -Value $DataGridView -Scope Global 
    Add-DataGridViewMenu ($DataGridView)
    if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
    {
        $DataGridView.DataSource = $Item.Tables[0]
    }
    elseif ($Item -is [System.ComponentModel.IListSource]`
    -or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
    {
        $DataGridView.DataSource = $Item
    }
    else
    {
        $array = New-Object -TypeName System.Collections.ArrayList
        if ($Item -is [System.Collections.IList])
        {
            $array.AddRange($Item)
        }
        else
        {
            $array.Add($Item)
        }
        try
        {
            $DataGridView.DataSource = $array
        }
        catch
        {
            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to update DataGridView with $($Item): $($_.Exception)"
        }
    }
    if ($AutoSizeColumns -ne 'None')
    {
        $DataGridView.AutoResizeColumns($AutoSizeColumns)
    }
    $DataGridView.ResumeLayout()
        
}
function Update-ListBox
{
    param
    (
        [Parameter(Mandatory = $true)]
        [ValidateNotNull()]
        [System.Windows.Forms.ListBox]$ListBox,
        [Parameter(Mandatory = $true)]
        [ValidateNotNull()]
        $Items,
        [Parameter(Mandatory = $false)]
        [string]$DisplayMember,
        [switch]$Append
    )
    if (-not $Append)
    {
        $listBox.Items.Clear()
    }
    if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
    {
        $listBox.Items.AddRange($Items)
    }

    elseif ($Items -is [System.Collections.IEnumerable])
    {
        $listBox.BeginUpdate() 
        foreach ($obj in $Items)
        {
            $listBox.Items.Add($obj)
        }
        $listBox.EndUpdate()
    }
    else
    {
        $listBox.Items.Add($Items)
    }
    $listBox.DisplayMember = $DisplayMember
}
function Update-Node ($TreeViewNode)
{    
    $ResourceType = $TreeViewNode.Tag.Split(',')[0] 
    $ResourceName = $TreeViewNode.Tag.Split(',')[1]
    $TreeViewNode.Nodes.Clear()
    $Command = 'Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType $ResourceType' 
    if ($ResourceType -in ('configuration_template', 'config_jobs'))
    {
        $Filter = @{ is_inbuilt = "f" }
        $Command = $Command + ' -Filters $Filter'
    }
    if ($ResourceType -eq 'config_template_temp')
    {
        [hashtable]$Filter = @{ template_file = 'config_mgmt' }
        $Command = $Command + ' -Filters $Filter'
    }
    $NitroResults = (Invoke-Expression -Command $Command).$ResourceType 
    $NitroResults | Sort-Object -Property $ResourceName 
    foreach ($Result in $NitroResults)
    {
        $ChildNode = $TreeViewNode.Nodes.Add($Result.$ResourceName)
        $ChildNode.Tag = $ResourceType + ',' + $ResourceName 
        if ($Result.id -gt 0)
        {
            $ChildNode.Tag = $ChildNode.Tag + "," + $Result.id
        }
        if ($ResourceType -eq 'ns')
        {
            $ChildNode.Tag = $ChildNode.Tag + "," + "IPAddr:" + $Result.ip_address
            if ($Result.instance_state -eq 'Down')
            {
                $ChildNode.ForeColor = $WarningColor
            }
        }
    }
}
function Write-Log ($Type, $Line, $Message)
{
    $TimeStamp = ("{0:HH:mm:ss}" -f (Get-Date))
    $NewRow = $logDataGridView.Rows.Add($TimeStamp, $Type, $Line, $Message) 
    if ($Type -eq 'Error')
    {
        $logDataGridView.Rows[$NewRow].DefaultCellStyle.BackColor = $global:BGColor
    }
    $logDataGridView.FirstDisplayedScrollingRowIndex = $global:LogIndex 
    $global:LogIndex++
}
function XMLtoCSV ($XmlFile, $OutCSV)
{
    $outpath = $env:TEMP
    $columns = @(); $devicevars = @(); $globalvars = @()
    [xml]$vars = Get-Content $XmlFile
    
    foreach ($global in $vars.properties.global.param)
    {
        $columns += $global.name
    }
    foreach ($device in $vars.properties.device.param)
    {
        $columns += $device.name
    }       
    $columns = $columns | Select-Object -Unique        
    $header = "#variable_input_key_file"
    $count = 0
    while ($count -le ($columns.Count - 1))
    {
        $header += $headerrow + ","
        $count++
    }
    $header += "`r`n" 
    $count = 0
    while ($count -le $columns.Count)
    {
        $header += $headerrow + $count++
    }
    $tempfile = $outpath + "\$($OutCSV.Split('.')[0])_temp.csv" 
    $header | Out-File $tempfile -Encoding UTF8
    $ExportLine = New-Object -TypeName PSObject
    $ExportLine | Add-Member -MemberType 'NoteProperty' -Name "#Global" -Value "Global Values" 
    foreach ($column in $columns)
    {
        $var = $null
        $var = $vars.properties.global.param | Where-Object -FilterScript { $_.name -eq $column } if ($var.value)
        {
            $ExportLine | Add-Member -MemberType 'NoteProperty' -Name $column -Value $var.value
        }
        else
        {
            $ExportLine | Add-Member -MemberType 'NoteProperty' -Name $column -Value ""
        }
    }
    $globalvars += $ExportLine
    $globalfile = $outpath + "\$($OutCSV.Split('.')[0])_global.csv"
    $globalvars | Export-CSV -Path $globalfile -Encoding UTF8 -NoTypeInformation -Delimiter ','
    foreach ($device in $vars.properties.device)
    {
        $ExportLine = New-Object -TypeName PSObject
        $ExportLine | Add-Member -MemberType 'NoteProperty' -Name "#Instance(s)" -Value $device.name 
        foreach ($column in $columns)
        {
            $var = $null
            $var = $device.param | Where-Object -FilterScript { $_.name -eq $column }
            if ($var.value)
            {
                $ExportLine | Add-Member -MemberType 'NoteProperty' -Name $column -Value $var.value
            }
            else
            {
                $ExportLine | Add-Member -MemberType 'NoteProperty' -Name $column -Value ""
            }
        }
        $devicevars += $ExportLine
    }
    $devicefile = $outpath + "\$($OutCSV.Split('.')[0])_device.csv"
    $OutFile = $outpath + "\" + $OutCSV
    $devicevars | Export-CSV -Path $devicefile -Encoding UTF8 -NoTypeInformation
    # Concatenate and delete temp files
    Get-Content -Path $tempfile, $globalfile, $devicefile | ForEach-Object { $_ -replace '"', "" } | Set-Content -Path $OutFile 
    Remove-Item -Path $tempfile, $globalfile, $devicefile 
    return $OutFile
}
function Refresh-TreeView ($treeView)
{
    $treeView.Cursor = 'WaitCursor'    
    if ($global:Cancel -eq $false)
    {
        foreach ($Node in $treeView)
        {   
            if ($global:Cancel -eq $false)
            {     
                foreach ($FirstNode in $Node.Nodes)                            
                {
                    if ($global:Cancel -eq $false)
                    {
                        foreach ($SecondNode in $FirstNode.Nodes)
                        {
                            if ($SecondNode.Tag -gt 0 -and $global:Cancel -eq $false)
                            {	                                
                                $Filter = $null                                    
                                $ResourceType = $SecondNode.Tag.Split(',')[0]
                                $ResourceName = $SecondNode.Tag.Split(',')[1]                                 
                                try 
                                {                                
                                    $jobVars = @{
                                        ADMSession	=	$global:ADMSession
                                        OperationMethod	=	"GET"
                                        ResourceType	=	$ResourceType
                                    }
                                    if ($ResourceType -in ('configuration_template', 'config_jobs'))
                                    {
                                        $Filter = @{ is_inbuilt = "f" }
                                    }
                                    if ($ResourceType -eq 'config_template_temp')
                                    {
                                        $Filter = @{ template_file = 'config_mgmt' }                            
                                    }
                                    if ($Filter.Length -gt 0)
                                    {
                                        if ($jobVars.Filters)
                                        {
                                            $jobVars.Filters = $Filter
                                        }
                                        else
                                        {
                                            $jobVars.Add('Filters', $Filter)
                                        }
                                    }
                                    #Execute the finalized command
                                    $Resources = Start-BackgroundJob -Job ${Function:Invoke-ADMNitro} -jobVariables $JobVars 
                                    $Filter = $null 
                                    $SecondNode.Nodes.Clear()
                                    #Apply additional node tags depending on resource type
                                    foreach ($Resource in $Resources.$ResourceType)
                                    {
                                        $ThirdNode = $SecondNode.Nodes.Add($Resource.$ResourceName)
                                        $ThirdNode.Tag = $ResourceType + ',' + $ResourceName
                                        if ($Resource.id -gt 0)
                                        {
                                            $ThirdNode.Tag = $ThirdNode.Tag + "," + $Resource.id
                                        }
                                        if ($ResourceType -eq 'ns')
                                        {
                                            $ThirdNode.Tag = $ThirdNode.Tag + "," + "IPAddr:" + $Resource.ip_address
                                            if ($Resource.instance_state -eq 'Down')
                                            {
                                                $ThirdNode.ForeColor = $WarningColor
                                            }
                                        }
                                    }
                                }
                                catch
                                {
                                    Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Ran into a problem with Refresh-TreeView: $($_.Exception)"
                                }
                            }
                            else
                            {
                                try
                                {
                                    foreach ($ThirdNode in $SecondNode.Nodes)
                                    {
                                        if ($ThirdNode.Tag.Split('3 ')[0] -ne 'TBD')
                                        {
                                            $ThirdNode.Nodes.Clear()
                                            $ResourceType = $ThirdNode.Tag.Split(',')[0]                                           
                                            $ResourceName = $ThirdNode.Tag.Split(',')[1]
                                            $getVars.ResourceType = $ResourceType                                    
                                            $Resources = Start-BackgroundJob -Job ${Function:Invoke-ADMNitro} -jobvariables $getVars
                                            foreach ($Resource in $Resources.$ResourceType)
                                            {
                                                $FourthNode = $ThirdNode.Nodes.Add($Resource.$ResourceName)
                                                $FourthNode.Tag = $ResourceType + "," + $ResourceName + "," + $Resource.id
                                            }
                                        }
                                    }
                                }
                                Catch
                                {
                                    Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Ran into a problem $SecondNode in Refresh-TreeView: $($_.Exception)"
                                }
                            }
                        }
                    }
                }
			}			
        }
    }
    $treeView.Cursor = 'Arrow'
    [System.GC]::Collect()
}
function Remove-BlankNodes ($treeView)
{
    $TopNode = Get-TopNode $treeView.SelectedNode $TreeView.SelectedNode = $TopNode 
    Foreach ($Node in $treeView.Nodes)
    {
        if ($Node.Text -eq "")
        {
            $TreeView.Nodes.Remove($Node)
        }
    }    
}
function Set-MainFormColor
{
    $DGVCellStyle.ForeColor = $global:FGColor 
    $DGVCellStyle.BackColor = $global:BGColor
    $DGVHeaderStyle.ForeColor = $global:FGColor
    $DGVHeaderStyle.BackColor = $global:HeadingColor
    $menustrip1.BackColor = $global:HeadingColor
    $splitcontainer1.BackColor = $global:BGColor2 
    $formMain.BackColor = $global:BGColor    
    $ADMTreeView.BackColor = $global:BGColor
    $splitcontainer2.BackColor = $global:BGColor2
    $splitcontainer2.Panel1.BackColor = $global:BGColor2
    $splitcontainer2.Panel2.BackColor = $global:BGColor2
    $logToolStrip.BackColor = $global:HeadingColor
    $contextmenustrip1.BackColor = $global:HeadingColor
    $fileToolStripMenuItem.ForeColor = $global:FGColor
    $editToolStripMenuItem.ForeColor = $global:FGColor
    $tablelayoutpanel1.BackColor = $global:BGColor
    $ADMTreeView.ForeColor = $global:FGColor
    $toolsToolStripMenuItem1.BackColor = $global:HeadingColor   
    $helpToolStripMenuItem.ForeColor = $global:FGColor
    $exitToolStripMenuItem.BackColor = $global:HeadingColor
    $twikiToolStripMenuItem.BackColor = $global:HeadingColor
    $changeADMToolStripMenuItem.BackColor = $global:HeadingColor
    $changeADMToolStripMenuItem.ForeColor = $global:FGColor
    $exitToolStripMenuItem.ForeColor = $global:FGColor
    $twikiToolStripMenuItem.ForeColor = $global:FGColor
    $prefsToolStripMenuItem.BackColor = $global:HeadingColor
    $prefsToolStripMenuItem.ForeColor = $global:FGColor
    $logViewerToolStripMenuItem.BackColor = $global:HeadingColor
    $logViewerToolStripMenuItem.ForeColor = $global:FGColor
    $importDevicesToolStripMenuItem.BackColor = $global:HeadingColor 
    $importDevicesToolStripMenuItem.ForeColor = $global:FGColor
    $configViewerToolStripMenuItem.BackColor = $global:HeadingColor
    $configViewerToolStripMenuItem.ForeColor = $global:FGColor
    $checkoutADCsToolStripMenuItem.BackColor = $global:HeadingColor 
    $checkoutADCsToolStripMenuItem.ForeColor = $global:FGColor
    $getADCResourcesToolStripMenuItem.BackColor = $global:HeadingColor        
    $tablelayoutpanel1.BackColor = $global:BGColor2
    $getADCResourcesToolStripMenuItem.ForeColor = $global:FGColor
    $toolsToolStripMenuItem1.ForeColor = $global:FGColor
    $datagridviewResults.GridColor = $global:FGColor
    $logDataGridView.GridColor = $global:FGColor    
    $datagridviewResults.BackgroundColor = $global:BGColor2
    $logDataGridView.BackgroundColor = $global:BGColor2
}
function Start-ADMPower
{    
    if ($global:ADMSession -ne $null)
    {
        Disconnect-ADM $global:ADMSession
    }
    $elapsed = $StopWatch.Elapsed 
    $formMain.Text = "Connecting to ADM.." 
    if (!(Test-Path ($RegistryPath)))
    {
        try
        {
            New-Item -Path $RegistryPath -Force | Out-Null
            Write-Log -Type "Info" -Line (Get-LineNumber) -Message "Created $RegistryPath key in registry"
        }
        catch
        {
            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to create $RegistryPath key in registry: $($_.Exception)"
        }        
    }    
    foreach ($RegValue in Get-Registry -Path $RegistryPath)
    {
        Set-Variable -Name $RegValue.property -Value $RegValue.value -Scope Global
    }
    if ((Show-StartupParams) -eq 'OK' -and $global:Eject -eq $false)
    {
        if ($StartupParams_ADMHostInput.Length -gt 0)
        {
            $global:ADMHost = $StartupParams_ADMHostInput
            Set-Variable -name ADMHost -Value $StartupParams_ADMHostInput -Scope Global
            Set-Variable -name ADMUser -Value $StartupParams_ADMUser -Scope Global
            Set-Variable -Name PromptAuth -Value $true -Scope Global            
            
            if ($StartupParams_checkboxUseHTTPS -eq $true)
            {
                Set-Variable -Name ADMHost -Value ("https://" + $global:ADMHost) -Scope Global
            }
            else
            {
                $Warning = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to post creds to $($global:ADMHost) in plain text?", "Send password unencrypted?", "YesNo") 
                if ($Warning -eq 'Yes')
                {
                    Set-Variable -Name ADMHost -Value ("http://" + $global:ADMHost) -Scope Global
                }
                else { Set-Variable -Name ADMHost -Value ("https://" + $global:ADMHost) -Scope Global }
            }
        }
        else
        {
            Show-StartupParams
        }
    }
    $elapsed = $StopWatch.Elapsed
    $formMain.Text = "Getting configuration from $global:ADMHost"
    Write-Log -Type "Info" -Line (Get-LineNumber) -Message "Startup window closed. Elapsed time: $elapsed"
    Connect-ADM
    if ($global:Cancel -eq $false)
    {
        Build-TreeView -treeview $ADMTreeView -NodeStructure $TreeViewNodes        
    }
    if ($global:Loaded -eq $true -and $global:Cancel -eq $false)
    {
        foreach ($Node in $ADMTreeView)
        {
            if ($global:Cancel -eq $false)
            {
                Refresh-TreeView -treeView $Node
            }
        }
    }
    $ADMTreeView.Sort()
    Remove-BlankNodes -TreeView $ADMTreeView 
    $elapsed = $StopWatch.Elapsed
    Write-Log -Type "Info" -Line (Get-LineNumber) -Message "Built main TreeView structure. Elapsed time: $elapsed" 
	$formMain.Text = "ADMPower v$($global:Version): Connected to " + $global:ADMHost
    $global:Cancel = $false
}
function TreeView-LeftClick ($TreeViewNode)
{    
    if ($TreeViewNode.Tag.Length -gt 0)
    {
        $Tags = $TreeViewNode.Tag.Split(',')
        $ResourceType = $Tags[0]
        $ResourceName = $Tags[1]
        switch ($ResourceType)
        {
            'ns' {
                if ($Tags.Count -gt 2 -and $OldNode.Parent -ne $TreeViewNode)
                {
                    [System.Data.DataTable]$ADMTable = New-Object -TypeName System.Data.DataTable
                    [hashtable]$Filter = @{ hostname = $TreeViewNode.Text }
                    $ADC = (Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType ns -Filters $Filter).ns
                    if ($TreeViewNode.Nodes.count -le 0)
                    {
                        $global:Cancel -eq $false
                        Build-TreeView -treeview $TreeViewNode -NodeStructure $ADCNodes
                    }
                }
            }
            'task_device_log' {
                $Filter = @{ id = $TreeViewNode.Tag.Split(',')[2] }
                $DeviceLog = (Invoke-ADMNitro -ADMSession $global:ADMSession -ResourceType task_device_log -OperationMethod Get -Filters $Filter).task_device_log
                Set-Variable -Name TaskUser -Value $DeviceLog.device_user -Scope Global $Filter = @{ task_device_id = $TreeViewNode.Tag.Split(',')[2] }
            }
            'device_group' {
                NitroTo-DataGridView -ResourceType 'ns' -DataGridView $datagridviewResults -Columns $NitroColumns.$_ 
                foreach ($Node in $TreeViewNode.Nodes)
                {
                    if ($Node.Nodes.Count -eq 0)
                    {
                        Update-GroupNode $Node
                    }
                }
            }
            'mps_datacenter' {
                NitroTo-DataGridView -ResourceType 'mps_datacenter' -DataGridView $datagridviewResults -Columns $NitroColumns.$_ 
                foreach ($Node in $TreeViewNode.Nodes)
                {
                    if ($Node.Nodes.Count -eq 0)
                    {
                        Update-SiteNode $Node
                    }
                }
            }
        }
        if ($ResourceType -eq "task_device_log")
        {
            $ResourceType = "task_command_log"
        }
        $ADCHost = $null 
        $Filter = @{ } 
        if ($Tags.Count -gt 2)
        {
            if ($Tags[2] -match "ADCHost:")
            {
                $ADCHost = $Tags[2].Split(':')[1]
            }
            $Filter.Add($ResourceName, $TreeViewNode.Text)
        }
        else { $ResourceID = $null }
        if ($TreeViewNode.Text -in ("Templates", "Jobs"))
        {
            $Filter.Add('is_inbuilt', "f")
        }
        if ($ResourceType -eq 'config_template_temp')
        {
            [hashtable]$Filter.Add('template_file','config_mgmt')
        }
        try
        {
            NitroTo-DataGridView -ResourceType $ResourceType -DataGridView $datagridviewResults -Columns $NitroColumns.$ResourceType -Filter $Filter -ADCHost $ADCHost
        }
        catch
        {
            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to update DataGridView with $($ResourceType):$($_.Exception)"
        }
    }        
    if ($TreeViewNode.Parent.Tag.Length -gt 0)
    {
        $Tags = $TreeViewNode.Parent.Tag.Split(',')
        $ResourceType = $Tags[0] 
        if ($Tags.Count -gt 2)
        {
            switch ($ResourceType)
            {
                "ns" {
                    foreach ($Node in $TreeViewNode.Nodes)
                    {
                        Update-ADCNode -TreeViewNode $Node
                    }
                }
            }
        }
    }
}
function TreeView-RightClick ($TreeViewNode)
{
    $MenuItems = @()
    $ContextMenu = New-Object -TypeName System.Windows.Forms.ContextMenu
    #Build context menus for Inventory
    if ($TreeViewNode.Tag.Length -gt 0)
    { 
        if ($TreeViewNode.Tag.Split(',')[0] -eq 'ns' -and $TreeViewNode.Tag.Split(',')[2] -ne $null)
        {
            $MenuItems += @("SSH with Putty", "SCP with FileZilla", "Open in Browser", "Change Device Profile", "Show running config", "Export to .json", "Remove from Inventory")
        }
    }
    if ($TreeViewNode -ne $null)
    {
        switch ($TreeViewNode.Text)
        {
            "Inventory" {
                $MenuItems += ("Import Instances", "Batch Delete", "Refresh")
            }
            "All" {
                $MenuItems += ("Export All", "Refresh")
            }
            "Master Configs" {
                $MenuItems += ("Import Config Template", "Refresh")
            }
            "Firmware" {
                $MenuItems += ("Upload Firmware", "Refresh")
            }                
            "Profiles" {
                $MenuItems += ("Add Device Profile", "Refresh")
            }
            "Templates" {
                $MenuItems += ("Import Template", "Batch Delete", "Refresh")
            }
            "Jobs" {
                $MenuItems += ("Import Job", "Batch Delete", "Refresh")
            }
            "Uploads" {
                $MenuItems += ("Upload File", "Batch Delete", "Refresh")
            }
            "Groups" {
                $MenuItems += ("Import Group", "Refresh")
            }
            "Sites" {
                $MenuItems += ("Import Sites", "Batch Delete", "Refresh")
            }
            "Backups" {
                $MenuItems += ("Upload Backup", "Create Backup", "Refresh")
            }
            "Policies" {
                $MenuItems += ("Import Policy", "Refresh")
            }
            "Roles" {
                $MenuItems += ("Import Role", "Refresh")
            }
        }
        switch ($TreeViewNode.Parent.Text)
        {
            "Templates" {
                $MenuItems += ("Export to .json", "Export to .conf", "Delete template")
            }
            "Jobs" {
                $MenuItems += ("Export to .json", "Export to .conf", "Delete job")
            }
            "Uploads" {
                $MenuItems += ("Export File", "Delete file")
            }
            "Firmware" {
                $MenuItems += ("Install to ADC", "Delete firmware")
            }
            "Backups" {
                $MenuItems += ("Delete Backup", "Download Backup")
            }
            "Profiles" {
                $MenuItems += ("Delete Device Profile")
            }
            "Policies" {
                $MenuItems += ("Delete Policy","Export to .json")
            }
            "Roles" {
                $MenuItems += ("Delete Role", "Export to .json")
            }
            "Groups" {
                $MenuItems += ("Delete Group", "Export to .json")
            }
            "Users" {
                $MenuItems += ("Delete User", "Export to .json")
            }
            "Sites" {
                $MenuItems += ("Delete Site", "Export to .json")
            }
            "Master Configs" {
                $MenuItems += ("Delete Config Template", "Export to .conf", "Export to .json")
            }
        }
        Add-ContextMenuItems $TreeViewNode $ContextMenu $MenuItems
    }
}
function Update-ADCNode ($TreeViewNode)
{
    #Build the specified Nitro resource type and name of the label to assign to the node
    $ResourceType = $TreeViewNode.Tag.Split(',')[0]
    $ResourceName = $TreeViewNode.Tag.Split(',')[1] 
    if ($ResourceType -ne 'TBD')
    {
        $TreeViewNode.Nodes.Clear()
        $ADCHost = $TreeViewNode.Parent.Parent.Tag.Split(':')[1]
        if ($ResourceType -eq 'task_device_log')
        {
            $Command = 'Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType $ResourceType'
            $Tag = $ResourceType + "," + $ResourceName
        }
        else {
            Write-Log -Type "Info" -Line (Get-LineNumber) -Message "Getting $($ADCHost)\$ResourceType"
            $StopWatch.Restart()
            $Command = 'Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod Get -ResourceType $ResourceType -ADCHost $ADCHost'
            $Tag = $ResourceType + "," + $ResourceName + "," + "ADCHost:$ADCHost"
        }
        if ($ResourceType -in ('configuration_template', 'config_jobs'))
        {
            $Filter = @{ is_inbuilt = "f" }
            $Command = $Command + ' -Filters $Filter'
        }
        $NitroResults = Invoke-Expression -Command $Command 
        if ($Command -match 'Invoke-ADMNitro')
        {
            Write-Log -Type "Info" -Line (Get-LineNumber) -Message "Got $(($NitroResults | Measure-Object).Count) $($ResourceType) s from $ADCHost in $($StopWatch.Elapsed) seconds"
        }
        foreach ($Result in $NitroResults.$ResourceType)
        {
            $ChildNode = $TreeViewNode.Nodes.Add($Result.$ResourceName)
            $ChildNode.Tag = $Tag
            if ($Resource.instance_state -eq 'Down' -or $Resource.curstate -eq 'DOWN')
            {
                $ChildNode.ForeColor = $WarningColor
            }
        }
    }
}
function Update-SiteNode ($TreeViewNode)
{
    $Filter = @{ datacenter_id = $TreeViewNode.Tag.Split(',')[2] }
    $JobVars = @{
        ADMSession	= $global:ADMSession
        OperationMethod	=	'GET'
        ResourceType	=	'ns'
        Filters	=	$Filter
    }
    $NitroResults = Start-BackgroundJob -Job ${Function:Invoke-ADMNitro} -JobVariables $JobVars -formLayout $formMain
    #foreach ($Device in (Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType ns -Filters $Filter). ns)
    foreach ($Device in $NitroResults.ns)
    {
        $ChildNode = $TreeViewNode.Nodes.Add($Device.hostname)
        $ChildNode.Tag = "ns,hostname,$($Device.id),IPAddress:$($Device.ip_address)" 
        if ($Device.instance_state -eq 'Down')
        {
            $ChildNode.ForeColor = $WarningColor
        }
    }
}
function Update-GroupNode ($TreeViewNode)
{
    $ResourceType = $TreeViewNode.Parent.Tag.Split(',')[0]
    $ResourceName = $TreeViewNode.Parent.Tag.Split(',')[1]
    $Filter = @{ $ResourceName = $TreeViewNode.Text }
    Set-Variable -Name Filter -Value $Filter -Scope Global
    $Command = 'Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType $ResourceType -Filters $global:Filter'
    $jobVars = @{
        ADMSession = $global:ADMSession 
        OperationMethod = 'GET'
        ResourceType	= $ResourceType
        Filters = $global:Filter
    }        
    $DeviceGroup = Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType $ResourceType -Filters $Filter 
    foreach ($Device in $DeviceGroup.$ResourceType.static_device_list_arr | Select-Object -Unique)
    {
        try
        {        
            $DGADCs = @()        
            if ($Device -match '-')
            {               
                foreach ($IP in $Device.Split('-'))
                {             
                    $DGADCs += $IP
                }
            }
            else
            {
                $DGADCs += $Device
            }
            foreach ($ADC in $DGADCs)
            {
                $JobVars = @{
                    ADMSession	= $global:ADMSession
                    OperationMethod	= 'GET'
                    ResourceType	= 'ns'
                    Filters = @{ ipv4_address = $ADC }
                }
                $ADCObject = (Start-BackgroundJob -Job ${Function:Invoke-ADMNitro} -JobVariables $JobVars -formLayout $formMain).ns                        
                $InstanceNode = $TreeViewNode.Nodes.Add($ADCObject.hostname)
                $InstanceNode.Tag = "ns,hostname,$($ADCObject.id),IPAddress:$($ADCObject.ip_address)" 
                if ($ADC.instance_state -eq 'Down')
                {
                    $InstanceNode.ForeColor = $WarningColor
                }
            }            
        }
        catch
        {
            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Error in Update-GroupNode: $($_.Exception)"
        }
    }
}
$elapsed = $StopWatch.Elapsed
#endregion    
#region Forms
function Show-MainForm 
{        
	$formMain_Load = {
        $StopWatch.Start()        
        $formMain.ShowInTaskbar = $true 
        $Loaded = $false 
        Start-ADMPower
        [System.Windows.Forms.Application]::DoEvents()
        [System.GC]::Collect()
    }
    $formMain_Activated = { 
        if (!$Loaded)
        {
            Refresh-TreeView -treeView $ADMTreeView 
            $elapsedTime = (Get-Date) - $global:StartTime 
            $ADMTreeView.Sort()
            Write-Log -Type "Info" -Line (Get-LineNumber) -Message "Populated TreeView. Total startup time: $($elapsedTime.Seconds) seconds"
        }
        Set-Variable -Name Loaded -Value $true -Scope Global 
        [System.GC]::Collect()
        $elapsed = ((Get-Date)- $global:StartTime)
    }    
    $configViewerToolStripMenuItem_Click = {
        $global:Cancel = $true 
        Show-ConfigViewer
    }
    $datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
        if ($datagridviewResults.DataSource -is [System.Data.DataTable])
        {
            $column = $datagridviewResults.Columns[$_.ColumnIndex]
            $direction = [System.ComponentModel.ListSortDirection]::Ascending
            if ($column.HeaderCell.SortGlyphDirection -eq 'Descending')
            {
                $direction = [System.ComponentModel.ListSortDirection]::Descending
            }
            $datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
        }
    }
    $datagridviewResults_CellFormatting = [System.Windows.Forms.DataGridViewCellFormattingEventHandler]{
       
    }
    $ADMTreeView_MouseClick = [System.Windows.Forms.MouseEventHandler]{
        #Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
        $e = $_[0]
        if ($e.Button -eq 'Right')
        {
            $OldNode = $global:ClickedNode
            Set-Variable -Name ClickedNode -Value ($ADMTreeView.HitTest($e.X, $e.Y)).Node -Scope Global 
            TreeView-RightClick $global:ClickedNode
        }
    }
    $datagridviewResults_MouseClick=[System.Windows.Forms.MouseEventHandler]{   
        Set-Variable -Name SelectedCells -Value $datagridviewResults.SelectedCells -Scope Global $e = $_[0]
        if ($e.Button -eq 'Right')
        {
            Set-Variable -Name ClickedDGV -Value $datagridviewResults -Scope Global
        }
    }
    $ADMTreeView_AfterExpand=[System.Windows.Forms.TreeViewEventHandler]{
        $OldNode = $global:ExpandedNode
        Set-Variable -Name ExpandedNode -Value $_.Node -Scope Global 
        if ($OldNode -ne $global:ExpandedNode)
        {
            TreeView-LeftClick $global:ExpandedNode
        }
    }
    $ADMTreeView_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
        $OldNode = $global:SelectedNode
        Set-Variable -Name SelectedNode -Value $_.Node -Scope Global 
		if ($OldNode -ne $global:SelectedNode)
        {
            TreeView-LeftClick $global:SelectedNode
        }
    }
    $logDataGridView_MouseClick = [System.Windows.Forms.MouseEventHandler]{
        Set-Variable -Name SelectedCells -Value $datagridviewResults.SelectedCells -Scope Global 
        if ($_.Button -eq 'Right')
        {
            Set-Variable -Name ClickedDGV -Value $logDataGridView -Scope Global
            $column = $logViewer.Columns[$_.ColumnIndex]            
            foreach ($Row in $logViewer.Rows)
            {
                $Row
            }
            Add-DataGridViewMenu ($logDataGridView)
        }
    }
    $toolStripMenuItem_MouseHover = {
        $this.ForeColor = $global:HeadingColor
    }
    $toolStripMenuItem_MouseLeave = { 
        if (!$this.Pressed)
        {
        $this.ForeColor = $global:FGColor
        }
    }
    $changeADMToolStripMenuItem_Click={
        $Loaded = $true         
        $ADMTreeView.Nodes.Clear()        
        Start-ADMPower 
        [System.GC]::Collect()
    }
    $prefsToolStripMenuItem_Click={
        Show-PrefEditor
    }
    $exitToolStripMenuItem_Click={
        $formMain.Close()
    }
    $importDevicesToolStripMenuItem_Click = {
        Import-Devices
    }
    $logViewerToolStripMenuItem_Click = {
        Set-Variable -Name ResourceType -Value 'task_log' -Scope Global 
        Show-Log-Viewer
    }
    $twikiToolStripMenuItem_Click = {
        $global:Cancel = $true
        Start $helpUrl
    }
    $checkoutADCsToolStripMenuItem_Click = {
        $global:Cancel = $true 
        Connect-ADM 
        $jobVars = @{
            ADMSession	=	$global:ADMSession
            OperationMethod = "GET"
            ResourceType = "ns"
            Filters	= @{ instance_state = "Up" }
        }
        Set-Variable -Name CurrentADCs -Value ((Start-BackgroundJob -Job ${Function:Invoke-ADMNitro} -jobvariables $jobVars).ns | Where-Object -FilterScript { $_.hostname.length -gt 0 } ) -Scope Global 
        $jobVars = @{
            ADMSession	=	$global:ADMSession
            OperationMethod = "GET"
            ResourceType = "device_group"
        }
        Set-Variable -Name CurrentDGs -Value (Start-BackgroundJob -Job ${Function:Invoke-ADMNitro} -jobvariables $jobVars).device_group -Scope Global
        Show-Check-ADC
    }
    $getADCResourcesToolStripMenuItem_Click = {
        $global:Cancel = $true 
        Connect-ADM 
        $jobVars = @{
            ADMSession	=	$global:ADMSession
            OperationMethod = "GET"
            ResourceType = "ns"
            Filters	= @{ instance_state = "Up" }
        }
        Set-Variable -Name CurrentADCs -Value ((Start-BackgroundJob -Job ${Function:Invoke-ADMNitro} -jobvariables $jobVars).ns | Where-Object -FilterScript { $_.hostname.length -gt 0 }) -Scope Global 
        $jobVars = @{
            ADMSession	=	$global:ADMSession
            OperationMethod = "GET"
            ResourceType = "device_group"
        }
        Set-Variable -Name CurrentDGs -Value (Start-BackgroundJob -Job ${Function:Invoke-ADMNitro} -jobvariables $jobVars).device_group -Scope Global
        Show-GetADCResources
    }    
    $Form_StateCorrection_Load=
    {        
        $formMain.WindowState = $InitialFormWindowState
    }
    $Form_StoreValues_Closing=
    {    
        if($ADMTreeView.SelectedNode -ne $null)
        {
            $script:MainForm_ADMTreeView = $ADMTreeView.SelectedNode.Text
        }
        else
        {
            $script:MainForm_ADMTreeView = $null
        }
        $script:MainForm_datagridviewResults = $datagridviewResults.SelectedCells 
        $script:MainForm_logDataGridView = $logDataGridView.SelectedCells        
        Disconnect-ADM $ADMSession
    }
    $Form_Cleanup_FormClosed=
    {
        $formMain.remove_Activated($formMain_Activated)
        $formMain.remove_Load($formMain_Load)
        $ADMTreeView.remove_AfterExpand($ADMTreeView_AfterExpand)
        $ADMTreeView.remove_AfterSelect($ADMTreeView_AfterSelect)
        $ADMTreeView.remove_MouseClick($ADMTreeView_MouseClick)
        $datagridviewResults.remove_CellFormatting($datagridviewResults_CellFormatting) 
        $logDataGridView.remove_CellFormatting($datagridviewResuIts_CellFormatting) 
        $helpToolStripMenuItem.remove_DropDownClosed($toolStripMenuItem_MouseLeave) 
        $helpToolStripMenuItem.remove_DropDownOpened($toolStripMenuItem_MouseHover) 
        $helpToolStripMenuItem.remove_MouseEnter($toolStripMenuItem_MouseHover)
        $helpToolStripMenuItem.remove_MouseLeave($toolStripMenuItem_MouseLeave)
        $fileToolStripMenuItem.remove_DropDownClosed($toolStripMenuItem_MouseLeave) 
        $fileToolStripMenuItem.remove_DropDownOpened($toolStripMenuItem_MouseHover)
        $fileToolStripMenuItem.remove_MouseEnter($toolStripMenuItem_MouseHover)
        $fileToolStripMenuItem.remove_MouseLeave($toolStripMenuItem_MouseLeave) 
        $editToolStripMenuItem.remove_DropDownClosed($toolStripMenuItem_MouseLeave) 
        $editToolStripMenuItem.remove_DropDownOpened($toolStripMenuItem_MouseHover)
        $editToolStripMenuItem.remove_MouseEnter($toolStripMenuItem_MouseHover)
        $editToolStripMenuItem.remove_MouseLeave($toolStripMenuItem_MouseLeave) 
        $toolsToolStripMenuItem1.remove_DropDownClosed($toolStripMenuItem_MouseLeave) 
        $toolsToolStripMenuItem1.remove_DropDownOpened($toolStripMenuItem_MouseHover) 
        $toolsToolStripMenuItem1.remove_MouseEnter($toolStripMenuItem_MouseHover) 
        $toolsToolStripMenuItem1.remove_MouseLeave($toolStripMenuItem_MouseLeave) 
        $exitToolStripMenuItem.remove_Click($exitToolStripMenuItem_Click) 
        $exitToolStripMenuItem.remove_MouseLeave($toolStripMenuItem_MouseLeave) 
        $exitToolStripMenuItem.remove_MouseHover($toolStripMenuItem_MouseHover) 
        $twikiToolStripMenuItem.remove_Click($twikiToolStripMenuItem_Click)
        $twikiToolStripMenuItem.remove_MouseLeave($toolStripMenuItem_MouseLeave) 
        $twikiToolStripMenuItem.remove_MouseHover($toolStripMenuItem_MouseHover) 
        $prefsToolStripMenuItem.remove_Click($prefsToolStripMenuItem_Click) 
        $prefsToolStripMenuItem.remove_MouseLeave($toolStripMenuItem_MouseLeave) 
        $prefsToolStripMenuItem.remove_MouseHover($toolStripMenuItem_MouseHover) 
        $changeADMToolStripMenuItem.remove_Click($changeADMToolStripMenuItem_Click) 
        $changeADMToolStripMenuItem.remove_MouseLeave($toolStripMenuItem_MouseLeave) 
        $changeADMToolStripMenuItem.remove_MouseHover($toolStripMenuItem_MouseHover) 
        $logViewerToolStripMenuItem.remove_Click($logViewerToolStripMenuItem_Click) 
        $logViewerToolStripMenuItem.remove_MouseEnter($toolStripMenuItem_MouseHover) 
        $logViewerToolStripMenuItem.remove_MouseLeave($toolStripMenuItem_MouseLeave) 
        $logViewerToolStripMenuItem.remove_MouseHover($toolStripMenuItem_MouseHover) 
        $importDevicesToolStripMenuItem.remove_Click($importDevicesToolStripMenuItem_Click) 
        $importDevicesToolStripMenuItem.remove_MouseEnter($toolStripMenuItem_MouseHover) 
        $importDevicesToolStripMenuItem.remove_MouseLeave($toolStripMenuItem_MouseLeave) 
        $importDevicesToolStripMenuItem.remove_MouseHover($toolStripMenuItem_MouseHover) 
        $configViewerToolStripMenuItem.remove_Click($configViewerToolStripMenuItem_Click) 
        $configViewerToolStripMenuItem.remove_MouseEnter($toolStripMenuItem_MouseHover) 
        $configViewerToolStripMenuItem.remove_MouseLeave($toolStripMenuItem_MouseLeave) 
        $configViewerToolStripMenuItem.remove_MouseHover($toolStripMenuItem_MouseHover) 
        $checkoutADCsToolStripMenuItem.remove_Click($checkoutADCsToolStripMenuItem_Click) 
        $checkoutADCsToolStripMenuItem.remove_MouseEnter($toolStripMenuItem_MouseHover) 
        $checkoutADCsToolStripMenuItem.remove_MouseLeave($toolStripMenuItem_MouseLeave) 
        $checkoutADCsToolStripMenuItem.remove_MouseHover($toolStripMenuItem_MouseHover) 
        $getADCResourcesToolStripMenuItem.remove_Click($getADCResourcesToolStripMenuItem_Click) 
        $formMain.remove_Load($Form_StateConrection_Load)
        $formMain.remove_Closing($Form_StoneValues_Closing)
        $formMain.remove_FormClosed($Form_Cleanup_FormClosed)
    }
    foreach ($RegValue in Get-Registry -Path $RegistryPath)
    {
        Set-Variable -Name $RegValue.property -Value $RegValue.value -Scope Global
    }    
    
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formMain = New-Object 'System.Windows.Forms.Form'
    $tablelayoutpanel1 = New-Object 'System.Windows.Forms.TableLayoutPanel'
    $splitcontainer1 = New-Object 'System.Windows.Forms.SplitContainer'
    $menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
    $contextmenustrip1 = New-Object 'System.Windows.Forms.ContextMenuStrip'
    $logToolStrip = New-Object 'System.Windows.Forms.MenuStrip'
    $ADMTreeView = New-Object 'System.Windows.Forms.TreeView'
    $splitcontainer2 = New-Object 'System.Windows.Forms.SplitContainer'
    $datagridviewResults = New-Object 'System.Windows.Forms.DataGridView'
    $logDataGridView = New-Object 'System.Windows.Forms.DataGridView'
    $Time = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
    $Type = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
    $Line = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
    $Message = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
    $helpToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $fileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $editToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $toolsToolStripMenuItem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $exitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $twikiToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $prefsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $changeADMToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $logViewerToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $importDevicesToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $configViewerToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $checkoutADCsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $getADCResourcesToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
    $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'    
    
    $formMain.SuspendLayout()
    $tablelayoutpanel1.SuspendLayout()
    $splitcontainer1.SuspendLayout()
    $menustrip1.SuspendLayout()
    $splitcontainer2.SuspendLayout()   

    $formMain.Controls.Add($tablelayoutpanel1)
    $formMain.AutoScaleDimensions = '8.5, 15'
    $formMain.AutoScaleMode = 'Font'
    $formMain.AutoValidate = 'EnableAllowFocusChange'
    
    $formMain.BackgroundImageLayout = 'None'
    $formMain.ClientSize = '742, 542'
        
    $formMain.Icon = [System.Convert]::FromBase64String($IconData)
    $formMain.MainMenuStrip = $logToolStrip 
    $formMain.Margin = '4, 4, 4, 4'
    $formMain.MinimumSize = '602, 310' 
    $formMain.Name = 'formMain'
    $formMain.Startposition = 'CenterScreen'
    $formMain.Text = 'ADMPower'
    $formMain.add_Activated($formMain_Activated)
    $formMain.add_Load($formMain_Load)   
    $tablelayoutpanel1.Controls.Add($splitcontainer1, 0, 2)
    $tablelayoutpanel1.Controls.Add($menustrip1, 0, 1)
    $tablelayoutpanel1.AutoSize = $True 
    $tablelayoutpanel1.AutoSizeMode = 'GrowAndShrink'
    
    $tablelayoutpanel1.ColumnCount = 1
    $System_Windows_Forms_ColumnStyle_1 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 100) 
    [void]$tablelayoutpanel1.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_1) 
    $tablelayoutpanel1.Dock = 'Fill'
    $tablelayoutpanel1.Location = '0, 0'
    $tablelayoutpanel1.Name = 'tablelayoutpanel1'
    $tablelayoutpanel1.RowCount = 3
    $System_Windows_Forms_RowStyle_2 = New-Object 'System.Windows.Forms.RowStyle'
    [void]$tablelayoutpanel1.RowStyles.Add($System_Windows_Forms_RowStyle_2)
    $System_Windows_Forms_RowStyle_3 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 21)
    [void]$tablelayoutpanel1.RowStyles.Add($System_Windows_Forms_RowStyle_3)
    $System_Windows_Forms_RowStyle_4 = New-Object 'System.Windows.Forms.RowStyle' ('Percent', 70)
    [void]$tablelayoutpanel1.RowStyles.Add($System_Windows_Forms_RowStyle_4)
    $tablelayoutpanel1.Size = '742, 542'
    $tablelayoutpanel1.TabIndex = 3    
    
    $splitcontainer1.Dock = 'Fill'
    $splitcontainer1.Location = '3, 24'
    $splitcontainer1.Name = 'splitcontainer1'
    [void]$splitcontainer1.Panel1.Controls.Add($ADMTreeView)
    [void]$splitcontainer1.Panel2.Controls.Add($splitcontainer2) 
    $splitcontainer1.Size = '736, 515' 
    $splitcontainer1.SplitterDistance = 117 
    $splitcontainer1.SplitterWidth = 3 
    $splitcontainer1.TabIndex = 9      

    $menustrip1.ImageScalingSize = '20, 20'
    [void]$menustrip1.Items.Add($fileToolStripMenuItem)
    [void]$menustrip1.Items.Add($editToolStripMenuItem)
    [void]$menustrip1.Items.Add($toolsToolStripMenuItem1) 
    [void]$menustrip1.Items.Add($helpToolStripMenuItem)
    $menustrip1.Location = '0, 0'
    $menustrip1.Name = 'menustrip1'
    $menustrip1.Padding = '0, 0, 0, 0'
    $menustrip1.Size = '742, 21'
    $menustrip1.TabIndex = 10 
    $menustrip1.Text = 'menustrip1'    
    
    $contextmenustrip1.ImageScalingSize = '20, 20' 
    $contextmenustrip1.Name = 'contextmenustrip1' 
    $contextmenustrip1.Size = '61, 4'
    $logToolStrip.AutoSize = $False 
    
    $logToolStrip.Dock = 'None'
    $logToolStrip.ImageScalingSize = '20, 20'
    $logToolStrip.Location = '52, 5'
    $logToolStrip.Name = 'logToolStrip'
    $logToolStrip.Padding = '8, 3, 0, 3'
    $logToolStrip.Size = '201, 30'
    $logToolStrip.TabIndex = 6 
    $logToolStrip.Text = 'Clear Log'
    
    $ADMTreeView.Dock = 'Fill'
    $ADMTreeView.Font = $TreeViewFont    
    $ADMTreeView.Location = '0, 0'
    $ADMTreeView.Margin = '5, 5, 5, 5'
    $ADMTreeView.Name = 'ADMTreeView'
    $ADMTreeView.Size = '117, 515'
    $ADMTreeView.TabIndex = 0
    $ADMTreeView.add_AfterExpand($ADMTreeView_AfterExpand) 
    $ADMTreeView.add_AfterSelect($ADMTreeView_AfterSelect) 
    $ADMTreeView.add_MouseClick($ADMTreeView_MouseClick)
    
    $splitcontainer2.Dock = 'Fill'
    $splitcontainer2.Location = '0, 0'
    $splitcontainer2.Margin = '4, 4, 4, 4'
    $splitcontainer2.Name = 'splitcontainer2'
    $splitcontainer2.Orientation = 'Horizontal'
    [void]$splitcontainer2.Panel1.Controls.Add($datagridviewResults)
    [void]$splitcontainer2.Panel2.Controls.Add($logDataGridView)
    $splitcontainer2.Panel1.Name = "Panel1"        
    $splitcontainer2.Panel2.Name = "Panel2"    
    $splitcontainer2.Size = '616, 515'
    $splitcontainer2.SplitterDistance = 330 
    $splitcontainer2.SplitterWidth = 5 
    $splitcontainer2.TabIndex = 1
    $datagridviewResults.AllowUserToOrderColumns = $True    
    $datagridviewResults.ColumnHeadersDefaultCellStyle = $DGVHeaderStyle 
    $datagridviewResults.ColumnHeadersHeightSizeMode = 'AutoSize'    
    $datagridviewResults.DefaultCellStyle = $DGVCellStyle
    $datagridviewResults.Dock = 'Fill'
    $datagridviewResults.EnableHeadersVisualStyles = $False 
    $datagridviewResults.Location = '0, 0'
    $datagridviewResults.Margin = '2, 3, 2, 3'
    $datagridviewResults.Name = 'datagridviewResults'
    $datagridviewResults.RowHeadersVisible = $False 
    $datagridviewResults.RowTemplate.Height = 24 
    $datagridviewResults.Size = '616, 330'
    $datagridviewResults.TabIndex = 1
    $datagridviewResults.add_CellFormatting($datagridviewResults_CellFormatting) 
    $logDataGridView.AutoSizeColumnsMode = 'AllCells'
    $logDataGridView.ColumnHeadersDefaultCellStyle = $DGVHeaderStyle
    $logDataGridView.ColumnHeadersHeightSizeMode = 'AutoSize'
    [void]$logDataGridView.Columns.Add($Time)
    [void]$logDataGridView.Columns.Add($Type)
    [void]$logDataGridView.Columns.Add($Line)
    [void]$logDataGridView.Columns.Add($Message)
    $logDataGridView.DefaultCellStyle = $DGVCellStyle
    $logDataGridView.Dock = 'Fill'
    $logDataGridView.EnableHeadersVisualStyles = $False 
    
    $logDataGridView.Location = '0, 0'
    $logDataGridView.Margin = '2, 3, 2, 3'
    $logDataGridView.Name = 'logDataGridView'
    $logDataGridView.RowHeadersBorderStyle = 'None'
    $logDataGridView.RowHeadersVisible = $False 
    $logDataGridView.RowTemplate.Height = 24 
    $logDataGridView.Size = '616, 180'
    $logDataGridView.TabIndex = 11
    $logDataGridView.add_CellFormatting($dataGridviewResults_CellFormatting)
    $Time.HeaderText = 'Time'
    $Time.Name = 'Time'
    $Time.Width = 55
    $Type.HeaderText = 'Type'
    $Type.Name = 'Type'
    $Type.Width = 56
    $Line.HeaderText = 'Line'
    $Line.Name = 'Line'
    $Line.Width = 52
    $Message.HeaderText = 'Message'
    $Message.Name = 'Message'
    $Message.Width = 75
    [void]$helpToolStripMenuItem.DropDownItems.Add($twikiToolStripMenuItem) 
    $helpToolStripMenuItem.Font = $ToolStripFont
    
    $helpToolStripMenuItem.Name = 'helpToolStripMenuItem'
    $helpToolStripMenuItem.Size = '41, 15'
    $helpToolStripMenuItem.Text = '&Help'
    $helpToolStripMenuItem.add_DropDownClosed($toolStripMenuItem_MouseLeave)
    $helpToolStripMenuItem.add_DropDownOpened($toolStripMenuItem_MouseHover)
    $helpToolStripMenuItem.add_MouseEnter($toolStripMenuItem_MouseHover)
    $helpToolStripMenuItem.add_MouseLeave($toolStripMenuItem_MouseLeave)
    [void]$fileToolStripMenuItem.DropDownItems.Add($changeADMToolStripMenuItem)
    [void]$fileToolStripMenuItem.DropDownItems.Add($exitToolStripMenuItem)
    $fileToolStripMenuItem.Font = $ToolStripFont
    
    $fileToolStripMenuItem.Name = 'fileToolStripMenuItem'
    $fileToolStripMenuItem.Size = '35, 15'
    $fileToolStripMenuItem.Text = '&File'
    $fileToolStripMenuItem.add_DropDownClosed($toolStripMenuItem_MouseLeave)
    $fileToolStripMenuItem.add_DropDownOpened($toolStripMenuItem_MouseHover)
    $fileToolStripMenuItem.add_MouseEnter($toolStripMenuItem_MouseHover)
    $fileToolStripMenuItem.add_MouseLeave($toolStripMenuItem_MouseLeave)     
    [void]$editToolStripMenuItem.DropDownItems.Add($prefsToolStripMenuItem)
    $editToolStripMenuItem.Font = $ToolStripFont
    
    $editToolStripMenuItem.Name = 'viewToolStripMenuItem'
    $editToolStripMenuItem.Size = '35, 15'
    $editToolStripMenuItem.Text = '&Edit'
    $editToolStripMenuItem.add_DropDownClosed($toolStripMenuItem_MouseLeave)
    $editToolStripMenuItem.add_DropDownOpened($toolStripMenuItem_MouseHover)
    $editToolStripMenuItem.add_MouseEnter($toolStripMenuItem_MouseHover)
    $editToolStripMenuItem.add_MouseLeave($toolStripMenuItem_MouseLeave)  
    
    [void]$toolsToolStripMenuItem1.DropDownItems.Add($configViewerToolStripMenuItem)
    [void]$toolsToolStripMenuItem1.DropDownItems.Add($checkoutADCsToolStripMenuItem)
    [void]$toolsToolStripMenuItem1.DropDownItems.Add($getADCResourcesToolStripMenuItem) 
    [void]$toolsToolStripMenuItem1.DropDownItems.Add($importDevicesToolStripMenuItem)
    [void]$toolsToolStripMenuItem1.DropDownItems.Add($logViewerToolStripMenuItem) 

    $toolsToolStripMenuItem1.Font = $ToolStripFont     
    $toolsToolStripMenuItem1.Name = 'toolsToolStripMenuItem1' 
    $toolsToolStripMenuItem1.Size = '45, 15'
    $toolsToolStripMenuItem1.Text = '&Tools'
    $toolsToolStripMenuItem1.add_DropDownClosed($toolStripMenuItem_MouseLeave) 
    $toolsToolStripMenuItem1.add_DropDownOpened($toolStripMenuItem_MouseHover) 
    $toolsToolStripMenuItem1.add_MouseEnter($toolStripMenuItem_MouseHover) 
    $toolsToolStripMenuItem1.add_MouseLeave($toolStripMenuItem_MouseLeave) 
    
    
    $exitToolStripMenuItem.Name = 'exitToolStripMenuItem'
    $exitToolStripMenuItem.Size = '138, 22'
    $exitToolStripMenuItem.Text = 'E&xit'
    $exitToolStripMenuItem.add_Click($exitToolStripMenuItem_Click) 
	$exitToolStripMenuItem.add_MouseEnter($toolStripMenuItem_MouseHover)
    $exitToolStripMenuItem.add_MouseLeave($toolStripMenuItem_MouseLeave) 
    $exitToolStripMenuItem.add_MouseHover($toolStripMenuItem_MouseHover)     
    
    
    $twikiToolStripMenuItem.Name = 'twikiToolStripMenuItem'
    $twikiToolStripMenuItem.Size = '159, 22'
    $twikiToolStripMenuItem.Text = 'About ADMPower'
	$twikiToolStripMenuItem.add_MouseEnter($toolStripMenuItem_MouseHover)
    $twikiToolStripMenuItem.add_Click($twikiToolStripMenuItem_Click) 
    $twikiToolStripMenuItem.add_MouseLeave($toolStripMenuItem_MouseLeave) 
    $twikiToolStripMenuItem.add_MouseHover($toolStripMenuItem_MouseHover) 
    
    $changeADMToolStripMenuItem.Name = 'changeADMToolStripMenuItem' 
    $changeADMToolStripMenuItem.Size = '138, 22'
    $changeADMToolStripMenuItem.Text = 'Change ADM'
	$changeADMToolStripMenuItem.add_MouseEnter($toolStripMenuItem_MouseHover) 
    $changeADMToolStripMenuItem.add_Click($changeADMToolStripMenuItem_Click) 
    $changeADMToolStripMenuItem.add_MouseLeave($toolStripMenuItem_MouseLeave) 
    $changeADMToolStripMenuItem.add_MouseHover($toolStripMenuItem_MouseHover) 
    
    $prefsToolStripMenuItem.Name = 'prefsToolStripMenuItem' 
    $prefsToolStripMenuItem.Size = '138, 22'
    $prefsToolStripMenuItem.Text = 'Preferences'
	$prefsToolStripMenuItem.add_MouseEnter($toolStripMenuItem_MouseHover) 
    $prefsToolStripMenuItem.add_Click($prefsToolStripMenuItem_Click) 
    $prefsToolStripMenuItem.add_MouseLeave($toolStripMenuItem_MouseLeave) 
    $prefsToolStripMenuItem.add_MouseHover($toolStripMenuItem_MouseHover) 
   
    $logViewerToolStripMenuItem.Name = 'logViewerToolStripMenuItem' 
    $logViewerToolStripMenuItem.Size = '170, 22'
    $logViewerToolStripMenuItem.Text = '&Log Viewer'
    $logViewerToolStripMenuItem.add_Click($logViewerToolStripMenuItem_Click) 
    $logViewerToolStripMenuItem.add_MouseEnter($toolStripMenuItem_MouseHover) 
    $logViewerToolStripMenuItem.add_MouseLeave($toolStripMenuItem_MouseLeave) 
    $logViewerToolStripMenuItem.add_MouseHover($toolStripMenuItem_MouseHover) 
    
    $importDevicesToolStripMenuItem.Name = 'importDevicesToolStripMenuItem'
    $importDevicesToolStripMenuItem.Size = '170, 22'
    $importDevicesToolStripMenuItem.Text = 'Import Devices'
    $importDevicesToolStripMenuItem.add_Click($importDevicesToolStripMenuItem_Click)
    $importDevicesToolStripMenuItem.add_MouseEnter($toolStripMenuItem_MouseHover)
    $importDevicesToolStripMenuItem.add_MouseLeave($toolStripMenuItem_MouseLeave)
    $importDevicesToolStripMenuItem.add_MouseHover($toolStripMenuItem_MouseHover)
    
    $configViewerToolStripMenuItem.Name = 'configViewerToolStripMenuItem'
    $configViewerToolStripMenuItem.Size = '170, 22'
    $configViewerToolStripMenuItem.Text = 'Config Viewer'
    $configViewerToolStripMenuItem.add_Click($configViewerToolStripMenuItem_Click)
    $configViewerToolStripMenuItem.add_MouseEnter($toolStripMenuItem_MouseHover)
    $configViewerToolStripMenuItem.add_MouseLeave($toolStripMenuItem_MouseLeave)
    $configViewerToolStripMenuItem.add_MouseHover($toolStripMenuItem_MouseHover) 
    
    $checkoutADCsToolStripMenuItem.Name = 'checkoutADCsToolStripMenuItem' 
    $checkoutADCsToolStripMenuItem.Size = '170, 22'
    $checkoutADCsToolStripMenuItem.Text = 'Checkout ADC(s)'
    $checkoutADCsToolStripMenuItem.add_Click($checkoutADCsToolStripMenuItem_Click) 
    $checkoutADCsToolStripMenuItem.add_MouseEnter($toolStripMenuItem_MouseHover) 
    $checkoutADCsToolStripMenuItem.add_MouseLeave($toolStripMenuItem_MouseLeave) 
    $checkoutADCsToolStripMenuItem.add_MouseHover($toolStripMenuItem_MouseHover)
    
    $getADCResourcesToolStripMenuItem.Name = 'getADCResourcesToolStripMenuItem' 
    $getADCResourcesToolStripMenuItem.Size = '170, 22' 
    $getADCResourcesToolStripMenuItem.Text = '&Get ADC Resources'
    $getADCResourcesToolStripMenuItem.add_Click($getADCResourcesToolStripMenuItem_Click) 
	$getADCResourcesToolStripMenuItem.add_MouseEnter($toolStripMenuItem_MouseHover) 
    $getADCResourcesToolStripMenuItem.add_MouseLeave($toolStripMenuItem_MouseLeave) 
    $getADCResourcesToolStripMenuItem.add_MouseHover($toolStripMenuItem_MouseHover)
    
    Set-MainFormColor

    $splitcontainer2.ResumeLayout()
    $menustrip1.ResumeLayout()
    $splitcontainer1.ResumeLayout()
    $tablelayoutpanel1.ResumeLayout()
    $formMain.ResumeLayout()
    $InitialFormWindowState = $formMain.WindowState
    $formMain.add_Load($Form_StateCorrection_Load)
    $formMain.add_FormClosed($Form_Cleanup_FormClosed)
    $formMain.add_Closing($Form_StoreValues_Closing)
	return $formMain.ShowDialog()
}
function Show-StartupParams
{      
    $startupInputs = New-Object 'System.Windows.Forms.Form'
    $picturebox2 = New-Object 'System.Windows.Forms.PictureBox'
    $checkboxSaveOptions = New-Object 'System.Windows.Forms.CheckBox'
    $checkboxUseHTTPS = New-Object 'System.Windows.Forms.CheckBox'
    $panel1 = New-Object 'System.Windows.Forms.Panel'    
    $labelADMHost = New-Object 'System.Windows.Forms.Label'
    $ADMHostInput = New-Object 'System.Windows.Forms.TextBox'
    $labelADMUser = New-Object 'System.Windows.Forms.Label'
    $ADMUser = New-Object 'System.Windows.Forms.TextBox'    
    $buttonGo = New-Object 'System.Windows.Forms.Button'
    $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	
    $startupInputs_Load = {
        $startupInputs.Text = "ADMPower v$($global:Version) - Connect to ADM"        
        $ADMHostInput.Text = $global:ADMHost  
        $checkboxUseHTTPS.Checked = $true    
        $ADMUser.Text = $global:ADMUser
        $global:Cancel = $true
    }
    #region Control Helper Functions    
    $buttonGo_Click={   
        $global:Cancel = $false     
        if ($checkboxSaveOptions.Checked -eq $true)
        {
            foreach ($Property in $RegistryValues)
            {
                switch ($Property)
                {
                    "ADMHost"
                    {
                        if ($ADMHostInput.Text.Length -gt 1)
                        {
                            $Value = $ADMHostInput.Text
                        }
                        else
                        {
                            $PopUp = New-Object -ComObject wscript.shell
                            $Answer = $PopUp.popup("Please specify a Target ADM host", 0, "Specify an ADM") 
                            $ADMHostInput.Focus()
                            $Value = "Failed"
                        }
                    }
                    "UseSSL"
                    {
                        $Value = $checkboxUseHTTPS.CheckState
                    }    
                    "BrowsePath"
                    {
                        $Value = $global:BrowsePath
                    }
                    "ADMUser"
                    {
                        $Value = $ADMUser.Text
                    }
                    "FGColor"
                    {
                        $Value = $global:FGColor
                    }
                    "HeadingColor"
                    {
                        $Value = $global:HeadingColor
                    }
                    "BGColor"
                    {
                        $Value = $global:BGColor
                    }
                    "BGColor2"
                    {
                        $Value = $global:BGColor2
                    }
                }
                if ($Value -ne "Failed")
                {
                    $global:Eject = $false
                    $ExistingValues = Get-Registry $RegistryPath 
                    if ($Property -in $ExistingValues.property)
                    {
                        try
                        {
                            Set-ItemProperty -Path $RegistryPath -Name $Property -Value $Value 
                            Set-Variable -Name $Property -Value $Value -Scope Global 
                            Write-Log "Info" (Get-LineNumber) "Set $Property in $RegistryPath"
                        }
                        catch
                        {
                            Write-Log "Error" (Get-LineNumber) "Unable to set $Property in $RegistryPath : $_.Exception"
                        }
                    }
                    else
                    {
                        try
                        {
                            New-ItemProperty -Path $RegistryPath -Name $Property -Value $Value 
                            Set-Variable -Name $Property -Value $Value -Scope Global 
                            Write-Log "Info" (Get-LineNumber) "Set $Property in $RegistryPath"
                        }
                        catch
                        {
                            Write-Log "Error" (Get-LineNumber) "Unable to set $Property in $RegistryPath : $_.Exception"
                        }
                    }
                }
            }
        } 
    } 
    $picturebox2_Click={
        Start $helpUrl
    }
    $Form_StateCorrection_Load=
    {
        $startupInputs.WindowState = $InitialFormWindowState
    }
    $Form_StoreValues_Closing=
    {
        $script:StartupParams_checkboxSaveOptions = $checkboxSaveOptions.Checked 
        $script:StartupParams_checkboxUseHTTPS = $checkboxUseHTTPS.Checked         
        $script:StartupParams_ADMHostInput = $ADMHostInput.Text
        $script:StartupParams_ADMUser = $ADMUser.Text
        
    }
    $Form_Cleanup_FormClosed=
    {
        $buttonGo.remove_Click($buttonGo_Click)
        $startupInputs.remove_Load($startupInputs_Load)
        $startupInputs.remove_Load($Form_StateCorrection_Load)
        $startupInputs.remove_Closing($Form_StoreValues_Closing)
        $startupInputs.remove_FormClosed($Form_Cleanup_FormClosed)			
        
    }
    $startupInputs.SuspendLayout()
    $panel1.SuspendLayout()
    $startupInputs.Controls.Add($picturebox2)
    $startupInputs.Controls.Add($checkboxSaveOptions)
    $startupInputs.Controls.Add($checkboxUseHTTPS)
    $startupInputs.Controls.Add($panel1)
    $startupInputs.Controls.Add($labelADMHost)
    $startupInputs.Controls.Add($ADMHostInput)
    $startupInputs.Controls.Add($labelADMUser)
    $startupInputs.Controls.Add($ADMUser)
    $startupInputs.Controls.Add($buttonGo)
    $startupInputs.AcceptButton = $buttonGo 
    $startupInputs.AutoScaleDimensions = '6, 13'
    $startupInputs.AutoScaleMode = 'Font'
    $startupInputs.ClientSize = '318, 158'
    $startupInputs.Icon = [System.Convert]::FromBase64String($IconData)
    $startupInputs.Margin = '4, 4, 4, 4'
    $startupInputs.MaximizeBox = $False 
    $startupInputs.MaximumSize = '334, 197'
    $startupInputs.MinimizeBox = $False 
    $startupInputs.MinimumSize = '334, 197'
    $startupInputs.Name = 'startupInputs'
    $startupInputs.Startposition = 'CenterScreen'
    $startupInputs.Text = 'Connect to ADM'
    $startupInputs.add_Load($startupInputs_Load)
    $startupInputs.BackColor = 'White'
    $picturebox2.Location = '25, 75'
    $picturebox2.Name = 'picturebox2'
    $picturebox2.Size = '189, 70'
    $picturebox2.SizeMode = 'Stretchimage'
    $picturebox2.TabIndex = 14 
    $picturebox2.TabStop = $False
    $picturebox2.Image = [System.Convert]::FromBase64String($LogoData)
    $picturebox2.add_Click($picturebox2_Click)
    $checkboxSaveOptions.Checked = $True 
    $checkboxSaveOptions.CheckState = 'Checked' 
    $checkboxSaveOptions.Location = '193, 6' 
    $checkboxSaveOptions.Name = 'checkboxSaveOptions' 
    $checkboxSaveOptions.Size = '100, 33' 
    $checkboxSaveOptions.tabIndex = 12 
    $checkboxSaveOptions.Text = '&Save Options' 
    $checkboxSaveOptions.UseCompatibleTextRendering = $True 
    $checkboxSaveOptions.UseVisualStyleBackColor = $True 
    $checkboxUseHTTPS.Checked = $True 
    $checkboxUseHTTPS.CheckState = 'Checked' 
    $checkboxUseHTTPS.Location = '193, 36'
    $checkboxUseHTTPS.Name = 'checkboxUseHTTPS' 
    $checkboxUseHTTPS.Size = '100, 33'
    $checkboxUseHTTPS.tabIndex = 11 
    $checkboxUseHTTPS.Text = '&Use HTTPS'
    $checkboxUseHTTPS.UseCompatibleTextRendering = $True 
    $checkboxUseHTTPS.UseVisualStyleBackColor = $True     
    $panel1.Controls.Add($labelADMUser)
    $panel1.Controls.Add($ADMUser)    
    $panel1.Location = '10, 32'
    $panel1.Name = 'panel1'
    $panel1.Size = '304, 53'
    $panel1.tabIndex = 9 
    $labelADMHost.AutoSize = $True 
    $labelADMHost.Location = '121, 14'
    $labelADMHost.Margin = '2, 0, 2, 0'
    $labelADMHost.Name = 'labelADMHost'
    $labelADMHost.Size = '56, 17'
    $labelADMHost.tabIndex = 7 
    $labelADMHost.Text = 'ADM Host'
    $labelADMHost.UseCompatibleTextRendering = $True 
    $ADMHostInput.Location = '15, 12' 
    $ADMHostInput.Margin = '2, 2, 2, 2'
    $ADMHostInput.Name = 'ADMHostInput'
    $ADMHostInput.Size = '100, 20'
    $ADMHostInput.tabIndex = 2 
    $ADMUser.Location = '5, 10' 
    $ADMUser.Margin = '2, 2, 2, 2'
    $ADMUser.Name = 'ADMUser'
    $ADMUser.Size = '100, 20'
    $ADMUser.tabIndex = 6 
    $labelADMUser.AutoSize = $True 
    $labelADMUser.Location = '111, 14'
    $labelADMUser.Margin = '5, 5, 5, 5'
    $labelADMUser.Name = 'labelADMUser'
    $labelADMUser.Size = '75, 24'
    $labelADMUser.tabIndex = 8 
    $labelADMUser.Text = 'ADM User'
    $labelADMUser.UseCompatibleTextRendering = $True    
    $buttonGo.Anchor = 'Bottom, Right'
    $buttonGo.DialogResult = 'OK'
    $buttonGo.Font = 'Calibri, 10.8pt, style=Bold' 
    $buttonGo.Location = '240, 100'
    $buttonGo.Name = 'buttonGo'
    $buttonGo.Size = '51, 26'
    $buttonGo.tabIndex = 0 
    $buttonGo.Text = '&Go!'
    $buttonGo.UseCompatibleTextRendering = $True 
    $buttonGo.UseVisualStyleBackColor = $True 
    $buttonGo.add_Click($buttonGo_Click)
    $panel1.ResumeLayout()
    $startupInputs.ResumeLayout()
    $InitialFormWindowState = $startupInputs.WindowState 
    $startupInputs.add_Load($Form_StateCorrection_Load) 
    $startupInputs.add_FormClosed($Form_Cleanup_FormClosed) 
    $startupInputs.add_Closing($Form_StoreValues_Closing) 
    return $startupInputs.ShowDialog()
}
function Show-Select-Object
{
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formSelectAglobalSelectO = New-Object 'System.Windows.Forms.Form'
    $buttonCancel = New-Object 'System.Windows.Forms.Button'
    $applyButton = New-Object 'System.Windows.Forms.Button'
    $labelSelectAglobalSelectO = New-Object 'System.Windows.Forms.Label'
    $objectDatagridview = New-Object 'System.Windows.Forms.DataGridView'
    $objectListbox = New-Object 'System.Windows.Forms.ListBox'
    $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
    $formSelectAglobalSelectO_Load={
        Update-ListBox $objectListbox -Items (Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType $global:SelectObject).$global:SelectObject "name"
        Set-Variable -Name NewItem -Value $null -Scope Global
    }
    function Submit
    {
        if ($objectListbox.SelectedItem -eq $null)
        {
            $PopUp = New-Object -ComObject wscript.shell
            $Answer = $PopUp.popup("Please select a $($global:SelectObject)", 0, "Select a $($global:SelectObject)")
        }
        else
        {
            Set-Variable -Name NewItem -Value $objectListbox.SelectedItem -Scope Global 
            $formSelectAglobalSelectO.Close()
        }
    }
    $objectListbox_SelectedIndexChanged={
        [hashtable]$Filter = @{ name = $objectListbox.SelectedItem.name }
        NitroTo-DataGridView $global:SelectObject $objectDatagridview $NitroColumns.$global:SelectObject $Filter
    }
    $buttonCancel_Click={
        $formSelectAglobalSelectO.Close()
    }
    $applyButton_Click={
        Submit
    }
    $objectListbox_DoubleClick={
        Submit
    }
    $Form_StateCorrection_Load=
    {
        $formSelectAglobalSelectO.WindowState = $InitialFormWindowState
    }
    $Form_StoreValues_Closing=
    {
        $script:Select_Object_objectDatagridview = $objectDatagridview.SelectedCells 
        $script:Select_Object_objectListbox = $objectListbox.SelectedItems
    }
    $Form_Cleanup_FormClosed=
    {
        $buttonCancel.remove_Click($buttonCancel_Click)
        $applyButton.remove_Click($applyButton_Click)
        $objectListbox.remove_SelectedIndexChanged($objectListbox_SelectedIndexChanged) 
        $objectListbox.remove_DoubleClick($objectListbox_DoubleClick) 
        $formSelectAglobalSelectO.remove_Load($formSelectAglobalSelectO_Load) 
        $formSelectAglobalSelectO.remove_Load($Form_StateCorrection_Load) 
        $formSelectAglobalSelectO.remove_Closing($Form_StoreValues_Closing) 
        $formSelectAglobalSelectO.remove_FormClosed($Form_Cleanup_FormClosed)
    }
    $FormSelectAglobalSelectO.SuspendLayout()
    $formSelectAglobalSelectO.Controls.Add($buttonCancel)
    $formSelectAglobalSelectO.Controls.Add($applyButton)
    $formSelectAglobalSelectO.Controls.Add($labelSelectAglobalSelectO) 
    $FormSelectAglobalSelectO.Controls.Add($objectDatagridview)
    $formSelectAglobalSelectO.Controls.Add($objectListbox)
    $formSelectAglobalSelectO.AutoScaleDimensions = '10, 20'
    $formSelectAglobalSelectO.AutoScaleMode = 'Font' 
    $formSelectAglobalSelectO.ClientSize = '620, 346'
    $FormSelectAglobalSelectO.Margin = '6, 6, 6, 6'
    $formSelectAglobalSelectO.Name = 'formSelectAglobalSelectO'
    $formSelectAglobalSelectO.ShowIcon = $False
    $formSelectAglobalSelectO.Text = "Select a $global:SelectObject"
    $formSelectAglobalSelectO.add_Load($formSelectAglobalSelectO_Load)
    $buttonCancel.Location = '378, 185'
    $buttonCancel.Margin = '5, 5, 5, 5'
    $buttonCancel.Name = 'buttonCancel'
    $buttonCancel.Size = '125, 35'
    $buttonCancel.TabIndex = 4 
    $buttonCancel.Text = '&Cancel'
    $buttonCancel.UseCompatibleTextRendering = $True 
    $buttonCancel.UseVisualStyleBackColor = $True 
    $buttonCancel.add_Click($buttonCancel_Click)
    $applyButton.Location = '242, 185'
    $applyButton.Margin = '5, 5, 5, 5'
    $applyButton.Name = 'applyButton'
    $applyButton.Size = '125, 35'
    $applyButton.TabIndex = 3 
    $applyButton.Text = '&Apply'
    $applyButton.UseCompatibleTextRendering = $True 
    $applyButton.UseVisualStyleBackColor = $True 
    $applyButton.add_Click($applyButton_Click)
    $labelSelectAglobalSelectO.Location = '249, 124'
    $labelSelectAglobalSelectO.Margin = '6, 0, 6, 0'
    $labelSelectAglobalSelectO.Name = 'labelSelectAglobalSelectO'
    $labelSelectAglobalSelectO.Size = '444, 66'
    $labelSelectAglobalSelectO.TabIndex = 2
    $labelSelectAglobalSelectO.Text = "Select a $global:SelectObject to apply to $global:TargetObject" 
    $labelSelectAglobalSelectO.UseCompatibleTextRendering = $True 
    $objectDatagridview.ColumnHeadersHeightSizeMode = 'AutoSize'
    $objectDatagridview.Location = '16, 229'
    $objectDatagridview.Margin = '5, 5, 5, 5'
    $objectDatagridview.Name = 'objectDatagridview'
    $objectDatagridview.RowTemplate.Height = 24
    $objectDatagridview.Size = '588, 102'
    $objectDatagridview.Tabindex = 1 
    $objectListbox.FormattingEnabled = $True 
    $objectListbox.ItemHeight = 20 
    $objectListbox.Location = '16, 15'
    $objectListbox.Margin = '6, 6, 6, 6'
    $objectListbox.Name = 'objectListbox'
    $objectListbox.Size = '215, 224'
    $objectListbox.TabIndex = 0
    $objectListbox.add_SelectedIndexChanged($objectListbox_SelectedIndexChanged) 
    $objectListbox.add_DoubleClick($objectListbox_DoubleClick) 
    $formSelectAglobalSelectO.ResumeLayout()
    $InitialFormWindowState = $formSelectAglobalSelectO.WindowState 
    $formSelectAglobalSelectO.add_Load($Form_StateCorrection_Load)
    $formSelectAglobalSelectO.add_FormClosed($Form_Cleanup_FormClosed) 
    $formSelectAglobalSelectO.add_Closing($Form_StoreValues_Closing) 
    return $formSelectAglobalSelectO.ShowDialog()
}
function Show-Add-Profile
{
    [System.Windows.Forms.Application]::EnableVisualStyles() 
    $formAddDeviceProfile = New-Object 'System.Windows.Forms.Form' 
    $labelSNMPCommunity = New-Object 'System.Windows.Forms.Label'
    $SNMPCommunity = New-Object 'System.Windows.Forms.TextBox'
    $labelPassword = New-Object 'System.Windows.Forms.Label'
    $labelUserName = New-Object 'System.Windows.Forms.Label'
    $labelProfileName = New-Object 'System.Windows.Forms.Label'
    $buttonCancel = New-Object 'System.Windows.Forms.Button'
    $password = New-Object 'System.Windows.Forms.TextBox'
    $userName = New-Object 'System.Windows.Forms.TextBox'
    $profileName = New-Object 'System.Windows.Forms.TextBox'
    $buttonAdd = New-Object 'System.Windows.Forms.Button'
    $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState' 
    $formAddDeviceProfile_Load={
        $userName.Text = $global:ADMUser
        $password.Text = $global:ADMPass
    }
    $buttonCancel_Click={
        $formAddDeviceProfile.Close()
    }
    $buttonAdd_Click={
        if ($profileName.Text.Length -lt 1)
        {
            try
            {
                $PopUp = New-Object -ComObject wscript.shell
                $Answer = $PopUp.popup("Please specify a profile name", 0, "Input a profile name")
            }
            catch
            {
                Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to create COM object: $_.Exception"
            }
        }
        else
        {
            $NewProfile = @{
                name = $profileName.Text 
                username = $userName.Text 
                password = $password.Text 
                httpport = "80"
                https_port = "443" 
                maxwaittimereboot = "1800" 
                snmpauthprotocol = "MD5" 
                snmpcommunity = $SNMPCommunity.Text 
                snmpprivprotocol = "DES" 
                snmpsecuritylevel = "NoAuthNoPriv" 
                snmpversion = "v2" 
                sshport = "22" 
                svm_ns_comm = "https" 
                type = "ns"
                use_global_setting_for_communication_with_ns = "true"
            }
            $Response = Invoke-ADMNitro -OperationMethod POST -ADMSession $global:ADMSession -ResourceType deviceprofile -Payload $NewProfile 
            if ($Response.message -eq "Done")
            {
                try
                {
                    $PopUp = New-Object -ComObject wscript.shell
                    $Answer = $PopUp.popup("Created $($profileName.Text) on $($global:ADMHost)", 0, "Created device profile")
                }
                catch
                {
                    Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to create COM object: $($_.Exception)"
                }
                Update-Node $global:ClickedNode 
                $formAddDeviceProfile.Close()
            }
            else
            {
                try
                {
                    $PopUp = New-Object -ComObject wscript.shell
                    $Answer = $PopUp.popup("Unable to add $($profileName.Text) because $($Response.message)", 0, "Unable to add device profile")
                }
                catch
                {
                    Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to create COM object: $($_.Exception)"
                }
            }
        }
    }
    $Form_StateCorrection_Load=
    {
        $formAddDeviceProfile.WindowState = $InitialFormWindowState
    }
    $Form_StoreValues_Closing=
    {
        $script:Add_Profile_SNMPCommunity = $SNMPCommunity.Text 
        $script:Add_Profile_password = $password.Text 
        $script:Add_Profile_userName = $userName.Text 
        $script:Add_Profile_profileName = $profileName.Text
    }
    $Form_Cleanup_FormClosed=
    {
        $buttonCancel.remove_Click($buttonCancel_Click)
        $buttonAdd.remove_Click($buttonAdd_Click)
        $formAddDeviceProfile.remove_Load($formAddDeviceProfile_Load) 
        $formAddDeviceProfile.remove_Load($Form_StateCorrection_Load) 
        $formAddDeviceProfile.remove_Closing($Form_StoreValues_Closing) 
        $formAddDeviceProfile.remove_FormClosed($Form_Cleanup_FormClosed)
    }
    $formAddDeviceProfile.SuspendLayout()
    $formAddDeviceProfile.Controls.Add($labelSNMPCommunity)
    $formAddDeviceProfile.Controls.Add($SNMPCommunity) 
    $formAddDeviceProfile.Controls.Add($labelPassword) 
    $formAddDeviceProfile.Controls.Add($labelUserName) 
    $formAddDeviceProfile.Controls.Add($labelProfileName) 
    $formAddDeviceProfile.Controls.Add($buttonCancel)
    $formAddDeviceProfile.Controls.Add($password)
    $formAddDeviceProfile.Controls.Add($userName)
    $formAddDeviceProfile.Controls.Add($profileName) 
    $formAddDeviceProfile.Controls.Add($buttonAdd) 
    $formAddDeviceProfile.AcceptButton = $buttonAdd 
    $formAddDeviceProfile.AutoScaleDimensions = '10, 20' 
    $formAddDeviceProfile.AutoScaleMode = 'Font'
    $formAddDeviceProfile.ClientSize = '342, 222'
    $formAddDeviceProfile.FormBorderStyle = 'FixedDialog' 
    $formAddDeviceProfile.Margin = '6, 6, 6, 6' 
    $formAddDeviceProfile.MaximizeBox = $False 
    $formAddDeviceProfile.MaximumSize = '348, 262'
    $formAddDeviceProfile.MinimizeBox = $False 
    $formAddDeviceProfile.MinimumSize = '348, 262' 
    $formAddDeviceProfile.Name = 'formAddDeviceProfile' 
    $formAddDeviceProfile.Startposition = 'CenterScreen' 
    $formAddDeviceProfile.Text = 'Add Device Profile' 
    $formAddDeviceProfile.add_Load($formAddDeviceProfile_Load) 
    $labelSNMPCommunity.AutoSize = $True 
    $labelSNMPCommunity.Location = '180, 124' 
    $labelSNMPCommunity.Margin = '6, 0, 6, 0' 
    $labelSNMPCommunity.Name = 'labelSNMPCommunity' 
    $labelSNMPCommunity.Size = '146, 24'
    $labelSNMPCommunity.TabIndex = 9 
    $labelSNMPCommunity.Text = 'SNMP Community' 
    $labelSNMPCommunity.UseCompatibleTextRendering = $True 
    $SNMPCommunity.Location = '8, 120'
    $SNMPCommunity.Margin = '6, 6, 6, 6'
    $SNMPCommunity.Name = 'SNMPCommunity'
    $SNMPCommunity.Size = '164, 26'
    $SNMPCommunity.TabIndex = 8 
    $labelPassword.AutoSize = $True 
    $labelPassword.Location = '180, 86'
    $labelPassword.Margin = '6, 0, 6, 0'
    $labelPassword.Name = 'labelPassword'
    $labelPassword.Size = '81, 24'
    $labelPassword.TabIndex = 7 
    $labelPassword.Text = 'Password'
    $labelPassword.UseCompatibleTextRendering = $True 
    $labelUserName.AutoSize = $True 
    $labelUserName.Location = '180, 49'
    $labelUserName.Margin = '6, 0, 6, 0'
    $labelUserName.Name = 'labelUserName'
    $labelUserName.Size = '92, 24'
    $labelUserName.TabIndex = 6 
    $labelUserName.Text = 'User Name'
    $labelUserName.UseCompatibleTextRendering = $True 
    $labelProfileName.AutoSize = $True 
    $labelProfileName.Location = '180, 13'
    $labelProfileName.Margin = '6, 0, 6, 0' 
    $labelProfileName.Name = 'labelProfileName' 
    $labelProfileName.Size = '104, 24'
    $labelProfileName.TabIndex = 5 
    $labelProfileName.Text = 'Profile Name'
    $labelProfileName.UseCompatibleTextRendering = $True 
    $buttonCancel.Anchor = 'Bottom, Right'
    $buttonCancel.DialogResult = 'OK'
    $buttonCancel.Location = '10, 167'
    $buttonCancel.Margin = '5, 5, 5, 5'
    $buttonCancel.Name = 'buttonCancel'
    $buttonCancel.Size = '125, 35'
    $buttonCancel.TabIndex = 4 
    $buttonCancel.Text = '&Cancel'
    $buttonCancel.UseCompatibleTextRendering = $True 
    $buttonCancel.UseVisualStyleBackColor = $True 
    $buttonCancel.add_Click($buttonCancel_Click)
    $password.Location = '8, 82'
    $password.Margin = '6, 6, 6, 6'
    $password.Name = 'password'
    $password.PasswordChar = '*'
    $password.Size = '164, 26'
    $password.TabIndex = 3 
    $userName.Location = '8, 46'
    $userName.Margin = '6, 6, 6, 6'
    $userName.Name = 'userName'
    $userName.Size = '164, 26'
    $userName.TabIndex = 2 
    $profileName.Location = '8, 9'
    $profileName.Margin = '6, 6, 6, 6'
    $profileName.Name = 'profileName'
    $profileName.Size = '164, 26'
    $profileName.TabIndex = 1 
    $buttonAdd.Anchor = 'Bottom, Right'
    $buttonAdd.DialogResult = 'OK'
    $buttonAdd.Location = '169, 167'
    $buttonAdd.Margin = '5, 5, 5, 5'
    $buttonAdd.Name = 'buttonAdd'
    $buttonAdd.Size = '125, 35'
    $buttonAdd.TabIndex = 0 
    $buttonAdd.Text = '&Add'
    $buttonAdd.UseCompatibleTextRendering = $True 
    $buttonAdd.UseVisualStyleBackColor = $True 
    $buttonAdd.add_Click($buttonAdd_Click)
    $formAddDeviceProfile.ResumeLayout()
    $InitialFormWindowState = $formAddDeviceProfile.WindowState 
    $formAddDeviceProfile.add_Load($Form_StateCorrection_Load)
    $formAddDeviceProfile.add_FormClosed($Form_Cleanup_FormClosed) 
    $formAddDeviceProfile.add_Closing($Form_StoreValues_Closing) 
    return $formAddDeviceProfile.ShowDialog()
}
function Show-Batch-Delete
{
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formDelete = New-Object 'System.Windows.Forms.Form'
    $listbox1 = New-Object 'System.Windows.Forms.ListBox'
    $buttonCancel = New-Object 'System.Windows.Forms.Button'
    $buttonDelete = New-Object 'System.Windows.Forms.Button'
    $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState' 
    $formDelete_Load={
        switch ($global:DeleteObject)
        {
            "config_template_temp"
            {
                $Filter = @{ template_file = "config_mgmt" }
                $Label = $global:ClickedNode.Tag.Split(',')[1]
            }
            {($_ -eq 'configuration_template') -or ($_ -eq 'config_job')}
            {
                $Filter = @{ is_inbuilt = "f" }
                $Label = $global:ClickedNode.Tag.Split(',')[1]
            }
            "managed_device"
            {
                $Filter = @{ is_managed = "t" }
                $Label = 'hostname'
            }
            "mps_datacenter"
            {
                $Filter = @{ is_managed = "t" }
                $Label = 'name'
            }
        }
        Update-ListBox $listbox1 -Items (Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType $global:DeleteObject -Filters $Filter).$global:DeleteObject $Label
    }
    $buttonDelete_Click={
        try
        {
            $PopUp = New-Object -ComObject wscript.shell
            $SelectedCount = $listbox1.SelectedItems.Count
            $Answer = $PopUp.popup("Delete $SelectedCount $($global:ClickedNode.Text) from $($global:ADMHost)?", 0, "Delete", 4)
            if ($Answer -eq 6)
            {
                $DeletedCount = 0
                if ($global:DeleteObject -in @('config_template_temp'))
                {
                    $KeyName = 'template_file'
                }
                else
                {
                    $KeyName = 'id'
                }
                foreach ($Item in $listbox1.SelectedItems)
                {   
                    $Response = Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod Delete -ResourceType $global:DeleteObject -ResourceName $Item.$KeyName
                    if ($Response.message -eq "Done")
                    {
                        $DeletedCount++
                    }
                    else
                    {
                        try
                        {
                            $PopUp = New-Object -ComObject wscript.shell
                            $Answer = $PopUp.popup("Unable to delete $($profileName.Text) because $($Response.message)", 0, "Unable to add device profile")
                        }
                        catch
                        {
                            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to create COM object: $($_.Exception)"
                        }
                    }
                }
                try
                {
                    $PopUp = New-Object -ComObject wscript.shell
                    $Answer = $PopUp.popup("Deleted $DeletedCount of $SelectedCount $($global:ClickedNode.Text)", 0, "Deleted $DeletedCount of $SelectedCount $($global:ClickedNode.Text)")
                }
                catch
                {
                    Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to create COM object: $($_.Exception)"
                }
                if ($global:ClickedNode.Text -eq "Inventory")
                {
                    foreach ($Node in $global:ClickedNode.Nodes)
                    {
                        Update-Node $Node
                    }
                }
                else { Update-Node $global:ClickedNode }
            }
        }
        catch
        {
            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to create COM object: $($_.Exception)"
        }
    }
    $buttonCancel_Click={
        $formDelete.Close()
    }
    $Form_StateCorrection_Load=
    {
        $formDelete.WindowState = $InitialFormWindowState
    }
    $Form_StoreValues_Closing=
    {
        $script:Batch_Delete_listbox1 = $listbox1.SelectedItems
    }
    $Form_Cleanup_FormClosed=
    {
        $buttonCancel.remove_Click($buttonCancel_Click) 
        $buttonDelete.remove_Click($buttonDelete_Click)
        $formDelete.remove_Load($formDelete_Load)
        $formDelete.remove_Load($Form_StateCorrection_Load) 
        $formDelete.remove_Closing($Form_StoreValues_Closing)
        $formDelete.remove_FormClosed($Form_Cleanup_FormClosed)
    }
    $formDelete.SuspendLayout()
    $formDelete.Controls.Add($listbox1)
    $formDelete.Controls.Add($buttonCancel)
    $formDelete.Controls.Add($buttonDelete)
    $formDelete.AcceptButton = $buttonDelete 
    $formDelete.AutoScaleDimensions = '10, 20'
    $formDelete.AutoScaleMode = 'Font'
    $formDelete.ClientSize = '335, 550'
    $formDelete.Icon = [System.Convert]::FromBase64String($IconData)
    $formDelete.FormBorderStyle = 'FixedDialog'
    $formDelete.Margin = '6, 6, 6, 6'
    $formDelete.MaximizeBox = $False
    $formDelete.MinimizeBox = $False 
    $formDelete.Name = 'formDelete'
    $formDelete.Startposition = 'CenterScreen'
    $formDelete.Text = 'Delete'        
    $formDelete.add_Load($formDelete_Load)
    $listbox1.FormattingEnabled = $True 
    $listbox1.ItemHeight = 20 
    $listbox1.Location = '19, 15'
    $listbox1.Margin = '6, 6, 6, 6'
    $listbox1.Name = 'listbox1'
    $listbox1.SelectionMode = 'MultiExtended' 
    $listbox1.Size = '300, 465'
    $listbox1.Sorted = $True 
    $listbox1.TabIndex = 2 
    $buttonCancel.Location = '30, 500'
    $buttonCancel.Margin = '5, 5, 5, 5' 
    $buttonCancel.Name = 'buttonCancel' 
    $buttonCancel.Size = '105, 35'
    $buttonCancel.TabIndex = 1 
    $buttonCancel.Text = '&Cancel'
    $buttonCancel.UseCompatibleTextRendering = $True 
    $buttonCancel.UseVisualStyleBackColor = $True 
    $buttonCancel.add_Click($buttonCancel_Click) 
    $buttonDelete.Anchor = 'Bottom, Right' 
    $buttonDelete.DialogResult = 'OK'
    $buttonDelete.Location = '180, 500'
    $buttonDelete.Margin = '5, 5, 5, 5'
    $buttonDelete.Name = 'buttonDelete' 
    $buttonDelete.Size = '105, 35'
    $buttonDelete.TabIndex = 0 
    $buttonDelete.Text = '&Delete'
    $buttonDelete.UseCompatibleTextRendering = $True 
    $buttonDelete.UseVisualStyleBackColor = $True 
    $buttonDelete.add_Click($buttonDelete_Click) 
    $formDelete.ResumeLayout()
    $InitialFormWindowState = $formDelete.WindowState 
    $formDelete.add_Load($Form_StateCorrection_Load)
    $formDelete.add_FormClosed($Form_Cleanup_FormClosed) 
    $formDelete.add_Closing($Form_StoreValues_Closing) 
    return $formDelete.ShowDialog()
}
function Show-Log-Viewer
{
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formMain = New-Object 'System.Windows.Forms.Form'
    $tablelayoutpanel1 = New-Object 'System.Windows.Forms.TableLayoutPanel' 
    $splitcontainer1 = New-Object 'System.Windows.Forms.SplitContainer' 
    $logViewer = New-Object 'System.Windows.Forms.DataGridView'
    $splitcontainer2 = New-Object 'System.Windows.Forms.SplitContainer'
    $logType = New-Object 'System.Windows.Forms.ComboBox'
    $textboxSearch = New-Object 'System.Windows.Forms.TextBox'
    $buttonSearch = New-Object 'System.Windows.Forms.Button'
    $buttonRefresh = New-Object 'System.Windows.Forms.Button'
    $labelTotalEvents = New-Object 'System.Windows.Forms.Label'
    $totalEvents = New-Object 'System.Windows.Forms.Label'
    $progressbar1 = New-Object 'System.Windows.Forms.ProgressBar' 
    $labelMaxResults = New-Object 'System.Windows.Forms.Label'
    $maxEvents = New-Object 'System.Windows.Forms.TextBox'
    $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState' 
    function populateComboBox($comboBox, $column)
    {
        foreach ($item in $column)
        {
            $comboBox.Items.Add($item)
        }
    }
    function SearchGrid()
    {
        $RowIndex = 0; $ColumnIndex = 0
        $seachString = $textboxSearch.Text 
        if ($seachString -eq "")
        {
            return
        }
        if ($logViewer.SelectedCells.Count -ne 0)
        {
            $startCell = $logViewer.SelectedCells[0];
            $RowIndex = $startCell.RowIndex
            $startCell = $logViewer.SelectedCells[0];
            $RowIndex = $startCell.RowIndex 
            $ColumnIndex = $startCell.ColumnIndex + 1
        }
        $columnCount = $logViewer.ColumnCount
        $rowCount = $logViewer.RowCount
        for (; $RowIndex -lt $rowCount; $RowIndex++)
        {
            $Row = $logViewer.Rows[$RowIndex]
            for (; $ColumnIndex -lt $columnCount; $ColumnIndex++)
            {
                $cell = $Row.Cells[$ColumnIndex]
                if ($null -ne $cell.Value -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
                {
                    $logViewer.CurrentCell = $cell 
                    return
                }
            }
            $ColumnIndex = 0
        }
        $logViewer.CurrentCell = $null
        [void][System.Windows.Forms.MessageBox]::Show("The search has reached the end of the grid.", "String not Found")
    }
    function UpdateGrid
    {
        $Arguments = @{
            pagesize	= $maxEvents.Text
            pageno	= "1"
        }
        $jobVars = @{
            ADMSession	= $global:ADMSession
            OperationMethod =	"GET"
            ResourceType	=	$logType.SelectedItem
            Arguments	=	$Arguments
            Logging	=	$false
        }
        $NitroObject = (Start-BackgroundJob -Job ${Function:Invoke-ADMNitro} -jobVariables $jobVars -progressBar $progressbar1 -formLayout $formMain).($logType.SelectedItem)
        $jobVars = @{
            InputObject = $NitroObject
            Includes = $NitroColumns.($logType.SelectedItem)
        }
        $NitroTable = Start-BackgroundJob -Job ${Function:ConvertTo-DataTable} -jobvariables $jobVars -progressBar $progressbar1 -formLayout $formMain
        Update-DataGridView -DataGridView $logViewer -Item $NitroTable -AutoSizeColumns DisplayedCells 
        if ($logViewer.Columns['starttime'])
        {
            $logViewer.Sort($logViewer.Columns['starttime'], 'Descending')
        }
        elseif ($logViewer.Columns['system_time'])
        {
            $logViewer.Sort($logViewer.Columns['system_time'], 'Descending')
        }
        $formMain.ResumeLayout()
    }
    $formMain_Load= {
        $comboVals = (
            ($logType, "task_log"),
            ($logType, "task_device_log"),
            ($logType, "task_command_log"),
            ($logType, "syslog_messages")
        )
        foreach ($pair in $comboVals)
        {
            populateComboBox $pair[0] $pair[1]
        }
    }
    $buttonSearch_Click={
        SearchGrid
    }
    $logViewer_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{ 
        $e = $_[0]
        if ($e.Button -eq 'Left')
        {
            if ($logViewer.DataSource -is [System.Data.DataTable])
            {
                $column = $logViewer.Columns[$_.ColumnIndex]
                $direction = [System.ComponentModel.ListSortDirection]::Ascending
                if ($column.HeaderCell.SortGlyphDirection -eq 'Descending')
                {
                    $direction = [System.ComponentModel.ListSortDirection]::Descending
                }
                $logViewer.Sort($logViewer.Columns[$_.ColumnIndex], $direction)
            }
        }
        if ($e.Button -eq 'Right')
        {
            $column = $logViewer.Columns[$_.ColumnIndex] 
            foreach ($Row in $logViewer.Rows)
            {
                $Row
            }
        }
    }
    $textboxSearch_KeyUp=[System.Windows.Forms.KeyEventHandler]{
        if($_.KeyCode -eq 'Enter' -and $buttonSearch.Enabled)
        {
            SearchGrid
            $_.SuppressKeyPress = $true
        }
    }
    $buttonRefresh_Click={
        UpdateGrid
    }
    $logType_SelectedIndexChanged = {
        $FontStyle = New-Object System.Drawing.Font @($TypeFace, '7.8', [System.Drawing.FontStyle]::Regular) 
        $logType.Font = $FontStyle 
        $Arguments = @{
            pagesize	=	'25000'
            pageno	=	"1"
            count	=	"yes"
        }
        $jobVars = @{
            ADMSession	= $global:ADMSession
            OperationMethod =	"GET"
            ResourceType	=	$logType.SelectedItem
            Arguments	=	$Arguments
            Logging	=	$false
        }
        $LogCount = Invoke-ADMNitro -ADMSession $global:ADMSession -operationmethod get -Arguments $Arguments -resourcetype $logType.SelectedItem
        $LogCount = (Start-BackgroundJob -Job ${Function:Invoke-ADMNitro} -jobVariables $jobVars -progressBar $progressbar1 -formLayout $formMain).($logType.SelectedItem)
        $totalEvents.Text = $LogCount.__count
        UpdateGrid
    }
    $logViewer_CellcontentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{ 
        Set-Variable -Name ClickedDGV -Value $logViewer -Scope Global
    }
    $Form_StateCorrection_Load=
    {
        $formMain.WindowState = $InitialFormWindowState
    }
    $Form_StoreValues_Closing=
    {
        $script:Log_Viewer_logViewer = $logViewer.SelectedCells 
        $script:Log_Viewer_logType = $logType.Text
        $script:Log_Viewer_logType_SelectedItem = $logType.SelectedItem 
        $script:Log_Viewer_textboxSearch = $textboxSearch.Text 
        $script:Log_Viewer_maxEvents = $maxEvents.Text
    }
    $Form_Cleanup_FormClosed=
    {
        $formMain.remove_Load($formMain_Load)
        $logViewer.remove_CellcontentClick($logViewer_CellcontentClick)
        $logViewer.remove_ColumnHeaderMouseClick($logViewer_ColumnHeaderMouseClick) 
        $logType.remove_SelectedIndexChanged($logType_SelectedIndexChanged) 
        $buttonSearch.remove_Click($buttonSearch_Click)
        $buttonRefresh.remove_Click($buttonRefresh_Click)
        $formMain.remove_Load($Form_StateCorrection_Load)
        $formMain.remove_Closing($Form_StoreValues_Closing)
        $formMain.remove_FormClosed($Form_Cleanup_FormClosed)
    }
    $formMain.SuspendLayout()
    $tablelayoutpanel1.SuspendLayout()
    $splitcontainer1.SuspendLayout()
    $splitcontainer2.SuspendLayout()
    $formMain.Controls.Add($tablelayoutpanel1)
    $formMain.AcceptButton = $buttonRefresh 
    $formMain.AutoScaleDimensions = '10, 20'
    $formMain.AutoScaleMode = 'Font'
    $formMain.Icon = [System.Convert]::FromBase64String($IconData)
    $formMain.ClientSize = '1750, 1100'
    $formMain.Margin = '6, 6, 6, 6'
    $formMain.Name = 'formMain'
    $formMain.Startposition = 'CenterScreen'
    $formMain.Text = 'ADM Log Viewer'
    $formMain.add_Load($formMain_Load)
    $formMain.ForeColor = $global:FGColor
    $formMain.BackColor = $global:BGColor
    $tablelayoutpanel1.Controls.Add($splitcontainer1, 0, 1)
    $tablelayoutpanel1.ColumnCount = 1
    $System_Windows_Forms_ColumnStyle_1 = New-Object 'System.Windows.Forms.ColumnStyle' ('Absolute', 1708) 
    [void]$tablelayoutpanel1.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_1)
    $tablelayoutpanel1.Dock = 'Fill'
    $tablelayoutpanel1.Location = '0, 0'
    $tablelayoutpanel1.Margin = '5, 5, 5, 5'
    $tablelayoutpanel1.Name = 'tablelayoutpanel1'
    $tablelayoutpanel1.RowCount = 2
    $System_Windows_Forms_RowStyle_2 = New-Object 'System.Windows.Forms.RowStyle'
    [void]$tablelayoutpanel1.RowStyles.Add($System_Windows_Forms_RowStyle_2)
    $System_Windows_Forms_RowStyle_3 = New-Object 'System.Windows.Forms.RowStyle' ('Percent', 100)
    [void]$tablelayoutpanel1.RowStyles.Add($System_Windows_Forms_RowStyle_3)
    $System_Windows_Forms_RowStyle_4 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 31)
    [void]$tablelayoutpanel1.RowStyles.Add($System_Windows_Forms_RowStyle_4)
    $tablelayoutpanel1.Size = '1708, 1086'
    $tablelayoutpanel1.TabIndex = 3 
    $splitcontainer1.Dock = 'Fill'
    $splitcontainer1.FixedPanel = 'panel1'
    $splitcontainer1.IsSplitterFixed = $True 
    $splitcontainer1.Location = '5, 5'
    $splitcontainer1.Margin = '5, 5, 5, 5'
    $splitcontainer1.Name = 'splitcontainer1'
    $splitcontainer1.BackColor = $global:BGColor2
    $splitcontainer1.Orientation = 'Horizontal'
    [void]$splitcontainer1.panel1.Controls.Add($splitcontainer2)
    [void]$splitcontainer1.Panel2.Controls.Add($logViewer)
    $splitcontainer1.Size = '1698, 1076'
    $splitcontainer1.SplitterDistance = 32 
    $splitcontainer1.SplitterWidth = 5 
    $splitcontainer1.TabIndex = 3
    $logViewer.ColumnHeadersDefaultCellStyle = $DGVHeaderStyle
    $logViewer.DefaultCellStyle = $DGVCellStyle
    $logViewer.AllowUserToAddRows = $False 
    $logViewer.AllowUserToDeleteRows = $False 
    $logViewer.EnableHeadersVisualStyles = $False 
    $logViewer.GridColor = '150, 150, 150'
    $logViewer.RowHeadersVisible = $False 
    $logViewer.Dock = 'Fill'
    $logViewer.Location = ' 0, 0'
    $logViewer.Margin = '5, 5, 5, 5'
    $logViewer.Name = 'logViewer'
    $logViewer.Readonly = $True 
    $logViewer.RowTemplate.Height = 24 
    $logViewer.Size = '1698, 1039'
    $logViewer.TabIndex = 2
    $logViewer.add_CellcontentClick($logViewer_CellcontentClick)
    $logViewer.add_ColumnHeaderMouseClick($logViewer_ColumnHeaderMouseClick) 
    $logViewer.ForeColor = $global:FGColor
    $logViewer.BackColor = $global:BGColor
    $splitcontainer2.Dock = 'Fill'
    $splitcontainer2.FixedPanel = 'panel1'
    $splitcontainer2.Location = '0, 0'
    $splitcontainer2.Margin = '5, 5, 5, 5'
    $splitcontainer2.Name = 'splitcontainer2'
    $splitcontainer2.BackColor = $global:BGColor2
    $splitcontainer2.ForeColor = $global:BGColor
    [void]$splitcontainer2.panel1.Controls.Add($logType)
    [void]$splitcontainer2.Panel2.Controls.Add($maxEvents)
    [void]$splitcontainer2.Panel2.Controls.Add($labelMaxResults)
    [void]$splitcontainer2.Panel2.Controls.Add($progressbar1)
    [void]$splitcontainer2.Panel2.Controls.Add($totalEvents)
    [void]$splitcontainer2.Panel2.Controls.Add($labelTotalEvents)
    [void]$splitcontainer2.Panel2.Controls.Add($buttonRefresh)
    [void]$splitcontainer2.Panel2.Controls.Add($buttonSearch)
    [void]$splitcontainer2.Panel2.Controls.Add($textboxSearch) 
    $splitcontainer2.Size = '1698, 32'
    $splitcontainer2.SplitterDistance = 144 
    $splitcontainer2.SplitterWidth = 1 
    $splitcontainer2.TabIndex = 0 
    $logType.Dock = 'Fill'
    $logType.Font = $FontStyle
    $logType.FormattingEnabled = $True 
    $logType.Location = '0, 0'
    $logType.Margin = '5, 5, 5, 5'
    $logType.Name = 'logType'
    $logType.Size = '144, 28'
    $logType.Margin = '5, 5, 5, 5'
    $logType.Name = 'logType'
    $logType.Size = '144, 28'
    $logType.TabIndex = 3 
    $logType.Text = 'Select a log..'
    $logType.add_SelectedIndexChanged($logType_SelectedIndexChanged) 
    $textboxSearch.Location = '5, 2'
    $textboxSearch.Margin = '5, 5, 5, 5'
    $textboxSearch.Name = 'textboxSearch'
    $textboxSearch.Size = '164, 26'
    $textboxSearch.TabIndex = 4 
    $buttonSearch.Location = '180, 1'
    $buttonSearch.Margin = '5, 5, 5, 5'
    $buttonSearch.Name = 'buttonSearch'
    $buttonSearch.Size = '81, 35'
    $buttonSearch.TabIndex = 5 
    $buttonSearch.Text = '&Search'
    $buttonSearch.ForeColor = $global:HeadingColor
    $buttonSearch.UseCompatibleTextRendering = $True
    $buttonSearch.UseVisualStyleBackColor = $True 
    $buttonSearch.add_Click($buttonSearch_Click)
    $buttonRefresh.Location = '271, 1'
    $buttonRefresh.Margin = '5, 5, 5, 5'
    $buttonRefresh.Name = 'buttonRefresh'
    $buttonRefresh.Size = '95, 35'
    $buttonRefresh.TabIndex = 6 
    $buttonRefresh.Text = '&Refresh'
    $buttonRefresh.UseCompatibleTextRendering = $True 
    $buttonRefresh.UseVisualStyleBackColor = $True 
    $buttonRefresh.add_Click($buttonRefresh_Click)
    $buttonRefresh.ForeColor = $global:HeadingColor
    $labelTotalEvents.AutoSize = $True
    $labelTotalEvents.ForeColor = $global:FGColor
    $labelTotalEvents.Font = $FontStyle
    $labelTotalEvents.Location = '375, 10'
    $labelTotalEvents.Margin = '5, 0, 5, 0'
    $labelTotalEvents.Name = 'labelTotalEvents'
    $labelTotalEvents.Size = '103, 23'
    $labelTotalEvents.TabIndex = 7 
    $labelTotalEvents.Text = 'Total Events:'
    $labelTotalEvents.UseCompatibleTextRendering = $True 
    $totalEvents.AutoSize = $True 
    $totalEvents.ForeColor = $global:FGColor
    $totalEvents.Location = '500, 10'
    $totalEvents.Margin = '5, 0, 5, 0'
    $totalEvents.Name = 'totalEvents'
    $totalEvents.Size = '0, 23'
    $totalEvents.TabIndex = 8
    $totalEvents.UseCompatibleTextRendering = $True 
    $progressbar1.Location = '745, 0' 
    $progressbar1.Margin = '5, 5, 5, 5' 
    $progressbar1.Name = 'progressbar1' 
    $progressbar1.Size = '205, 35'
    $progressbar1.TabIndex = 9 
    $progressbar1.Visible = $False 
    $labelMaxResults.AutoSize = $True 
    $labelMaxResults.Font = $FontStyle
    $labelMaxResults.ForeColor = $global:FGColor
    $labelMaxResults.Location = '545, 10'
    $labelMaxResults.Margin = '5, 0, 5, 0' 
    $labelMaxResults.Name = 'labelMaxResults' 
    $labelMaxResults.Size = '99, 24'
    $labelMaxResults.TabIndex = 10 
    $labelMaxResults.Text = 'Max Displayed' 
    $labelMaxResults.UseCompatibleTextRendering = $True 
    $maxEvents.Location = '675, 5'
    $maxEvents.Margin = '5, 5, 5, 5'
    $maxEvents.Name = 'maxEvents'
    $maxEvents.Size = '64, 26'
    $maxEvents.TabIndex = 11 
    $maxEvents.Text = '10'
    $splitcontainer2.ResumeLayout()
    $splitcontainer1.ResumeLayout()
    $tablelayoutpanel1.ResumeLayout()
    $formMain.ResumeLayout()
    $InitialFormWindowState = $formMain.WindowState 
    $formMain.add_Load($Form_StateCorrection_Load) 
    $formMain.add_FormClosed($Form_Cleanup_FormClosed) 
    $formMain.add_Closing($Form_StoreValues_Closing) 
    return $formMain.ShowDialog()
}
function Show-ConfigViewer
{
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formMain = New-Object 'System.Windows.Forms.Form'
    $showRunning = New-Object 'System.Windows.Forms.Button'
    $groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
    $confText = New-Object 'System.Windows.Forms.TextBox'
    $label1 = New-Object 'System.Windows.Forms.Label'
    $confButton = New-Object 'System.Windows.Forms.Button'
    $adcCombobox = New-Object 'System.Windows.Forms.ComboBox'
    $xmlButton = New-Object 'System.Windows.Forms.Button'
    $xmlText = New-Object 'System.Windows.Forms.TextBox' 
    $compareConf = New-Object 'System.Windows.Forms.Button'
    $mergedText = New-Object 'System.Windows.Forms.RichTextBox'
    $groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
    $ConfFileText = New-Object 'System.Windows.Forms.TextBox'
    $labelAdc = New-Object 'System.Windows.Forms.Label'
    $buttonConf = New-Object 'System.Windows.Forms.Button'
    $ADCs = New-Object 'System.Windows.Forms.ComboBox'
    $buttonXML = New-Object 'System.Windows.Forms.Button'
    $XMLFileText = New-Object 'System.Windows.Forms.TextBox'
    $buttonShowMaster = New-Object 'System.Windows.Forms.Button'
    $buttonExit = New-Object 'System.Windows.Forms.Button'
    $timerJobTracker = New-Object 'System.Windows.Forms.Timer'
    $imagelistButtonBusyAnimation = New-Object 'System.Windows.Forms.ImageList'
    $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState' 
    function Get-ADCs ($FileName)
    {
        $adcCombobox = @() 
        try {
            [xml]$XML = Get-Content $FileName
        }
        catch
        {
            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to get $($FileName): $($_.Exception)"
            break
        }
        foreach ($ADC in $XML.properties.device)
        {
            $adcCombobox += ($ADC.param | Where-Object -FilterScript { $_.name -eq 'hostname' }).value
        }
        return $adcCombobox
    }
    function Get-MergedConf
    {
        $MasterConf = Get-Content -Path $confText.Text 
        [xml]$XMItemplate = Get-Content -Path $xmlText.Text 
        $MasterLines = @(); $MergedConf = @(); $ADCVars = @{}
        $GlobalVars = $XMItemplate.properties.global | Select-Object param 
        foreach ($Device in $XMItemplate.properties.device)
        {
            if (($Device.param | Where-Object -FilterScript { $_.name -eq 'hostname' }).value -match $adcCombobox.SelectedItem)
            {
                $ADCVars = $Device | Select-Object param
            }
        }
        foreach ($line in $MasterConf)
        {
            while ($line -match [regex]::Escape('$') -and $line -notmatch "#" -and $line -notmatch "regex")
            {
                $tempvar = $line.Split('$')[1]; $replacevar = "$" + $tempvar + "$"
                $globalvar = $GlobalVars.param | Where-Object -FilterScript { $_.name -eq $tempvar }
                $ADCVar = $ADCVars.param | Where-Object -FilterScript { $_.name -eq $tempvar }                    
                if ($ADCVar -ne $null)
                {
                    $line = $line.Replace($replacevar, $ADCVar.value)
                }                    
                else 
                {
                    $line = $line.Replace($replacevar, $GlobalVar.value)
                }
            }
            $MergedConf += $line
        }    
        return $MergedConf
    }
    function SortConf($config)
    {
        $sorted = @{ }
        $Excludes = @("Done") 
        foreach ($line in $config)
        {
        Try
        {
            if ($line -notmatch "#" -and $line.ToString() -ne '' -and $line -inotmatch $Excludes)
            {
                $sorted.Add($line, $line.Split(' ')[0])
            }
            elseif ($line -match "#NS" -and $line -match "Build")
            {
                $sorted.Add($line, $line.Split(' ')[0])
            }
        }
        Catch
        {
            Write-Log -Type "Error" -Line (Get-LineNumber) -Message "A problem was encountered while parsing the master config.`r`nDetails: $($_.Exception.Message)"
        }
    }
    $sorted.GetEnumerator() | Sort-Object -Property Name
    }
    function Update-ComboBox
    {
        param
        (
            [Parameter(Mandatory = $true)]
            [ValidateNotNull()]
            [System.Windows.Forms.ComboBox]
            $ComboBoX,
            [Parameter(Mandatory = $true)]
            [ValidateNotNull()]
            $Items,
            [Parameter(Mandatory = $false)]
            [string]
            $DisplayMember,
            [switch]
            $Append    
        )
        if (-not $Append)
        {
            $ComboBox.Items.Clear()
        }
        if ($Items -is [Object[]])
        {
            $ComboBox.Items.AddRange($Items)
        }
        elseif ($Items -is [System.Collections.IEnumerable])
        {
            $ComboBox.BeginUpdate() 
            foreach ($obj in $Items)
            {
                $ComboBox.Items.Add($obj)
            }
            $ComboBox.EndUpdate()
        }
        else
        {
            $ComboBox.Items.Add($Items)
        }
        $ComboBox.DisplayMember = $DisplayMember
    }
    $formMain_Load = {}
    $adcCombobox_SelectionChangeCommitted = {
        if ((Get-Item $ConfText.Text) -and (Get-Item $XMLText.Text))
        {
            $buttonShowMaster.Enabled = $true
        }
        else
        {
            $buttonShowMaster.Enabled = $false
        }
        if ($adcCombobox.SelectedItem -notcontains "Choose ")
        {
            $Filter = @{
                hostname = $adcCombobox.SelectedItem 
                instance_state = "Up"
            }
            Set-Variable -Scope Global -Name SelectedADC -Value ((Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType ns -Filters $Filter).ns) 
            if (($global:SelectedADC).count -gt 0)
            {
                $showRunning.Enabled = $true 
                $compareConf.Enabled = $true
            }
        }
        else
        {
            $showRunning.Enabled = $false 
            $compareConf.Enabled = $false
        }
    }
    $buttonShowMaster_Click = {
        $Conf = Get-MergedConf 
        $mergedText.Clear() 
        foreach ($line in $Conf)
        {
            if ($mergedText.Text.Length -gt 1)
            {
                $mergedText.Text += ("`r`n" + $line)
            }
            else { $mergedText.Text = $line}
        }
        $Conf = $null 
        [System.GC]::Collect()
    }
    $formMain_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
        [System.GC]::Collect()
    }
    $buttonExit_Click={
        $formMain.Close()
    }
    $datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{ 
        if($datagridviewResults.DataSource -is [System.Data.DataTable])
        {
            $column = $datagridviewResults.Columns[$_.ColumnIndex]
            $direction = [System.ComponentModel.ListSortDirection]::Ascending
            if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
            {
                $direction = [System.ComponentModel.ListSortDirection]::Descending
            }
            $datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
        }
    }
    $mergedText_MouseDoubleClick=[System.Windows.Forms.MouseEventHandler]{
        $OutFile = New-Object -TypeName System.Windows.Forms.SaveFileDialog 
        $OutFile.FileName = $adcCombobox.Text + ".conf"
        $OutFile.Filter = "Conf files (*.conf)|*.conf"
        $OutFile.ShowDialog()
        $mergedText.Text | Out-File $OutFile.FileName -Encoding UTF8 
        Invoke-Item -Path $OutFile.FileName
    }
    $compareConf_Click={
        [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null 
        $OutFolder = New-Object -TypeName System.Windows.Forms.FolderBrowserDialog 
        $OutFolder.Description = "Select an output folder"
        $OutFolder.SelectedPath = $global:BrowsePath 
        if ($OutFolder.ShowDialog() -eq "OK")
        {
            $OutFolder = $OutFolder.SelectedPath 
            $ExistingValues = Get-Registry $RegistryPath 
            if ("BrowsePath" -in $ExistingValues.property)
            {
                try
                {
                    Set-ItemProperty -Path $RegistryPath -Name "BrowsePath" -Value $OutFolder.SelectedPath 
                    Set-Variable -Name BrowsePath -Value $OutFolder.SelectedPath -Scope Global 
                    Write-Log -Type "Info" -Line (Get-LineNumber) -Message "Set BasePath in $RegistryPath"
                }
                catch
                {
                    Write-Log -Type "Error" -Line (Get-LineNumber) -Message "Unable to set BasePath in $BrowsePath : $_.Exception"
                }
            }
            $MasterOut = $OutFolder + "\$($global:SelectedADC.hostname)-master.conf"
            $MasterConf = ((Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType nsrunningconfig -ADCHost $global:SelectedADC.ip_address).nsrunningconfig).response.Split("`r`n")
            $RunningOut = $OutFolder + "\$($global:SelectedADC.hostname)-running.conf"
            $RunningConf = Get-MergedConf
            (SortConf $MasterConf).name | Out-File $RunningOut -Encoding UTF8 
            (SortConf $RunningConf).name | Out-File $MasterOut -Encoding UTF8
            try
            {
                Start-Process -FilePath 'Code.exe' -ArgumentList "-d $($MasterOut) $($RunningOut)"
            }
            catch
            {
                $Answer = $PopUp.popup("Unable to open in Visual Studio Code, please install it on this machine to compare config differences",0,"Install VSCode")
            }
        }
    }
    $showRunning_Click={
        $RunningConf = ((Invoke-ADMNitro -ADMSession $global:ADMSession -OperationMethod GET -ResourceType nsrunningconfig -ADCHost $global:SelectedADC.ip_address).nsrunningconfig).response.split("`r`n")
        $mergedText.Clear()
        foreach ($line in $RunningConf)
        {
            if ($mergedText.Text.Length -gt 1)
            {
                $mergedText.Text += ("`r`n" + $line)
            }
        else { $mergedText.Text = $line }
        }
        $Conf = $null
        [System.GC]::Collect()
    }
    $confButton_Click={
        $ConfFileName = Get-FileName "Conf (*.conf)| *.conf"
        $confText.Text = $ConfFileName
        if ($xmlText.Text -gt 0 -and $adcCombobox.SelectedInde -gt 0)
        {
            $buttonShowMaster.Enabled = $true
        }
        else
        {
            $buttonShowMaster.Enabled = $false
        }
    }
    $xmlButton_Click={
        $XMLFileName = Get-FileName "XML (*.xml)| *.xml"
        $xmlText.Text = $XMLFileName
        $ADCList = Get-ADCs $XMLFileName
        if ($ADCList.length -gt 0)
        {
            $adcCombobox.Enabled = $true
            $adcCombobox.Text = "Choose an ADC"
            Update-ComboBox $adcCombobox $ADCList
            if ($ConfText.text -gt 0 -and $adcCombobox.SelectedIndex -gt 0)
            {
                
            }
            else
            {
                $buttonShowMaster.Enabled = $true
            }
        }
    }   
    $Form_StateCorrection_Load=
    {
        $formMain.WindowState = $InitialFormWindowState
    }
    $Form_StoreValues_Closing=
    {
        $script:ConfigViewer_confText = $confText.Text 
        $script:ConfigViewer_adcCombobox = $adcCombobox.Text
        $script:ConfigViewer_adcCombobox_SelectedItem = $adcCombobox.SelectedItem 
        $script:ConfigViewer_xmlText = $xmlText.Text 
        $script:ConfigViewer_mergedText = $mergedText.Text 
        $script:ConfigViewer_ConfFileText = $ConfFileText.Text 
        $script:ConfigViewer_ADCs = $ADCs.Text
        $script:ConfigViewer_ADCs_SelectedItem = $ADCs.SelectedItem 
        $script:ConfigViewer_XMLFileText = $XMLFileText.Text
    }
    $Form_Cleanup_FormClosed=
    {
        $showRunning.remove_Click($showRunning_Click)
        $confButton.remove_Click($confButton_Click)
        $adcCombobox.remove_SelectionChangeCommitted($adcCombobox_SelectionChangeCommitted) 
        $xmlButton.remove_Click($xmlButton_Click)
        $compareConf.remove_Click($compareConf_Click)
        $mergedText.remove_MouseDoubleClick($mergedText_MouseDoubleClick)
        $buttonShowMaster.remove_Click($buttonShowMaster_Click)
        $buttonExit.remove_Click($buttonExit_Click)
        $formMain.remove_FormClosed($formMain_FormClosed)
        $formMain.remove_Load($formMain_Load)
        $formMain.remove_Load($Form_StateCorrection_Load)
        $formMain.remove_Closing($Form_StoneValues_Closing)
        $formMain.remove_FormClosed($Form_Cleanup_FormClosed)
    }
    $formMain.SuspendLayout()
    $groupbox2.SuspendLayout()
    $groupbox1.SuspendLayout()
    $formMain.Controls.Add($showRunning)
    $formMain.Controls.Add($groupbox2)
    $formMain.Controls.Add($compareConf)
    $formMain.Controls.Add($mergedText)
    $formMain.Controls.Add($groupbox1)
    $formMain.Controls.Add($buttonShowMaster)
    $formMain.Controls.Add($mergedText)
    $formMain.Controls.Add($groupbox1)
    $formMain.Controls.Add($buttonShowMaster)
    $formMain.Controls.Add($buttonExit)
    $formMain.AcceptButton = $buttonShowMaster 
    $formMain.AutoScaleDimensions = '6, 13'
    $formMain.AutoScaleMode = 'Font'
    $formMain.CancelButton = $buttonExit 
    $formMain.ClientSize = '719, 523'
    $formMain.Icon = [System.Convert]::FromBase64String($IconData)
    $formMain.Margin = '4, 4, 4, 4'
    $formMain.Name = 'formMain'
    $formMain.Startposition = 'CenterScreen'
    $formMain.Text = 'Config Viewer'
    $formMain.add_FormClosed($formMain_FormClosed) 
    $formMain.add_Load($formMain_Load)
    $showRunning.Anchor = 'Bottom, Left'
    $showRunning.Enabled = $False 
    $showRunning.Location = '97, 493' 
    $showRunning.Name = 'showRunning' 
    $showRunning.Size = '100, 23'
    $showRunning.TabIndex = 16 
    $showRunning.Text = 'Show Running' 
    $showRunning.TextImageRelation = 'ImageBeforeText'
    $showRunning.UseCompatibleTextRendering = $True 
    $showRunning.UseVisualStyleBackColor = $True 
    $showRunning.add_Click($showRunning_Click) 
    $groupbox2.Controls.Add($confText)
    $groupbox2.Controls.Add($label1)
    $groupbox2.Controls.Add($confButton)
    $groupbox2.Controls.Add($adcCombobox)
    $groupbox2.Controls.Add($xmlButton)
    $groupbox2.Controls.Add($xmlText)
    $groupbox2.Location = '13, 6'
    $groupbox2.Name = 'groupbox2'
    $groupbox2.Size = '643, 35'
    $groupbox2.TabIndex = 14 
    $groupbox2.TabStop = $False 
    $groupbox2.UseCompatibleTextRendering = $True 
    $confText.Location = '7, 12'
    $confText.Name = 'confText'
    $confText.Size = '105, 20'
    $confText.TabIndex = 0
    $confText.Tabindex = 0 
    $label1.Anchor = 'None'
    $label1.AutoSize = $True 
    $label1.Location = '497, 13'
    $label1.Margin = '2, 0, 2, 0'
    $label1.Name = 'label1'
    $label1.Size = '28, 17'
    $label1.TabIndex = 8 
    $label1.Text = 'ADC'
    $label1.UseCompatibleTextRendering = $True 
    $confButton.Anchor = 'None'
    $confButton.Location = '117, 9'
    $confButton.Name = 'confButton'
    $confButton.Size = '75, 23'
    $confButton.Tabindex = 1 
    $confButton.Text = '.&Conf'
    $confButton.UseCompatibleTextRendering = $True 
    $confButton.UseVisualStyleBackColor = $True 
    $confButton.add_Click($confButton_Click)
    $adcCombobox.Enabled = $False 
    $adcCombobox.FormattingEnabled = $True 
    $adcCombobox.Location = '394, 12'
    $adcCombobox.Name = 'adcCombobox'
    $adcCombobox.Size = '99, 21'
    $adcCombobox.TabIndex = 7 
    $adcCombobox.Text = 'Choose an .xml'
    $adcCombobox.add_SelectionChangeCommitted($adcCombobox_SelectionChangeCommitted) 
    $xmlButton.Anchor = 'Top, Right'
    $xmlButton.Location = '313, 8'
    $xmlButton.Name = 'xmlButton'
    $xmlButton.Size = '75, 23'
    $xmlButton.TabIndex = 6 
    $xmlButton.Text = '.&XML'
    $xmlButton.UseCompatibleTextRendering = $True 
    $xmlButton.UseVisualStyleBackColor = $True 
    $xmlButton.add_Click($xmlButton_Click)
    $xmlText.Anchor = 'Top, Left, Right'
    $xmlText.Location = '202, 12'
    $xmlText.Name = 'xmlText'
    $xmlText.Size = '105, 20'
    $xmlText.TabIndex = 5 
    $compareConf.Anchor = 'Bottom, Left'
    $compareConf.Enabled = $False
    $compareConf.Location = '200, 493'
    $compareConf.Name = 'compareConf'
    $compareConf.Size = '120, 23'
    $compareConf.TabIndex = 11 
    $compareConf.Text = 'Compare to Running'
    $compareConf.TextImageRelation = 'ImageBeforeText'
    $compareConf.UseCompatibleTextRendering = $True 
    $compareConf.UseVisualStyleBackColor = $True 
    $compareConf.add_Click($compareConf_Click)
    $mergedText.Anchor = 'Top, Bottom, Left, Right'
    $mergedText.Location = '11, 42'
    $mergedText.Margin = '2, 3, 2, 3'
    $mergedText.Name = 'mergedText'
    $mergedText.Size = '695, 338'
    $mergedText.TabIndex = 10 
    $mergedText.Text = ''
    $mergedText.add_MouseDoubleClick($mergedText_MouseDoubleClick) 
    $groupbox1.Controls.Add($ConfFileText)
    $groupbox1.Controls.Add($labelAdc)
    $groupbox1.Controls.Add($buttonConf)
    $groupbox1.Controls.Add($ADCs)
    $groupbox1.Controls.Add($buttonXML)
    $groupbox1.Controls.Add($XMLFileText)
    $groupbox1.Location = '12, 1'
    $groupbox1.Name = 'groupbox1'
    $groupbox1.Size = '643, 35'
    $groupbox1.TabIndex = 9 
    $groupbox1.TabStop = $False 
    $groupbox1.UseCompatibleTextRendering = $True 
    $ConfFileText.Location = '7, 12'
    $ConfFileText.Name = 'ConfFileText'
    $ConfFileText.Size = '105, 20'
    $ConfFileText.TabIndex = 0 
    $labelAdc.Anchor = 'None'
    $labelAdc.AutoSize = $True 
    $labelAdc.Location = '497, 13'
    $labelAdc.Margin = '2, 0, 2, 0'
    $labelAdc.Name = 'labelAdc'
    $labelAdc.Size = '28, 17'
    $labelAdc.TabIndex = 8 
    $labelAdc.Text = 'ADC'
    $labelAdc.UseCompatibleTextRendering = $True 
    $buttonConf.Anchor = 'None'
    $buttonConf.Location = '117, 9'
    $buttonConf.Name = 'buttonConf'
    $buttonConf.Size = '75, 23'
    $buttonConf.TabIndex = 1 
    $buttonConf.Text = '.&Conf'
    $buttonConf.UseCompatibleTextRendering = $True
    $buttonConf.UseVisualStyleBackColor = $True
    $ADCs.Enabled = $False
    $ADCs.FormattingEnabled = $True
    $ADCs.Location = '394, 12'
    $ADCs.Name = 'ADCs'
    $ADCs.Size = '99, 21'
    $ADCs.TabIndex = 7 
    $ADCs.Text = 'Choose an .xml'
    $buttonXML.Anchor = 'Top, Right'
    $buttonXML.Location = '313, 8'
    $buttonXML.Name = 'buttonXML'
    $buttonXML.Size = '75, 23'
    $buttonXML.TabIndex = 6 
    $buttonXML.Text = '.&XML'
    $buttonXML.UseCompatibleTextRendering = $True 
    $buttonXML.UseVisualStyleBackColor = $True 
    $XMLFileText.Anchor = 'Top, Left, Right'
    $XMLFileText.Location = '202, 12'
    $XMLFileText.Name = 'XMLFileText'
    $XMLFileText.Size = '105, 20'
    $XMLFileText.TabIndex = 5 
    $buttonShowMaster.Anchor = 'Bottom, Left'
    $buttonShowMaster.Enabled = $False
    $buttonShowMaster.ImageList = $imagelistButtonBusyAnimation 
    $buttonShowMaster.Location = '13, 493'
    $buttonShowMaster.Name = 'buttonShowMaster' 
    $buttonShowMaster.Size = '79, 23'
    $buttonShowMaster.TabIndex = 0 
    $buttonShowMaster.Text = 'Show &Master'
    $buttonShowMaster.TextImageRelation = 'ImageBeforeText' 
    $buttonShowMaster.UseCompatibleTextRendering = $True 
    $buttonShowMaster.UseVisualStyleBackColor = $True 
    $buttonShowMaster.add_Click($buttonShowMaster_Click) 
    $buttonExit.Anchor = 'Bottom, Right'
    $buttonExit.DialogResult = 'Cancel'
    $buttonExit.Location = '634, 493'
    $buttonExit.Name = 'buttonExit'
    $buttonExit.Size = '75, 23'
    $buttonExit.Text = 'E&xit'
    $buttonExit.UseCompatibleTextRendering = $True 
    $buttonExit.UseVisualStyleBackColor = $True 
    $buttonExit.add_Click($buttonExit_Click)
    #$Formatter_binaryFormatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
        
    #$imagelistButtonBusyAnimation.ImageStream = $Formatter_binaryFormatter.Deserialize($System_IO_MemoryStream)
    #$Formatter_binaryFormatter = $null 
    #$System_IO_MemoryStream = $null
    #$imagelistButtonBusyAnimation.TransparentColor = 'Transparent'
    $groupbox1.ResumeLayout()
    $groupbox2.ResumeLayout()
    $formMain.ResumeLayout()
    $InitialFormWindowState = $formMain.WindowState 
    $formMain.add_Load($Form_StateCorrection_Load)
    $formMain.add_FormClosed($Form_Cleanup_FormClosed)
    $formMain.add_Closing($Form_StoreValues_Closing) 
    return $formMain.ShowDialog()
}
function Show-Check-ADC
{
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $ADCCheckoutWizard = New-Object 'System.Windows.Forms.Form'
    $splitcontainer1 = New-Object 'System.Windows.Forms.SplitContainer' 
    $datagridview1 = New-Object 'System.Windows.Forms.DataGridView'
    $buttonExit = New-Object 'System.Windows.Forms.Button'
    $groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
    $buttonCancel = New-Object 'System.Windows.Forms.Button'
    $button1 = New-Object 'System.Windows.Forms.Button'
    $linklabelNeedHelp = New-Object 'System.Windows.Forms.LinkLabel' 
    $buttonBrowse = New-Object 'System.Windows.Forms.Button'
    $labelMasterPath = New-Object 'System.Windows.Forms.Label'
    $masterPath = New-Object 'System.Windows.Forms.TextBox'    
    $checkboxIncludeSubfolders = New-Object 'System.Windows.Forms.CheckBox'
    $buttonExit = New-Object 'System.Windows.Forms.Button'
    $deviceGroups = New-Object 'System.Windows.Forms.ListBox'
    $AvailableADCList = New-Object 'System.Windows.Forms.ListBox' 
    $labelSelectTargetFirmware = New-Object 'System.Windows.Forms.Label'
    $Time = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
    $Type = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
    $Message = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn' 
    $splitcontainer2 = New-Object 'System.Windows.Forms.SplitContainer' 
    $tooltip1 = New-Object 'System.Windows.Forms.ToolTip' 
    $labelTargetDeviceGroups = New-Object 'System.Windows.Forms.Label' 
    $labelTargetDevices = New-Object 'System.Windows.Forms.Label' 
    $splitcontainer3 = New-Object 'System.Windows.Forms.SplitContainer' 
    $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
    function Update-CheckADCLog ($Type, $Message)
    {
        $TimeStamp = ("{0:HH:mm:ss}" -f (Get-Date))
        $NewRow = $datagridview1.Rows.Add($TimeStamp, $Type, $Message)
        $datagridview1.FirstDisplayedScrollingRowIndex = $global:CheckLogIndex 
        $global:CheckLogIndex++
        $formMain.ResumeLayout() 
        if ($Type -eq 'Error')
        {
            $datagridview1.Rows[$NewRow].DefaultCellStyle.BackColor = $global:BGColor
        }
    }
    function Compare-ADCtoMaster
    {
        param (
            $ADC,
            $ResourceType,
            $RunningCollection,
            $Master,
            $LabelKey,
            $BindingKey,
            $Worksheet,
            $Row,
            $Excludes
        )
        $Column = 1
        Set-Variable -Name Diffs -Value "" -Scope Global
        $jobArgs = @{
            RunningObject	=	($RunningCollection.$ADC.$ResourceType)
            MasterObject	=	$Master
            LabelKey	=	$LabelKey
            BindingKey	=	$BindingKey
            }
        $jsonObj = Start-BackgroundJob -Job ${Function:Get-Line} -jobvariables $jobArgs        
        $jobArgs = @{
            jsonObj = $jsonObj
        }
        if ($jsonObj -eq $null)
        {
            [hashtable]$Line = @{ }
        }
        else
        {
            $Line = Start-BackgroundJob -Job ${Function:Convert-ObjectToHash} -jobVariables $jobArgs
        }
        $Line.Add("hostname", $ADC)
        $Line.Add("differences", "Match") 
        if ($BindingKey.length -gt 0)
        {
            $Line.Add("object_name", ($Master.$LabelKey + ":" + $Master.$BindingKey))
        }
        else
        {
            $Line.Add("object_name", $Master.$LabelKey)
        }
        $jobArgs = @{
            Object1 = $Master 
            Object2 = $Line 
            Excludes = $Excludes
        }
        $global:Diffs += Start-BackgroundJob -Job ${Function:Compare-Keys} -jobvariables $jobArgs 
        $jobArgs = @{
            Object1 = $Line 
            Object2 = $Master 
            Excludes = $Excludes
        }
        $global:Diffs += Start-BackgroundJob -Job ${Function:Compare-Keys} -jobvariables $jobArgs 
        if ($Line.Count -lt $Master.Count)
        {
            foreach ($Missing in $Master.Keys)
            {
                if ($Line.$Missing.length -eq 0)
                {
                    $Line.Add($Missing, "Missing") 
                    if ($global:Diffs.Length -gt 0)
                    {
                        $global:Diffs += $Missing + "=" + "Missing" + ";"
                    }
                }
            }
            if ($global:Diffs.Length -eq 0)
            {
                $global:Diffs = "Missing"
            }
        }
        if ($global:Diffs.Length -eq 0)
        {
            $global:Diffs = "Match"
        }
        $Line.Differences = $global:Diffs 
        if ($Line.length -gt 0)
        {
            $jobArgs = @{
                Worksheet = $Worksheet 
                Columns	=	$Columns
                Master	=	$Master
                Line	=	$Line
                Row	    =	$Row
                Column	=	$Column
            }
            $Results = Start-BackgroundJob -Job ${Function:Color-Cells} -jobvariables $jobArgs
        }
        return $Results   
    }
    function Check-ADC
    {
        $Output = @()
        $ExcelProcs = Get-Process -Name excel -ErrorAction SilentlyContinue 
        try {
            $Excel = New-Object -ComObject Excel.Application
        }
        catch
        {
            Update-CheckADCLog -Type "Error" -Message "Unable to declare an Excel COM object, please make sure Excel is installed on this machine"
            $Answer = $PopUp.popup("Unable to declare an Excel COM object, please make sure Microsoft Excel is installed on this machine or try again from a machine where Excel is installed", 0, "Install Excel")
            $ADCCheckoutWizard.Close()
        }
        $Excel.Visible = $false 
        $Excel.DisplayAlerts = $false 
        $Excel.ScreenUpdating = $False
        $WorkBook = $Excel.WorkBooks.add(1); $Sheet = 1
        $Stats = @{ }; $RunningCollection = @{ }; $MasterFiles = @{ }
        $DiffStats = @{
            Master = @{ }
        }
        Set-Variable -Name DiffStats -Value $DiffStats -Scope Global 
        $MasterStat = @{
            Rows	= 0
            Columns	= 0
        }
        $MasterBackColor = 15; $MasterForeColor = 1 
        $ResourceTypes = @(); $Excludes = ""        
        foreach ($DG in $deviceGroups.SelectedItems)
        {
            Update-CheckADCLog -Type "Info" -Message "Gathering ADCs from $($DG.name)"
            foreach ($ADCIP in $DG.static_device_list_arr)
            {
                $Match = $AvailableADCList.Items | Where-Object -FilterScript { $_.display_name -eq $ADCIP } 
                foreach ($HostName in $Match.hostname)
                {
                    $Index = $AvailableADCList.FindString($HostName)
                    $AvailableADCList.SetSelected($Index, $true)
                    Update-CheckADCLog -Type "Info" -Message "Selecting $($Match.hostname) from $($DG.name)"
                }
            }
        }
        $Masters = @{ }        
        $Search = 'Get-ChildItem $($masterPath.Text) -Filter "*.json"' 
        if ($checkboxIncludeSubfolders.Checked)
        {
            $Search += " -Recurse"
        }
        foreach ($JSONFile in Invoke-Expression $Search)
        {            
            Update-CheckADCLog -Type "Info" -Message "Get-Content $($JSONFile.FullName)"
            $ResourceType = ($JSONFile.Name.Split('.')[0]).ToString()
            if ($ResourceType -notin $Masters.Keys)
            {
                $jobVars = @{
                    filepath = ($JSONFile.FullName.ToString())
                }
                try
                {
                    if ($global:Cancel -eq $false)
                    {                        
                        $Master = Start-BackgroundJob -Job ${Function:Get-MasterConfig} -jobvariables $jobVars -formLayout $formMain 
                        $Masters.Add($ResourceType, $Master)
                    }
                }
                catch
                {
                    Update-CheckADCLog -Type "Error" -Message "An issue occurred importing $($JSONFile.Name): $_.Exception"
                }
            }
            else
            {
                Update-CheckADCLog -Type "Error" -Message "$($JSONFile.Name) has already been imported, skipping $($JSONFile.FullName)"
            }
        }
        $formMain.ResumeLayout()
        #Get the $ResourceType results for each ADC in the specified list
        Update-CheckADCLog -Type "Info" -Message "Building out comparison objects for $($AvailableADCList.SelectedItems.Count) ADCs"
        foreach ($TargetADC in $AvailableADCList.SelectedItems)
        {
            Update-CheckADCLog -Type "Info" -Message "Initializing object for $($TargetADC.hostname)"
            $DiffTable = @{
                Match	=	0
                Diff	=	0
                Missing	=	0
            }
        $global:DiffStats.Add($TargetADC.hostname, $DiffTable)
        $Running = @(); $ADCKey = @{ } 
        foreach ($ResourceType in $Masters.Keys)
        {
            if ($global:Cancel -eq $false)
            {
                $jobVars = @{
                    ADMSession= $global:ADMSession
                    OperationMethod = "GET"
                    ResourceType =  $ResourceType
                    ADCHost  = $TargetADC.ip_address
                }
                if ($Masters.$ResourceType.args.nitroarg)
                {
                    $Arguments = ($Masters.$ResourceType.args.nitroarg | Convert-ObjectToHash)
                    $jobVars.Add("Arguments", $Arguments)
                    }
                    try
                    {
                        Set-Variable -Name Running -Value @() -Scope Global 
                        $Running = @()
                        Update-CheckADCLog -Type "Info" -Message "Getting $ResourceType from $($TargetADC.hostname)" 
                        if ($Masters.$ResourceType.args.bindingkey.length -gt 0)
                        {
                            Set-Variable -Name Runnings -Value @() -Scope Global 
                            $jobVars.Add('ResourceName', "")
                            foreach ($Object in $Masters.$ResourceType.configs)
                            {
                                $jobVars.ResourceName = ($Object.($Masters.$ResourceType.args.bindingkey))
                                $global:Runnings += (Start-BackgroundJob -Job ${Function :Invoke-ADMNitro} -jobvariables $jobVars -formLayout $formMain).$ResourceType
                            }
                            $global:Running = $global:Runnings
                        }
                        else
                        {
                            $global:Running += (Start-BackgroundJob -Job ${Function:Invoke-ADMNitro} -jobvariables $jobVars -formLayout $formMain).$ResourceType
                        }
                        $ADCKey.Add($ResourceType, $global:Running)
                    }
                    catch
                    {
                        Update-CheckADCLog -Type "Error" -Message "Unable to get $ResourceType from $($TargetADC.hostname) via $ADMHost - $_.Exception"
                    }
                }
            }
            Update-CheckADCLog -Type "Info" -Message "Got $($Masters.Keys.Count) configuration objects from $($TargetADC.hostname)" 
            $formMain.ResumeLayout()  
            if ($ADCKey.length -gt 0 -and $global:Cancel -eq $false)
            {
                $RunningCollection.Add($TargetADC.hostname, $ADCKey)
            }
        }            
        Update-CheckADCLog -Type "Info" -Message "Beginning comparison routine" 
        foreach ($ResourceType in $Masters.Keys)
        {
            if ($global:Cancel -eq $false)
            {            
                Update-CheckADCLog -Type "Info" -Message "Comparing $ResourceType against $($RunningCollection.Keys.Count) ADCs"
                $global:DiffStats.Master.Add($ResourceType, $MasterStat)            
                $WorkBook = $Excel.Workbooks.Item(1)            
                if ($Sheet -gt 1)
                {
                    $WorkBook.Worksheets.Add([System.Reflection.Missing]::Value, $WorkBook.Worksheets.Item($WorkBook.Worksheets.count))
                }
                Update-CheckADCLog -Type "Info" -Message "Creating a new worksheet named $ResourceType"            
                $Worksheet = $WorkBook.Worksheets.Item($Sheet)
                $SheetName = ($ResourceType -replace '_','')[0 .. 30] -join ""
                $Worksheet.Name = $SheetName 
                $Worksheet.Activate()
                Update-CheckADCLog -Type "Info" -Message "Building a reference table for $ResourceType"            
                $Row = 1; $Column = 1; $LabelKey = $Masters.$ResourceType.args.labelkey; 
                $BindingKey = $Masters.$ResourceType.args.bindingkey 
                $Excludes = ($Masters.$ResourceType.args.excludes).split(',') -replace ' ', ''            
                $Columns = @("hostname", "object_name", "differences")
                foreach ($Item in $Masters.$ResourceType.configs)
                {
                    foreach ($Key in ($Item | Convert-ObjectToHash).Keys)
                    {
                        if ($Key -notin $Columns -and $Key -notin $Excludes)
                        {
                            $Columns += $Key
                        }
                    }
                }
                Update-CheckADCLog -Type "Info" -Message "Columns defined, adding rows"
                $global:DiffStats.Master.$ResourceType.Rows = $Masters.$ResourceType.configs.count 
                $global:DiffStats.Master.$ResourceType.Columns = ($Columns.Count - 3)
                
                foreach ($Key in $Columns)
                {
                    $Worksheet.Cells.Item($Row, $Column) = $Key 
                    $Worksheet.Cells.Item($Row, $Column).Font.Bold = $true 
                    $Worksheet.Cells.Item($Row, $Column).Font.ColorIndex = 2 
                    $Worksheet.Cells.Item($Row, $Column).Interior.ColorIndex = 16 
                    $Column++
                }
                $Row++            
                if ($global:Cancel -eq $false)
                    {
                        foreach ($Item in $Masters.$ResourceType.configs)
                        {            
                            if ($Item.count -ne 0 -and $Item.$LabelKey -ne $null)
                            {                        
                                $Master = $Item | Convert-ObjectToHash
                                if ($Master.name -ne "Args")
                                {
                                    if ($BindingKey.length -gt 0)
                                    {
                                        $Master.Add("object_name", ($Master.$LabelKey +	":" + $Master.$BindingKey))
                                    }
                                    else
                                    {
                                        $Master.Add("object_name", $Master.$LabelKey)
                                    }
                                    $Master.Add("hostname", "Master")
                                    $Master.Add("differences", "Master")                                    
                                    $Column = 1
                                    foreach ($Key in $Columns)
                                    {
                                        $Worksheet.Cells.Item($Row, $Column) = $Master.$Key
                                        $Worksheet.Cells.Item($Row, $Column).interior.colorindex = $MasterBackColor 
                                        $Worksheet.Cells.Item($Row, $Column).Font.Colorindex = $MasterForeColor 
                                        $Column++
                                    }                        
                                    $Row++
                                
                                    foreach ($ADC in $RunningCollection.Keys)
                                    {
                                        Update-CheckADCLog -Type "Info" -Message "Checking $ResourceType\$($Master.$LabelKey) on $ADC"
                                        Set-Variable -Name Results -Value @{ } -Scope Global 
                                        try 
                                        {
                                            $global:Results = Compare-ADCtoMaster -ADC $ADC -ResourceType $ResourceType -RunningCollection $RunningCollection -Master $Master -LabelKey $LabelKey -BindingKey $BindingKey -Worksheet $Worksheet -Row $Row -Excludes $Excludes
                                        }
                                        catch
                                        {
                                            Update-CheckADCLog -Type "Error" -Message $_.Exception
                                        }
                                        $global:DiffStats.$ADC.Match += $global:Results.Match 
                                        $global:DiffStats.$ADC.Missing += $global:Results.Missing 
                                        $global:DiffStats.$ADC.Diff += $global:Results.Diff 
                                        $WorkSheet = $global:Results.Worksheet 
                                        $Row++
                                            
                                    }
                                }
                            }
                            elseif ($Item.$LabelKey -eq $null)
                            {
                                Update-CheckADCLog -Type "Error" -Message "Unable to get $ResourceType\$LabelKey, make sure the labelkey argument is correct"
                            }
                        }
                    }                        
                    if ($global:Cancel -eq $false)
                    {                
                        $Start = [int][char]'a' - 1 
                        [char]$ColumnChar = [char]($Column + $Start)
                        if ($AutoWidth -eq $true)
                        {
                            try
                            {
                                $WorkSheet.Columns.Item(("A" +	+ $ColumnChar)).EntireColumn.AutoFit() | Out-Null
                            }
                            catch
                            {
                                Update-CheckADCLog -Type "Error" -Message "Couldn't resize columns in the $($WorkSheet.Name) sheet"
                            }
                        }
                        $ListObject = $Worksheet.Listobjects.Add([Microsoft.Office.Interop.Excel.XlListObjectSourceType]::xlsrcRange, $Excel.ActiveCell.CurrentRegion, $null, [Microsoft.Office.Interop.Excel.xlYesNoGuess]::xlYes)
                        $ListObject.Name = $ResourceType
                        $Worksheet.application.activewindow.splitcolumn = 0 | Out-Null 
                        $Worksheet.application.activewindow.splitrow = 1 | Out-Null 
                        $Worksheet.application.activewindow.freezepanes = $true | Out-Null
                        $Sheet++
                        }
                    }
                }                        
                if ($Worksheet.name.length -gt 0 -and $global:Cancel -eq $false)
                {
                    $Worksheet = $WorkBook.Worksheets.Item(1)
                    $Worksheet.Activate()
                    $WorkBook.SaveAs($OutFile)
                    $Excel.Workbooks.Close()
                    $Excel.Quit()
                    [System.GC]::Collect()
                    [System.GC]::WaitForPendingFinalizers( )
                    [System.Runtime.InteropServices.Marshal]::ReleaseComObject($Worksheet)
                    [System.Runtime.InteropServices.Marshal]::ReleaseComObject($Excel)
                    Remove-Variable -Name excel
                    #Clean up the excel process instantiated by the COM object
                    $NewProcs = Get-Process -Name excel -ErrorAction SilentlyContinue 
                    foreach ($ProcID in $NewProcs.Id)
                    {
                        if ($ProcID -notin $ExcelProcs.Id)
                        {
                            Stop-Process -Id $ProcID
                        }
                    }
                    Invoke-Item $OutFile
                }                    
                else 
                {                
                    if ($global:Cancel -eq $true)
                    {
                        Update-CheckADCLog Info "Checkout canceled"
                    }
                    else
                    {
                        Update-CheckADCLog Error "No results were found"
                    }
                }
    }            
    $ADCCheckoutWizard_Load = {
        Set-Variable -Name Checked -Value $false -Scope Global 
        Update-ListBox $AvailableADCList -Items $global:CurrentADCs "hostname" 
        Update-ListBox $deviceGroups -Items $global:CurrentDGs "name"        
        $masterPath.Text = $global:BrowsePath
        Set-Variable -Name CheckLogIndex -Value 0 -Scope Global
    }
    $ADCCheckoutWizard_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{ 
        [System.GC]::Collect()
    }
    $buttonExit_Click = {
        $ADCCheckoutWizard.Close()
    }
    $buttonBrowse_Click = {
        $masterPath.Text = Get-Path -Description "Specify path to checkout folder:" 
        if ($masterPath.Text -ne "Cancelled")
        {
            $ExistingValues = Get-Registry $RegistryPath 
            if ("BrowsePath" -in $ExistingValues.property)
            {
                $ExistingValues = Get-Registry $RegistryPath 
                if ("BrowsePath" -in $ExistingValues.property)
                {
                    try                    
                    {
                        Set-ItemProperty -Path $RegistryPath -Name "BrowsePath" -Value $masterPath.Text 
                        Set-Variable -Name BrowsePath -Value $masterPath.Text -Scope Global 
                        Update-CheckADCLog -Type "Info" -Message "Set BrowsePath in $RegistryPath"
                    }
                    catch
                    {
                        Update-CheckADCLog -Type "Error" -Message "Unable to set BrowsePath in $BrowsePath : $_.Exception"
                    }
                }
            }
        }
    }
    $linklabelNeedHelp_LinkClicked =[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
        Start $helpUrl
    }
    $buttonCheckNow_Click = {
        $this.Enabled = $false 
        $buttonCancel.Enabled = $true
        Set-Variable -Name Cancel -Value $false -Scope Global 
        try {
            $OutFile = ($masterPath.Text + "\$(Get-Date -Format "MMddy-hhmm")_ADC-Checkout.xlsx") 
            if ("BrowsePath" -in (Get-Registry $RegistryPath).property)
            {
                if ((Get-Registry $RegistryPath | Where-Object -FilterScript { $_.property -eq "BrowsePath" }).value -ne $masterPath.Text)
                {
                    try
                    {
                        Set-ItemProperty -Path $RegistryPath -Name "BrowsePath" -Value $masterPath.Text 
                        Set-Variable -Name BrowsePath -Value $masterPath.Text -Scope Global                                
                        Update-CheckADCLog -Type "Info" -Message "Set BrowsePath in $RegistryPath"
                    }
                    catch
                    {
                        Update-CheckADCLog -Type "Error" -Message "Unable to set BrowsePath in $BrowsePath :	Exception"
                    }
                }
            }
            if (!(Get-Item $OutFile -ErrorAction SilentlyContinue) -and $global:Checked -eq $false)
            {
                $PopUp = New-Object -ComObject wscript.shell
                if ($AvailableADCList.SelectedItem -eq $null -and $deviceGroups.SelectedItem -eq $null)
                {
                    $Answer = $PopUp.popup("Please select at least one Target ADC or Device Group", 0, "Select an ADC") 
                    [System.Windows.Forms.Application]::DoEvents()
                    
                }
                else
                {                            
                    $masterPath.Text = $masterPath.Text.TrimEnd('/')
                    $AvailableADCList.Enabled = $false 
                    $deviceGroups.Enabled = $false 
                    $masterPath.Enabled = $false 
                    $buttonBrowse.Enabled = $false 
                    $checkboxIncludeSubfolders.Enabled = $false 
                    [System.Windows.Forms.Application]::DoEvents() 
                    try
                    {
                        Check-ADC
                        $global:Checked = $true 
                        $AvailableADCList.Enabled = $true 
                        $deviceGroups.Enabled = $true
                        $masterPath.Enabled = $true 
                        $buttonBrowse.Enabled = $true 
                        $checkboxIncludeSubfolders.Enabled = $false 
                        [System.Windows.Forms.Application]::DoEvents()
                    }
                    catch
                    {
                        Update-CheckADCLog Error "An error occured in Check-ADC: $($_.Exception)"
                    }
                }
            }
        }
        catch
        {
            Update-CheckADCLog -Type "Error" -Message "Something went wrong! $($_.Exception)"
        }
                    
        [System.Windows.Forms.Application]::DoEvents()
        $this.Enabled = $true
    }
    $buttonCancel_Click = {
        $global:Cancel = $true
    }                    
    $Form_StateCorrection_Load=
    {            
        $ADCCheckoutWizard.WindowState = $InitialFormWindowState
    }
    $Form_StoreValues_Closing=
    {
        $script:Check_ADC_datagridview1 = $datagridview1.SelectedCells 
        $script:Check_ADC_masterPath = $masterPath.Text 
        $script:Check_ADC_checkboxIncludeSubfolders = $checkboxIncludeSubfolders.Checked 
        $script:Check_ADC_deviceGroups = $deviceGroups.SelectedItems 
        $script:Check_ADC_AvailableADCList = $AvailableADCList.SelectedItems
    }
    $Form_Cleanup_FormClosed=
    {                
        $ADCCheckoutWizard.remove_Load($ADCCheckoutWizard_Load)
        $buttonExit.remove_Click($buttonExit_Click)
        $buttonCancel.remove_Click($buttonCancel_Click)
        $button1.remove_Click($buttonCheckNow_Click)
        $linklabelNeedHelp. remove_LinkClicked($linklabelNeedFlelp_LinkClicked) 
        $buttonBrowse.remove_Click($buttonBrowse_Click)
        $buttonExit.remove_Click($buttonExit_Click)
        $ADCCheckoutWizard.remove_Load($Form_StateCorrection_Load)
        $ADCCheckoutWizard.remove_Closing($Form_StoreValues_Closing) 
        $ADCCheckoutWizard.remove_FormClosed($Form_Cleanup_FormClosed)                
    }
    $ADCCheckoutWizard.SuspendLayout()
    $splitcontainer1.SuspendLayout()
    $groupbox1.SuspendLayout()
    $splitcontainer2.SuspendLayout()
    $splitcontainer3.SuspendLayout()
    $ADCCheckoutWizard.Controls.Add($splitcontainer1)
    $ADCCheckoutWizard.AutoScaleDimensions = '7, 17'
    $ADCCheckoutWizard.AutoScaleMode = 'Font'
    $ADCCheckoutWizard.AutoSize = $True
    $ADCCheckoutWizard.BackColor = '56, 56, 56'
    $ADCCheckoutWizard.CancelButton = $buttonExit 
    $ADCCheckoutWizard.ClientSize = '900, 400'
    $ADCCheckoutWizard.Font = 'Calibri, 10.2pt'
    $ADCCheckoutWizard.ForeColor = 'ButtonFace'
    $ADCCheckoutWizard.Icon = [System.Convert]::FromBase64String($IconData)
    $ADCCheckoutWizard.Margin = '6, 6, 6, 6'
    $ADCCheckoutWizard.MinimumSize = '765, 400'
    $ADCCheckoutWizard.Name = 'ADCCheckoutWizard'
    $ADCCheckoutWizard.Startposition = 'CenterScreen'
    $ADCCheckoutWizard.Text = 'ADC Checkout Wizard'
    $ADCCheckoutWizard.add_Load($ADCCheckoutWizard_Load)
    $splitcontainer1.Dock = 'Fill'
    $splitcontainer1.FixedPanel = 'Panel1'
    $splitcontainer1.IsSplitterFixed = $True 
    $splitcontainer1.Location = '0, 0'
    $splitcontainer1.Margin = '4, 5, 4, 5'
    $splitcontainer1.Name = 'splitcontainer1'
    [void]$splitcontainer1.Panel1.Controls.Add($splitcontainer3)
    [void]$splitcontainer1.Panel2.Controls.Add($datagridview1)
    $splitcontainer1.Size = '1006, 561'
    $splitcontainer1.SplitterDistance = 417 
    $splitcontainer1.TabIndex = 22
    $splitcontainer1.BackColor = $global:BGColor2
    $datagridview1.AutoSizeColumnsMode = 'Allcells'
    $datagridview1.BackgroundColor = $global:BGColor
    $System_Windows_Forms_DataGridViewCellStyle_1 = New-Object 'System.Windows.Forms.DataGridViewCellStyle' 
    $System_Windows_Forms_DataGridViewCellStyle_1.Alignment = 'MiddleLeft' 
    $System_Windows_Forms_DataGridViewCellStyle_1.BackColor = $global:BGColor 
    $System_Windows_Forms_DataGridViewCellStyle_1.Font = 'Calibri, 10.2pt' 
    $System_Windows_Forms_DataGridViewCellStyle_1.ForeColor = 'Info' 
    $System_Windows_Forms_DataGridViewCellStyle_1.SelectionBackColor = 'Highlight' 
    $System_Windows_Forms_DataGridViewCellStyle_1.SelectionForeColor = 'HighlightText' 
    $System_Windows_Forms_DataGridViewCellStyle_1.WrapMode = 'True'
    $datagridview1.ColumnHeadersDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1 
    $datagridview1.ColumnHeadersHeightSizeMode = 'AutoSize'
    [void]$datagridview1.Columns.Add($Time)
    [void]$datagridview1.Columns.Add($Type)
    [void]$datagridview1.Columns.Add($Message)
    $System_Windows_Forms_DataGridViewCellStyle_2 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
    $System_Windows_Forms_DataGridViewCellStyle_2.Alignment = 'MiddleLeft' 
    $System_Windows_Forms_DataGridViewCellStyle_2.BackColor = '56, 56, 56' 
    $System_Windows_Forms_DataGridViewCellStyle_2.Font = 'Calibri, 10.2pt' 
    $System_Windows_Forms_DataGridViewCellStyle_2.ForeColor = 'ButtonFace' 
    $System_Windows_Forms_DataGridViewCellStyle_2.SelectionBackColor = 'Highlight' 
    $System_Windows_Forms_DataGridViewCellStyle_2.SelectionForeColor = 'HighlightText'
    $System_Windows_Forms_DataGridViewCellStyle_2.WrapMode = 'False'
    $datagridview1.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2 
    $datagridview1.Dock = 'Fill'
    $datagridview1.EnableHeadersVisualStyles = $False 
    $datagridview1.GridColor = '150, 150, 150'
    $datagridview1.Location = '0, 0'
    $datagridview1.Margin = '4, 5, 4, 5'
    $datagridview1.Name = 'datagridview1'
    $datagridview1.RowHeadersVisible = $False 
    $datagridview1.RowTemplate.Height = 24 
    $datagridview1.Size = '585, 561'
    $datagridview1.TabIndex = 21 
    $buttonExit.DialogResult = 'Cancel'
    $buttonExit.Font = 'Calibri, 10.2pt'
    $buttonExit.ForeColor = 'ActiveCaptionText'
    $buttonExit.Location = '13, 180'
    $buttonExit.Margin = '4, 5, 4, 5'
    $buttonExit.Name = 'buttonExit'
    $buttonExit.Size = '90, 20'
    $buttonExit.TabIndex = 4 
    $buttonExit.Text = 'E&xit'
    $buttonExit.UseCompatibleTextRendering = $True 
    $buttonExit.UseVisualStyleBackColor = $True
    $buttonExit.add_Click($buttonExit_Click)            
    $groupbox1.Controls.Add($buttonCancel)
    $groupbox1.Controls.Add($button1)
    $groupbox1.Controls.Add($linklabelNeedHelp) 
    $groupbox1.Controls.Add($buttonBrowse)
    $groupbox1.Controls.Add($labelMasterPath) 
    $groupbox1.Controls.Add($masterPath)
    $groupbox1.Controls.Add($checkboxIncludeSubfolders) 
    $groupbox1.Controls.Add($buttonExit)
    $groupbox1.Dock = 'Fill'
    $groupbox1.FlatStyle = 'Flat'
    $groupbox1.ForeColor = $global:FGColor
    $groupbox1.Location = '0, 0'
    $groupbox1.Margin = '5, 5, 5, 5'
    $groupbox1.Name = 'groupbox1'
    $groupbox1.Padding = '5, 5, 5, 5'
    $groupbox1.Size = '417, 200'
    $groupbox1.TabIndex = 18 
    $groupbox1.TabStop = $False 
    $groupbox1.Text = 'Checkout Settings' 
    $groupbox1.UseCompatibleTextRendering = $True 
    $buttonCancel.Enabled = $False 
    $buttonCancel.Font = 'Calibri, 10.8pt' 
    $buttonCancel.ForeColor = 'Black'
    $buttonCancel.Location = '178, 100'
    $buttonCancel.Margin = '4, 5, 4, 5' 
    $buttonCancel.Name = 'buttonCancel' 
    $buttonCancel.Size = '90, 30' 
    $buttonCancel.TabIndex = 15 
    $buttonCancel.Text = 'C&ancel'
    $buttonCancel.UseCompatibleTextRendering = $True
    $buttonCancel.UseVisualStyleBackColor = $True 
    $buttonCancel.add_Click($buttonCancel_Click)
    $button1.Font = 'Calibri, 10.8pt, style=Bold'
    $button1.ForeColor = 'Black'
    $button1.Location = '295, 100'
    $button1.Margin = '4, 5, 4, 5'
    $button1.Name = 'button1'
    $button1.Size = '90, 30'
    $button1.TabIndex = 14 
    $button1.Text = '&Check Now'
    $button1.UseCompatibleTextRendering = $True 
    $button1.UseVisualStyleBackColor = $True 
    $button1.add_Click($buttonCheckNow_Click)
    $linklabelNeedHelp.Font = 'Calibri, 12pt, style=Bold'
    $linklabelNeedHelp.LinkColor = 'Cyan'
    $linklabelNeedHelp.Location = '13, 67'
    $linklabelNeedHelp.Margin = '4, 0, 4, 0'
    $linklabelNeedHelp.Name = 'linklabelNeedHelp'
    $linklabelNeedHelp.Size = '107, 37'
    $linklabelNeedHelp.TabIndex = 12 
    $linklabelNeedHelp.TabStop = $True 
    $linklabelNeedHelp.Text = 'Need Help?'
    $linklabelNeedHelp.UseCompatibleTextRendering = $True 
    $linklabelNeedHelp.add_LinkClicked($linklabelNeedHelp_LinkClicked)
    $buttonBrowse.ForeColor = 'ActiveCaptionText'
    $buttonBrowse.Location = '295, 62'
    $buttonBrowse.Margin = '4, 5, 4, 5'
    $buttonBrowse.Name = 'buttonBrowse'
    $buttonBrowse.Size = '90, 30'
    $buttonBrowse.TabIndex = 6 
    $buttonBrowse.Text = '&Browse'
    $tooltip1.SetToolTip($buttonBrowse, 'Specify the path where . json files are located') 
    $buttonBrowse.UseCompatibleTextRendering = $True 
    $buttonBrowse.UseVisualStyleBackColor = $True 
    $buttonBrowse.add_Click($buttonBrowse_Click)
    $labelMasterPath.AutoSize = $True
    $buttonBrowse.add_Click($buttonBrowse_Click)
    $labelMasterPath.AutoSize = $True 
    $labelMasterPath.Font = 'Calibri, 10.8pt'
    $labelMasterPath.Location = '27, 28'
    $labelMasterPath.Margin = '4, 0, 4, 0'
    $labelMasterPath.Name = 'labelMasterPath'
    $labelMasterPath.Size = '83, 23'
    $labelMasterPath.TabIndex = 5 
    $labelMasterPath.Text = 'Master Path:'
    $labelMasterPath.UseCompatibleTextRendering = $True 
    $masterPath.BackColor = $global:BGColor
    $masterPath.ForeColor = $global:FGColor
    $masterPath.Location = '133, 26'
    $masterPath.Margin = '4, 5, 4, 5'
    $masterPath.Name = 'masterPath'
    $masterPath.ScrollBars = 'Horizontal'
    $masterPath.Size = '274, 24'
    $masterPath.TabIndex = 4 
    $masterPath.TextAlign = 'Right'
    $tooltip1.SetToolTip($masterPath, 'Base path to the checkouts to perform (all child .json files will be included)') 
    $masterPath.Wordwrap = $False 
    $checkboxIncludeSubfolders.Checked = $True 
    $checkboxIncludeSubfolders.CheckState = 'Checked'
    $checkboxIncludeSubfolders.Location = '133, 62'
    $checkboxIncludeSubfolders.Margin = '4, 5, 4, 5'
    $checkboxIncludeSubfolders.Name = 'checkboxIncludeSubfolders'
    $checkboxIncludeSubfolders.Size = '186, 39'
    $checkboxIncludeSubfolders.TabIndex = 13 
    $checkboxIncludeSubfolders.Text = '&Include Subfolders'
    $checkboxIncludeSubfolders.UseCompatibleTextRendering = $True 
    $checkboxIncludeSubfolders.UseVisualStyleBackColor = $True 
    $buttonExit.DialogResult = 'Cancel'
    $buttonExit.Font = 'Calibri, 10.2pt'
    $buttonExit.ForeColor = 'ActiveCaptionText'
    $buttonExit.Location = '13, 100'
    $buttonExit.Margin = '4, 5, 4, 5'
    $buttonExit.Name = 'buttonExit'
    $buttonExit.Size = '90, 30'
    $buttonExit.TabIndex = 4 
    $buttonExit.Text = 'E&xit'
    $buttonExit.UseCompatibleTextRendering = $True 
    $buttonExit.UseVisualStyleBackColor = $True 
    $buttonExit.add_Click($buttonExit_Click)
    $deviceGroups.BackColor = $global:BGColor
    $deviceGroups.Dock = 'Right'
    $deviceGroups.Font = 'Calibri, 10.8pt'
    $deviceGroups.ForeColor = $global:FGColor
    $deviceGroups.FormattingEnabled = $True 
    $deviceGroups.ItemHeight = 17 
    $deviceGroups.Location = '212, 0'
    $deviceGroups.Margin = '4, 5, 4, 5'
    $deviceGroups.Name = 'deviceGroups'
    $deviceGroups.SelectionMode = 'MultiExtended'
    $deviceGroups.Size = '205, 248'
    $deviceGroups.TabIndex = 17 
    $AvailableADCList.BackColor = $global:BGColor
    $AvailableADCList.Dock = 'Left'
    $AvailableADCList.Font = 'Calibri, 10.8pt'
    $AvailableADCList.ForeColor = $global:FGColor
    $AvailableADCList.FormattingEnabled = $True 
    $AvailableADCList.ItemHeight = 17 
    $AvailableADCList.Location = '0, 0'
    $AvailableADCList.Margin = '4, 5, 4, 5'
    $AvailableADCList.Name = 'AvailableADCList'
    $AvailableADCList.SelectionMode = 'MultiExtended' 
    $AvailableADCList.Size = '204, 248'
    $AvailableADCList.Sorted = $True 
    $AvailableADCList.TabIndex = 16 
    $labelSelectTargetFirmware.AutoSize = $True
    $labelSelectTargetFirmware.Font = 'Calibri, 10.8pt, style=Bold'
    $Time.HeaderText = 'Time'
    $Time.Name = 'Time'
    $Time.Width = 61 
    $Type.HeaderText = 'Type'
    $Type.Name = 'Type'
    $Type.Width = 59 
    $Message.HeaderText = 'Message'
    $Message.Name = 'Message'
    $Message.Width = 83
    $splitcontainer2.Dock = 'Fill'
    $splitcontainer2.FixedPanel = 'Panel2'
    $splitcontainer2.IsSplitterFixed = $True 
    $splitcontainer2.Location = '0, 0'
    $splitcontainer2.Margin = '4, 5, 4, 5'
    $splitcontainer2.Name = 'splitcontainer2'
    $splitcontainer2.BackColor = $global:BGColor2
    $splitcontainer2.Orientation = 'Horizontal'
    [void]$splitcontainer2.Panel1.Controls.Add($deviceGroups)
    [void]$splitcontainer2.Panel1.Controls.Add($AvailableADCList) 
    [void]$splitcontainer2.Panel2.Controls.Add($groupbox1) 
    $splitcontainer2.Size = '417, 600' 
    $splitcontainer2.SplitterDistance = 550 
    $splitcontainer2.TabIndex = 23 
    $tooltip1.ToolTipTitle = 'Check-ADC Tip:' 
    $labelTargetDeviceGroups.Anchor = 'Top, Bottom, Left' 
    $labelTargetDeviceGroups.AutoSize = $True
    $labelTargetDeviceGroups.Font = 'Calibri, 10.8pt, style=Bold' 
    $labelTargetDeviceGroups.Location = '215, 10' 
    $labelTargetDeviceGroups.Margin = '6, 0, 6, 0' 
    $labelTargetDeviceGroups.Name = 'labelTargetDeviceGroups' 
    $labelTargetDeviceGroups.Size = '147, 23' 
    $labelTargetDeviceGroups.TabIndex = 25 
    $labelTargetDeviceGroups.Text = 'Target Device Group(s)'
    $labelTargetDeviceGroups.UseCompatibleTextRendering = $True
    $Time.HeaderText = 'Time'
    $Time.Name = 'Time'
    $Time.Width = 61 
    $Type.HeaderText = 'Type'
    $Type.Name = 'Type'
    $Type.Width = 59 
    $Message.HeaderText = 'Message'
    $Message.Name = 'Message'
    $Message.Width = 83 
    $splitcontainer2.Dock = 'Fill'
    $splitcontainer2.FixedPanel = 'Panel2'
    $splitcontainer2.IsSplitterFixed = $True 
    $splitcontainer2.Location = '0, 0'
    $splitcontainer2.Margin = '4, 5, 4, 5'
    $splitcontainer2.Name = 'splitcontainer2'
    $splitcontainer2.BackColor = $global:BGColor2
    $splitcontainer2.Orientation = 'Horizontal'
    [void]$splitcontainer2.Panel1.Controls.Add($deviceGroups)
    [void]$splitcontainer2.Panel1.Controls.Add($AvailableADCList) 
    [void]$splitcontainer2.Panel2.Controls.Add($groupbox1) 
    $splitcontainer2.Size = '417, 512' 
    $splitcontainer2.SplitterDistance = 350 
    $splitcontainer2.TabIndex = 23 
    $tooltip1.ToolTipTitle = 'Check-ADC Tip:' 
    $labelTargetDeviceGroups.Anchor = 'Top, Bottom, Left' 
    $labelTargetDeviceGroups.AutoSize = $True
    $labelTargetDeviceGroups.Font = 'Calibri, 10.8pt, style=Bold' 
    $labelTargetDeviceGroups.Location = '215, 10' 
    $labelTargetDeviceGroups.Margin = '6, 0, 6, 0' 
    $labelTargetDeviceGroups.Name = 'labelTargetDeviceGroups' 
    $labelTargetDeviceGroups.Size = '147, 23' 
    $labelTargetDeviceGroups.TabIndex = 25 
    $labelTargetDeviceGroups.Text = 'Target Device Group(s)' 
    $labelTargetDeviceGroups.UseCompatibleTextRendering = $True
    $labelTargetDevices.Anchor = 'Top, Bottom, Left'
    $labelTargetDevices.AutoSize = $True
    $labelTargetDevices.Font = 'Calibri, 10.8pt, style=Bold' 
    $labelTargetDevices.Location = '2, 10'
    $labelTargetDevices.Margin = '6, 0, 6, 0'
    $labelTargetDevices.Name = 'labelTargetDevices'
    $labelTargetDevices.Size = '105, 23'
    $labelTargetDevices.TabIndex = 24 
    $labelTargetDevices.Text = 'Target Device(s)'
    $labelTargetDevices.UseCompatibleTextRendering = $True 
    $splitcontainer3.Dock = 'Fill'
    $splitcontainer3.FixedPanel = 'Panel1'
    $splitcontainer3.IsSplitterFixed = $True 
    $splitcontainer3.Location = '0, 0'
    $splitcontainer3.Margin = '4, 5, 4, 5'
    $splitcontainer3.Name = 'splitcontainer3'
    $splitcontainer3.Orientation = 'Horizontal'
    [void]$splitcontainer3.Panel1.Controls.Add($labelTargetDevices) 
    [void]$splitcontainer3.Panel1.Controls.Add($labelTargetDeviceGroups) 
    [void]$splitcontainer3.Panel2.Controls.Add($splitcontainer2) 
    $splitcontainer3.Size = '417, 250'
    $splitcontainer3.SplitterDistance = 43 
    $splitcontainer3.SplitterWidth = 6 
    $splitcontainer3.TabIndex = 26 
    $splitcontainer3.ResumeLayout()
    $splitcontainer2.ResumeLayout()
    $groupbox1.ResumeLayout()
    $splitcontainer1.ResumeLayout()
    $ADCCheckoutWizard.ResumeLayout()
    $InitialFormWindowState = $ADCCheckoutWizard.WindowState 
    $ADCCheckoutWizard.add_Load($Form_StateCorrection_Load) 
    $ADCCheckoutWizard.add_FormClosed($Form_Cleanup_FormClosed) 
    $ADCCheckoutWizard.add_Closing($Form_StoreValues_Closing) 
    return $ADCCheckoutWizard.ShowDialog()
}               
function Show-GetADCResources
{
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $GetADCResources = New-Object 'System.Windows.Forms.Form'
    $splitcontainer1 = New-Object 'System.Windows.Forms.SplitContainer' 
    $datagridview1 = New-Object 'System.Windows.Forms.DataGridView'
    $buttonExit = New-Object 'System.Windows.Forms.Button'
    $groupbox1 = New-Object 'System.Windows.Forms.GroupBox' 
    $labelCommaseparatedListOf = New-Object 'System.Windows.Forms.Label' 
    $buttonCancel = New-Object 'System.Windows.Forms.Button'
    $buttonGetResources = New-Object 'System.Windows.Forms.Button'
    $linklabelNeedhelp = New-Object 'System.Windows.Forms.LinkLabel'
    $labelResources = New-Object 'System.Windows.Forms.Label'
    $adcResources = New-Object 'System.Windows.Forms.TextBox'
    $buttonExit = New-Object 'System.Windows.Forms.Button'
    $deviceGroups = New-Object 'System.Windows.Forms.ListBox'
    $AvailableADCList = New-Object 'System.Windows.Forms.ListBox'
    $Time = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
    $Type = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
    $Message = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
    $splitcontainer2 = New-Object 'System.Windows.Forms.SplitContainer'
    $tooltip1 = New-Object 'System.Windows.Forms.ToolTip'
    $labelTargetDeviceGroups = New-Object 'System.Windows.Forms.Label'
    $labelTargetDevices = New-Object 'System.Windows.Forms.Label'
    $splitcontainer3 = New-Object 'System.Windows.Forms.SplitContainer'
    $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
    function Update-Log ($Type, $Message)
    {
        $TimeStamp = ("{0:HH:mm:ss}" -f (Get-Date))
        $NewRow = $datagridview1.Rows.Add($TimeStamp, $Type, $Message)
        $datagridview1.FirstDisplayedScrollingRowIndex = $global:CheckLogIndex 
        $global:CheckLogIndex++
        $formMain.ResumeLayout() 
        if ($Type -eq 'Error')
        {
            $datagridview1.Rows[$NewRow].DefaultCellStyle.BackColor = $global:BGColor
        }
    }
    function Get-ADCResources
    {
        try
        {
            $ExcelProcs = Get-Process -Name excel -ErrorAction SilentlyContinue
        }
        catch
        {
            $ExcelProcs = $null
        }
        try
        {
            $Excel = New-Object -ComObject Excel.Application
        }
        catch
        {
            Update-Log -Type "Error" -Message "Unable to declare an Excel COM object, please make sure Excel is installed on this machine"
            $Answer = $PopUp.popup("Unable to declare an Excel COM object, please make sure Microsoft Excel is installed on this machine or try again from a machine where Excel is installed", 0, "Install Excel")
            $GetADCResources.Close()
        }
        $Excel.Visible = $false 
        $Excel.DisplayAlerts = $false 
        $Excel.ScreenUpdating = $False 
        $WorkBook = $Excel.WorkBooks.add(1)
        $Sheet = 1
        
        foreach ($DG in $deviceGroups.SelectedItems)
        {
            Update-Log -Type "Info" -Message "Gathering ADCs from $($DG.name)" 
            foreach ($ADCIP in $DG.static_device_list_arr)
            {
                $Match = $AvailableADCList.Items | Where-Object -FilterScript { $_.display_name -eq $ADCIP } 
                foreach ($HostName in $Match.hostname)
                {
                    $Index = $AvailableADCList.FindString($HostName)
                    $AvailableADCList.SetSelected($Index, $true)
                    Update-Log -Type "Info" -Message "Selecting $($Match.hostname) from $($DG.name)"
                }
            }
        }
        $adcResources.Text = $adcResources.Text.Replace(' ','')
        $ResourceTypes = $adcResources.Text.Split(',')
        $RunningCollection = @{ }
        $formMain.ResumeLayout()
        Update-Log -Type "Info" -Message "Getting $($ResourceTypes.Count) objects from $($AvailableADCList.SelectedItems.Count) ADCs"
        foreach ($TargetADC in $AvailableADCList.SelectedItems)
        {
            Update-Log -Type "Info" -Message "Initializing object for $($TargetADC.hostname)"
            $Running = @(); $ADCKey = @{ }
            foreach ($ResourceType in $ResourceTypes)
            {
                if ($global:Cancel -eq $false)
                {
                    $jobVars = @{
                        ADMSession = $global:ADMSession                         
                        OperationMethod = "GET"
                        ResourceType = $ResourceType
                        ADCHost = $TargetADC.ip_address
                    }
                    try
                    {                        
                        Set-Variable -Name Running -Value @() -Scope Global
                        Update-Log -Type "Info" -Message "Getting $ResourceType from $($TargetADC.hostname)"
                        $global:Running += (Start-BackgroundJob -job ${Function:Invoke-ADMNitro} -jobvariables $jobVars -formLayout $formMain).$ResourceType
                        $ADCKey.Add($ResourceType, $global:Running)
                    }
                    catch
                    {
                        Update-Log -Type "Error" -Message "Unable to get $ResourceType from $($TargetADC.hostname) via $ADMHost - $_.Exception"
                    }
                }
            }
            Update-Log -Type "Info" -Message "Got $($Masters.Keys.Count) configuration objects from $($TargetADC.hostname)" 
            $formMain.ResumeLayout()
            if ($ADCKey.length -gt 0 -and $global:Cancel -eq $false)
            {
                $RunningCollection.Add($TargetADC.hostname, $ADCKey)
            }
        }
        Update-Log -Type "Info" -Message "Building spreadsheet" 
        foreach ($ResourceType in $ResourceTypes)
        {
            $Output = @(); $Row = 1; $Column = 1; $Columns = @()
            $WorkBook = $Excel.Workbooks.Item(1)
            if ($Sheet -gt 1)
            {
                $WorkBook.Worksheets.Add([System.Reflection.Missing]::Value, $WorkBook.Worksheets.Item($WorkBook.Worksheets.count))
            }                
            $WorkSheet = $WorkBook.Worksheets.Item($Sheet)
            $WorkSheet.Name = $ResourceType 
            $WorkSheet.Activate()
            foreach ($ADC in $RunningCollection.Keys)
            {
                if ($global:Cancel -eq $false)
                {
                    foreach ($Object in $RunningCollection.$ADC.$ResourceType | Where-Object {$_ -ne $null})
                    {
                        foreach ($Key in ($Object | Convert-ObjectToHash).Keys)
                        {
                            if ($Key -notin $Columns)
                            {
                                $Columns += $Key
                            }
                        }
                    }
                }
            }
            $Worksheet.Cells.Item($Row, $Column) = "hostname"
            $Column++
            foreach ($Key in $Columns)
            {
                $WorkSheet.Cells.Item($Row, $Column) = $Key 
                $WorkSheet.Cells.Item($Row, $Column).Font.Bold = $true 
                $Column++
            }
            $Row++
            foreach ($ADC in $RunningCollection.Keys)
            {
                if ($global:Cancel -eq $false)
                {
                    foreach ($Object in $RunningCollection.$ADC.$ResourceType)
                    {                        
                        $Column = 1                     
                        $Worksheet.Cells.Item($Row, $Column) = $ADC 
                        $Column++
                        foreach ($Key in $Columns)
                        {
                            $Worksheet.Cells.Item($Row, $Column) = $Object.$Key 
                            $Column++
                        }
                        $Row++
                    }
                }
            }
            $Start = [int][char]'a' - 1 
            [char]$ColumnChar = [char]($Column + $Start)
            if ($AutoWidth -eq $true)
            {
                try
                {
                    $WorkSheet.Columns.Item(("A" + ":" + $ColumnChar)).EntireColumn.AutoFit() | Out-Null
                }
                catch
                {
                    Update-Log -Type "Error" -Message "Couldn't resize columns in the $($WorkSheet.Name) sheet"
                }
            }
            
            $ListObject = $WorkSheet.ListObjects.Add([Microsoft.Office.Interop.Excel.XlListObjectSourceType]::xlsrcRange, $Excel.ActiveCell.CurrentRegion, $null, [Microsoft.Office.Interop.Excel.xlYesNoGuess]::xlYes)
            $ListObject.Name = $ResourceType                
            $WorkSheet.application.activewindow.splitcolumn = 0 | Out-Null 
            $WorkSheet.application.activewindow.splitrow = 1 | Out-Null 
            $WorkSheet.application.activewindow.freezepanes = $true | Out-Null 
            $Sheet++
        }                
        if ($WorkSheet.name.length -gt 0 -and $global:Cancel -eq $false)
        {
            $WorkSheet = $WorkBook.Worksheets.Item(1)
            $WorkSheet.Activate()
            $OutFile = ($env:temp + "\$(Get-Date -Format "MMddy-hhmm")_ADC-Resources.xlsx")
            $WorkBook.SaveAs($OutFile)
            $Excel.Workbooks.Close()
            $Excel.Quit()
            [System.GC]::Collect()
            [System.GC]::WaitForPendingFinalizers()
            [System.Runtime.InteropServices.Marshal]::ReleaseComObject($WorkSheet)
            [System.Runtime.InteropServices.Marshal]::ReleaseComObject($Excel)
            Remove-Variable -Name excel
            $NewProcs = Get-Process -Name excel -ErrorAction SilentlyContinue 
            foreach ($ProcID in $NewProcs.Id)
            {
                if ($ProcID -notin $ExcelProcs.Id)
                {
                    Stop-Process -Id $ProcId
                }
            }
            Invoke-Item $OutFile
        }
        else
        {
            if ($global:Cancel -eq $true)
            {
                Update-Log -Type "Info" -Message "Checkout canceled"
            }
            else
            {
                Update-Log -Type "Error" -Message "No results were found"
            }
        }
    }            
    $GetADCResources_Load = {
        Set-Variable -Name Checked -Value $false -Scope Global
        Update-ListBox -ListBox $AvailableADCList -Items $global:CurrentADCs "hostname" 
        Update-ListBox -ListBox $deviceGroups -Items $global:CurrentDGs "name"
        Set-Variable -Name CheckLogIndex -Value 0 -Scope Global
    }
    $GetADCResources_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{        
        [System.GC]::Collect()
    }
    $buttonExit_Click={
        $GetADCResources.Close()
    }
    $linklabelNeedHelp_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
        Start $helpUrl
    }
    $buttonCheckNow_Click = {
        $this.Enabled = $false 
        $buttonCancel.Enabled = $true
        Set-Variable -Name Cancel -Value $false -Scope Global 
        try 
        {
            $OutFile = ($env:TEMP + "\$(Get-Date -Format "MMddy-hhmm")_ADC_Resources.xlsx")
            if (!(Get-Item $OutFile -ErrorAction SilentlyContinue) -and $global:Checked -eq $false)
            {
                $PopUp = New-Object -ComObject wscript.shell
                if ($AvailableADCList.SelectedItem -eq $null -and $deviceGroups.SelectedItem -eq $null)
                {
                    $Answer = $PopUp.popup("Please select at least one Target ADC or Device Group", 0, "Select an ADC") 
                    [System.Windows.Forms.Application]::DoEvents()                            
                }
                else
                {                       
                    $adcResources.Text = $adcResources.Text.TrimEnd(',')
                    $AvailableADCList.Enabled = $false 
                    $deviceGroups.Enabled = $false 
                    $adcResources.Enabled = $false 
                    [System.Windows.Forms.Application]::DoEvents() 
                    try 
                    {
                        Get-ADCResources
                        $global:Checked = $true
                        $AvailableADCList.Enabled = $true
                        $deviceGroups.Enabled = $true
                        $adcResources.Enabled = $true
                        [System.Windows.Forms.Application]::DoEvents()
                    }
                    catch
                    {
                        Update-Log -Type "Error" -Message "An error occured in Check-ADC: $($_.Exception)"
                    }
                }
            }
        }
        catch
        {
            Update-Log -Type "Error" -Message "Something went wrong! $($_.Exception)"
        }
        
        [System.Windows.Forms.Application]::DoEvents()
        $this.Enabled = $true
    }
    $buttonCancel_Click = {
        $global:Cancel = $true
    }
    $Form_StateCorrection_Load=
    {            
        $GetADCResources.WindowState = $InitialFormWindowState
    }
    $Form_StoreValues_Closing=
    {            
        $script:Get_ADCResources_datagridview1 = $datagridview1.SelectedCells 
        $script:Get_ADCResources_adcResources = $adcResources.Text 
        $script:Get_ADCResources_deviceGroups = $deviceGroups.SelectedItems 
        $script:Get_ADCResources_AvailableADCList = $AvailableADCList.SelectedItems
    }
    $Form_Cleanup_FormClosed=
    {                
        $GetADCResources.remove_Load($GetADCResources_Load)
        $buttonExit.remove_Click($buttonExit_Click)
        $buttonCancel.remove_Click($buttonCancel_Click)
        $buttonGetResources.remove_Click($buttonCheckNow_Click) 
        $linklabelNeedHelp.remove_LinkClicked($linklabelNeedHelp_LinkClicked) 
        $buttonExit.remove_Click($buttonExit_Click)
        $GetADCResources.remove_Load($Form_StateCorrection_Load) 
        $GetADCResources.remove_Closing($Form_StoreValues_Closing) 
        $GetADCResources.remove_FormClosed($Form_Cleanup_FormClosed)
    }            
    $GetADCResources.SuspendLayout()
    $splitcontainer1.SuspendLayout()
    $groupbox1.SuspendLayout()
    $splitcontainer2.SuspendLayout()
    $splitcontainer3.SuspendLayout()
    $GetADCResources.Controls.Add($splitcontainer1)
    $GetADCResources.AutoScaleDimensions = '7, 17'
    $GetADCResources.AutoScaleMode = 'Font'
    $GetADCResources.AutoSize = $True 
    $GetADCResources.BackColor = '56, 56, 56'
    $GetADCResources.CancelButton = $buttonExit 
    $GetADCResources.ClientSize = '1006, 561'
    $GetADCResources.Font = 'Calibri, 10.2pt'
    $GetADCResources.ForeColor = 'ButtonFace' 
    $GetADCResources.Icon = [System.Convert]::FromBase64String($IconData)
    $GetADCResources.Margin = '6, 6, 6, 6'
    $GetADCResources.MinimumSize = '765, 600'
    $GetADCResources.Name = 'GetADCResources'
    $GetADCResources.Startposition = 'CenterScreen'
    $GetADCResources.Text = 'Get ADC Resources'
    $GetADCResources.add_Load($GetADCResources_Load)
    $splitcontainer1.Dock = 'Fill'
    $splitcontainer1.FixedPanel = 'Panel1'
    $splitcontainer1.IsSplitterFixed = $True 
    $splitcontainer1.Location = '0, 0'
    $splitcontainer1.Margin = '4, 5, 4, 5'
    $splitcontainer1.Name = 'splitcontainer1'
    $splitcontainer1.BackColor = $global:BGColor2
    [void]$splitcontainer1.Panel1.Controls.Add($splitcontainer3)
    [void]$splitcontainer1.Panel2.Controls.Add($datagridview1)
    $splitcontainer1.Size = '1006, 561'
    $splitcontainer1.SplitterDistance = 417 
    $splitcontainer1.TabIndex = 22
    $datagridview1.AutoSizeColumnsMode = 'AllCells'
    $datagridview1.BackgroundColor = $global:BGColor
    $System_Windows_Forms_DataGridViewCellStyle_1 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
    $System_Windows_Forms_DataGridViewCellStyle_1.Alignment = 'MiddleLeft' 
    $System_Windows_Forms_DataGridViewCellStyle_1.BackColor = $global:BGColor 
    $System_Windows_Forms_DataGridViewCellStyle_1.Font = 'Calibri, 10.2pt' 
    $System_Windows_Forms_DataGridViewCellStyle_1.ForeColor = 'Info' 
    $System_Windows_Forms_DataGridViewCellStyle_1.SelectionBackColor = 'Highlight' 
    $System_Windows_Forms_DataGridViewCellStyle_1.SelectionForeColor = 'HighlightText' 
    $System_Windows_Forms_DataGridViewCellStyle_1.WrapMode = 'True'
    $datagridview1.ColumnHeadersDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1 
    $datagridview1.ColumnHeadersHeightSizeMode = 'AutoSize'
    [void]$datagridview1.Columns.Add($Time)
    [void]$datagridview1.Columns.Add($Type)
    [void]$datagridview1.Columns.Add($Message)
    $System_Windows_Forms_DataGridViewCellStyle_2 = New-Object 'System.Windows.Forms.DataGridViewCellStyle' 
    $System_Windows_Forms_DataGridViewCellStyle_2.Alignment = 'MiddleLeft' 
    $System_Windows_Forms_DataGridViewCellStyle_2.BackColor = '56, 56, 56' 
    $System_Windows_Forms_DataGridViewCellStyle_2.Font = 'Calibri, 10.2pt'
    $System_Windows_Forms_DataGridViewCellStyle_2.ForeColor = 'ButtonFace' 
    $System_Windows_Forms_DataGridViewCellStyle_2.SelectionBackColor = 'Highlight' 
    $System_Windows_Forms_DataGridViewCellStyle_2.SelectionForeColor = 'HighlightText'
    $System_Windows_Forms_DataGridViewCellStyle_2.WrapMode = 'False'
    $dataGridview1.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
    $dataGridview1.Dock = 'Fill'
    $dataGridview1.EnableHeadersVisualStyles = $False 
    $datagridview1.GridColor = '150, 150, 150'
    $datagridview1.Location = '0, 0'
    $datagridview1.Margin = '4, 5, 4, 5'
    $datagridview1.Name = 'dataGridview1'
    $dataGridview1.RowHeadersVisible = $False 
    $dataGridview1.RowTemplate.Height = 24 
    $datagridview1.Size = '585, 561'
    $datagridview1.TabIndex = 21 
    $buttonExit.DialogResult = 'Cancel'
    $buttonExit.Font = 'Calibri, 10.2pt'
    $buttonExit.ForeColor = 'ActiveCaptionText'
    $buttonExit.Location = '13, 109'
    $buttonExit.Margin = '4, 5, 4, 5'
    $buttonExit.Name = 'buttonExit'
    $buttonExit.Size = '110, 37'
    $buttonExit.TabIndex = 4 
    $buttonExit.Text = 'E&xit'
    $buttonExit.UseCompatibleTextRendering = $True 
    $buttonExit.UseVisualStyleBackColor = $True
    $buttonExit.add_Click($buttonExit_Click)
    $groupbox1.Controls.Add($labelCommaseparatedListOf)
    $groupbox1.Controls.Add($buttonCancel)
    $groupbox1.Controls.Add($buttonGetResources)
    $groupbox1.Controls.Add($linklabelNeedHelp)
    $groupbox1.Controls.Add($labelResources)
    $groupbox1.Controls.Add($adcResources)
    $groupbox1.Controls.Add($buttonExit)
    $groupbox1.Dock = 'Fill'
    $groupbox1.FlatStyle = 'Flat'
    $groupbox1.ForeColor = $global:FGColor
    $groupbox1.Location = '0, 0'
    $groupbox1.Margin = '5, 5, 5, 5'     
    $groupbox1.Name = 'groupbox1'
    $groupbox1.Padding = '5, 5, 5, 5'
    $groupbox1.Size = '417, 160'
    $groupbox1.TabIndex = 18 
    $groupbox1.TabStop = $False 
    $groupbox1.Text = 'Checkout Settings' 
    $groupbox1.UseCompatibleTextRendering = $True 
    $labelCommaseparatedListOf.AutoSize = $True
    $labelCommaseparatedListOf.Font = 'Calibri Light, 10.8pt, style=Italic' 
    $labelCommaseparatedListOf.Location = '133, 75' 
    $labelCommaseparatedListOf.Margin = '4, 0, 4, 0' 
    $labelCommaseparatedListOf.Name = 'labelCommaseparatedListOf' 
    $labelCommaseparatedListOf.Size = '197, 23'
    $labelCommaseparatedListOf.TabIndex = 16
    $labelCommaseparatedListOf.Text = 'Comma-separated list of objects' 
    $labelCommaseparatedListOf.UseCompatibleTextRendering = $True 
    $buttonCancel.Enabled = $False
    $buttonCancel.Font = 'Calibri, 10.8pt'
    $buttonCancel.ForeColor = 'Black'
    $buttonCancel.Location = '161, 109'
    $buttonCancel.Margin = '4, 5, 4, 5'
    $buttonCancel.Name = 'buttonCancel'
    $buttonCancel.Size = '109, 37'
    $buttonCancel.TabIndex = 15 
    $buttonCancel.Text = 'C&ancel'
    $buttonCancel.UseCompatibleTextRendering = $True 
    $buttonCancel.UseVisualStyleBackColor = $True 
    $buttonCancel.add_Click($buttonCancel_Click)
    $buttonGetResources.Font = 'Calibri, 10.8pt, style=Bold' 
    $buttonGetResources.ForeColor = 'Black'
    $buttonGetResources.Location = '278, 109'
    $buttonGetResources.Margin = '4, 5, 4, 5'
    $buttonGetResources.Name = 'buttonGetResources'
    $buttonGetResources.Size = '129, 37'
    $buttonGetResources.TabIndex = 14 
    $buttonGetResources.Text = '&Get Resources'
    $buttonGetResources.UseCompatibleTextRendering = $True 
    $buttonGetResources.UseVisualStyleBackColor = $True 
    $buttonGetResources.add_Click($buttonCheckNow_Click)
    $linklabelNeedHelp.Font = 'Calibri, 10.2pt, style=Bold'
    $linklabelNeedHelp.LinkColor = 'Cyan'
    $linklabelNeedHelp.Location = '33, 76'
    $linklabelNeedHelp.Margin = '4, 0, 4, 0'
    $linklabelNeedHelp.Name = 'linklabelNeedHelp'
    $linklabelNeedHelp.Size = '95, 24'
    $linklabelNeedHelp.TabIndex = 12 
    $linklabelNeedHelp.TabStop = $True 
    $linklabelNeedHelp.Text = 'Need Help?'
    $linklabelNeedHelp.UseCompatibleTextRendering = $True 
    $linklabelNeedHelp.add_LinkClicked($linklabelNeedHelp_LinkClicked)
    $labelResources.AutoSize = $True 
    $labelResources.Font = 'Calibri, 10.8pt'
    $labelResources.Location = '34, 43'
    $labelResources.Margin = '4, 0, 4, 0'
    $labelResources.Name = 'labelResources'
    $labelResources.Size = '71, 23'
    $labelResources.TabIndex = 5 
    $labelResources.Text = 'Resources:'
    $labelResources.UseCompatibleTextRendering = $True 
    $adcResources.BackColor = $global:BGColor
    $adcResources.ForeColor = $global:FGColor
    $adcResources.Location = '133, 42'
    $adcResources.Margin = '4, 5, 4, 5'
    $adcResources.Name = 'adcResources'
    $adcResources.ScrollBars = 'Horizontal'
    $adcResources.Size = '274, 24'
    $adcResources.TabIndex = 4 
    $adcResources.Text = 'lbvserver,vpnvserver'
    $tooltip1.SetToolTip($adcResources, 'Base path to the checkouts to perform (all child .json files will be included)') 
    $adcResources.Wordwrap = $False 
    $buttonExit.DialogResult = 'Cancel'
    $buttonExit.Font = 'Calibri, 10.2pt'
    $buttonExit.ForeColor = 'ActiveCaptionText'
    $buttonExit.Location = '13, 109'
    $buttonExit.Margin = '4, 5, 4, 5'
    $buttonExit.Name = 'buttonExit'
    $buttonExit.Size = '110, 37'
    $buttonExit.TabIndex = 4 
    $buttonExit.Text = 'E&xit'   
    $buttonExit.Tabindex = 4 
    $buttonExit.Text = 'E&xit'
    $buttonExit.UseCompatibleTextRendering = $True 
    $buttonExit.UseVisualStyleBackColor = $True 
    $buttonExit.add_Click($buttonExit_Click)
    $deviceGroups.BackColor = $global:BGColor
    $deviceGroups.Dock = 'Right'
    $deviceGroups.Font = 'Calibri, 10.8pt'
    $deviceGroups.ForeColor = $global:FGColor
    $deviceGroups.FormattingEnabled = $True 
    $deviceGroups.ItemHeight = 17 
    $deviceGroups.Location = '212, 0'
    $deviceGroups.Margin = '4, 5, 4, 5'
    $deviceGroups.Name = 'deviceGroups'
    $deviceGroups.SelectionMode = 'MultiExtended'
    $deviceGroups.Size = '205, 348'
    $deviceGroups.TabIndex = 17 
    $AvailableADCList.BackColor = $global:BGColor
    $AvailableADCList.Dock = 'Left'
    $AvailableADCList.Font = 'Calibri, 10.8pt'
    $AvailableADCList.ForeColor = $global:FGColor
    $AvailableADCList.FormattingEnabled = $True 
    $AvailableADCList.ItemHeight = 17 
    $AvailableADCList.Location = '0, 0'
    $AvailableADCList.Margin = '4, 5, 4, 5'
    $AvailableADCList.Name = 'AvailableADCList'
    $AvailableADCList.SelectionMode = 'MultiExtended' 
    $AvailableADCList.Size = '204, 348'
    $AvailableADCList.Sorted = $True 
    $AvailableADCList.TabIndex = 16 
    $Time.HeaderText = 'Time'
    $Time.Name = 'Time'
    $Time.Width = 61 
    $Type.HeaderText = 'Type'
    $Type.Name = 'Type'
    $Type.Width = 59 
    $Message.HeaderText = 'Message'
    $Message.Name = 'Message'
    $Message.Width = 83 
    $splitcontainer2.Dock = 'Fill'
    $splitcontainer2.FixedPanel = 'Panel2' 
    $splitcontainer2.IsSplitterFixed = $True 
    $splitcontainer2.Location = '0, 0'
    $splitcontainer2.Margin = '4, 5, 4, 5'
    $splitcontainer2.Name = 'splitcontainer2'
    $splitcontainer2.BackColor = $global:BGColor2
    $splitcontainer2.Orientation = 'Horizontal'
    [void]$splitcontainer2.Panel1.Controls.Add($deviceGroups)
    [void]$splitcontainer2.Panel1.Controls.Add($AvailableADCList) 
    [void]$splitcontainer2.Panel2.Controls.Add($groupbox1) 
    $splitcontainer2.Size = '417, 512' 
    $splitcontainer2.SplitterDistance = 348 
    $splitcontainer2.TabIndex = 23 
    $tooltip1.ToolTipTitle = 'Check-ADC Tip:' 
    $labelTargetDeviceGroups.Anchor = 'Top, Bottom, Left' 
    $labelTargetDeviceGroups.AutoSize = $True
    $labelTargetDeviceGroups.Font = 'Calibri, 10.8pt, style=Bold' 
    $labelTargetDeviceGroups.Location = '215, 10' 
    $labelTargetDeviceGroups.Margin = '6, 0, 6, 0' 
    $labelTargetDeviceGroups.Name = 'labelTargetDeviceGroups' 
    $labelTargetDeviceGroups.Size = '147, 23' 
    $labelTargetDeviceGroups.TabIndex = 25
    $labelTargetDeviceGroups.Text = 'Target Device Group(s)' 
    $labelTargetDeviceGroups.UseCompatibleTextRendering = $True 
    $labelTargetDevices.Anchor = 'Top, Bottom, Left' 
    $labelTargetDevices.AutoSize = $True
    $labelTargetDevices.Font = 'Calibri, 10.8pt, style=Bold'
    $labelTargetDevices.Location = '2, 10'
    $labelTargetDevices.Margin = '6, 0, 6, 0'
    $labelTargetDevices.Name = 'labelTargetDevices' 
    $labelTargetDevices.Size = '105, 23'
    $labelTargetDevices.TabIndex = 24 
    $labelTargetDevices.Text = 'Target Device(s)' 
    $labelTargetDevices.UseCompatibleTextRendering = $True 
    $splitcontainer3.Dock = 'Fill'
    $splitcontainer3.FixedPanel = 'Panel1'
    $splitcontainer3.IsSplitterFixed = $True 
    $splitcontainer3.Location = '0, 0'
    $splitcontainer3.Margin = '4, 5, 4, 5'
    $splitcontainer3.Name = 'splitcontainer3'
    $splitcontainer3.Orientation = 'Horizontal'
    [void]$splitcontainer3.Panel1.Controls.Add($labelTargetDevices) 
    [void]$splitcontainer3.Panel1.Controls.Add($labelTargetDeviceGroups) 
    [void]$splitcontainer3.Panel2.Controls.Add($splitcontainer2) 
    $splitcontainer3.Size = '417, 561'
    $splitcontainer3.SplitterDistance = 43 
    $splitcontainer3.SplitterWidth = 6 
    $splitcontainer3.TabIndex = 26 
    $splitcontainer3.ResumeLayout()
    $splitcontainer2.ResumeLayout()
    $groupbox1.ResumeLayout()
    $splitcontainer1.ResumeLayout()
    $GetADCResources.ResumeLayout()
    $InitialFormWindowState = $GetADCResources.WindowState 
    $GetADCResources.add_Load($Form_StateCorrection_Load) 
    $GetADCResources.add_FormClosed($Form_Cleanup_FormClosed) 
    $GetADCResources.add_Closing($Form_StoreValues_Closing) 
    return $GetADCResources.ShowDialog()
}
function Show-GetPassword
{
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formEnterPassword = New-Object 'System.Windows.Forms.Form'
    $password = New-Object 'System.Windows.Forms.TextBox'
    $buttonOK = New-Object 'System.Windows.Forms.Button'
    $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
    $formEnterPassword_Load={
        $password.Focus()
    }
    $buttonOK_Click={
        Set-Variable -Value $password.Text -Scope Global -Name ADMPass
    }
    $Form_StateCorrection_Load=
    {
        $formEnterPassword.WindowState = $InitialFormWindowState
        $password.Focus()
    }
    $Form_StoreValues_Closing=
    {
        $script:ShowPassword_password = $password.Text
    }
    $Form_Cleanup_FormClosed=
    {
        $buttonOK.remove_Click($buttonOK_Click)
        $formEnterPassword.remove_Load($formEnterPassword_Load)
        $formEnterPassword.remove_Load($Form_StateCorrection_Load)
        $formEnterPassword.remove_Closing($Form_StoreValues_Closing)
        $formEnterPassword.remove_FormClosed($Form_Cleanup_FormClosed)
    }
    $formEnterPassword.SuspendLayout()
    $formEnterPassword.Controls.Add($password)
    $formEnterPassword.Controls.Add($buttonOK)
    $formEnterPassword.AcceptButton = $buttonOK 
    $formEnterPassword.AutoScaleDimensions = '10, 20'
    $formEnterPassword.AutoScaleMode = 'Font'
    $formEnterPassword.FormBorderStyle = 'FixedDialog' 
    $formEnterPassword.Margin = '8, 8, 8, 8'
    $formEnterPassword.Name = 'formEnterPassword' 
    $formEnterPassword.Startposition = 'CenterScreen' 
    $formEnterPassword.Text = "Enter Password for $($global:ADMUser):"
    $formEnterPassword.add_Load($formEnterPassword_Load)     
    $formEnterPassword.MaximizeBox = $False 
    $formEnterPassword.MaximumSize = '350, 95'
    $formEnterPassword.MinimizeBox = $False 
    $formEnterPassword.MinimumSize = '350, 95'
    $password.Location = '14, 10'
    $password.Margin = '5, 5, 5, 5'
    $password.Name = 'password'
    $password.PasswordChar = '*'
    $password.Size = '164, 26'
    $password.Tabindex = 1 
    $buttonOK.Anchor = 'Bottom, Right'
    $buttonOK.DialogResult = 'OK'
    $buttonOK.Location = '200, 10'
    $buttonOK.Margin = '5, 5, 5, 5'
    $buttonOK.Name = 'buttonOK'
    $buttonOK.Size = '125, 35'
    $buttonOK.TabIndex = 0 
    $buttonOK.Text = '&0K'
    $buttonOK.UseCompatibleTextRendering = $True 
    $buttonOK.UseVisualStyleBackColor = $True 
    $buttonOK.add_Click($buttonOK_Click)
    $formEnterPassword.ResumeLayout()
    $InitialFormWindowState = $formEnterPassword.WindowState 
    $formEnterPassword.add_Load($Form_StateCorrection_Load) 
    $formEnterPassword.add_FormClosed($Form_Cleanup_FormClosed) 
    $formEnterPassword.add_Closing($Form_StoreValues_Closing) 
    $password.Focus()
    return $formEnterPassword.ShowDialog()
}
function Show-PrefEditor
{
    function ApplyColor 
    {
        $Colors = @{
            "FGColor" = $FGColorTextBox.Text
            "BGColor" = $BGColorTextBox.Text
            "BGColor2" = $BGColor2TextBox.Text
            "HeadingColor" = $HeadingColorTextBox.Text            
        }
        foreach ($Property in $Colors.Keys)
        {
            $Expression = "`$global:$($Property) = `$$($Property)TextBox.Text"
            Invoke-Expression $Expression                 
            $ExistingValues = Get-Registry $RegistryPath 
            if ($Property -in $ExistingValues.property)
            {
                try
                {
                    Set-ItemProperty -Path $RegistryPath -Name $Property -Value $Colors.$Property
                    Write-Log "Info" (Get-LineNumber) "Set $Property in $RegistryPath"
                }
                catch
                {
                    Write-Log "Error" (Get-LineNumber) "Unable to set $Property in $RegistryPath : $_.Exception"
                }
            }
            else
            {
                try
                {
                    New-ItemProperty -Path $RegistryPath -Name $Property -Value $Colors.$Property                     
                    Write-Log "Info" (Get-LineNumber) "Set $Property in $RegistryPath"
                }
                catch
                {
                    Write-Log "Error" (Get-LineNumber) "Unable to set $Property in $RegistryPath : $_.Exception"
                }
            }
        }
        $formPrefEditor.BackColor = $global:BGColor
        $formPrefEditor.ForeColor = $global:FGColor
        $ColorGroupBox.ForeColor  = $global:FGColor
        $TextColorLabel.ForeColor = $global:FGColor
        $HeadingLabel.BackColor   = $global:HeadingColor
        $BGColor2Label.BackColor  = $global:BGColor2
        Set-MainFormColor
    }
    Add-Type -AssemblyName System.Windows.Forms
    [System.Windows.Forms.Application]::EnableVisualStyles()

    $formPrefEditor                 = New-Object system.Windows.Forms.Form
    $formPrefEditor.ClientSize      = New-Object System.Drawing.Point(263,146)
    $formPrefEditor.text            = "Edit Preferences"
    $formPrefEditor.TopMost         = $false
    $formPrefEditor.Icon            = [System.Convert]::FromBase64String($IconData)
    $formPrefEditor.BackColor       = $global:BGColor
    $formPrefEditor.ForeColor       = $global:FGColor
    $formPrefEditor.AutoSize        = $true

    $FGColorTextBox                 = New-Object system.Windows.Forms.TextBox
    $FGColorTextBox.multiline       = $false
    $FGColorTextBox.width           = 100
    $FGColorTextBox.height          = 20
    $FGColorTextBox.location        = New-Object System.Drawing.Point(9,16)
    $FGColorTextBox.Font            = $CellFont
    $FGColorTextBox.Text            = $global:FGColor

    $TextColorLabel                 = New-Object system.Windows.Forms.Label
    $TextColorLabel.text            = "Text Color"
    $TextColorLabel.AutoSize        = $true
    $TextColorLabel.width           = 25
    $TextColorLabel.height          = 10
    $TextColorLabel.location        = New-Object System.Drawing.Point(123,18)
    $TextColorLabel.Font            = $CellFont

    $BGColorTextBox                 = New-Object system.Windows.Forms.TextBox
    $BGColorTextBox.multiline       = $false
    $BGColorTextBox.width           = 100
    $BGColorTextBox.height          = 20
    $BGColorTextBox.location        = New-Object System.Drawing.Point(9,42)
    $BGColorTextBox.Font            = $CellFont
    $BGColorTextBox.Text            = $global:BGColor

    $BGColorLabel                   = New-Object system.Windows.Forms.Label
    $BGColorLabel.text              = "Background Color"
    $BGColorLabel.AutoSize          = $true
    $BGColorLabel.width             = 25
    $BGColorLabel.height            = 10
    $BGColorLabel.location          = New-Object System.Drawing.Point(123,46)
    $BGColorLabel.Font              = $CellFont    

    $ColorGroupBox                   = New-Object system.Windows.Forms.Groupbox
    $ColorGroupBox.height            = 175
    $ColorGroupBox.width             = 275
    $ColorGroupBox.text              = "Appearance"
    $ColorGroupBox.location          = New-Object System.Drawing.Point(10,12)
    $ColorGroupBox.Font              = $CellFont
    $ColorGroupBox.ForeColor         = $global:FGColor
    $ColorGroupBox.Padding = "5,5,5,5"

    $ApplyButton                     = New-Object system.Windows.Forms.Button
    $ApplyButton.text                = "Apply"
    $ApplyButton.width               = 60
    $ApplyButton.height              = 30
    $ApplyButton.location            = New-Object System.Drawing.Point(171,130)
    $ApplyButton.Font                = $CellFont
    $BGColor2TextBox                 = New-Object system.Windows.Forms.TextBox

    $BGColor2TextBox.multiline       = $false
    $BGColor2TextBox.width           = 100
    $BGColor2TextBox.height          = 20
    $BGColor2TextBox.location        = New-Object System.Drawing.Point(9,69)
    $BGColor2TextBox.Font            = $CellFont
    $BGColor2TextBox.Text            = $global:BGColor2

    $BGColor2Label                   = New-Object system.Windows.Forms.Label
    $BGColor2Label.text              = "Background Color 2"
    $BGColor2Label.AutoSize          = $true
    $BGColor2Label.width             = 25
    $BGColor2Label.height            = 10
    $BGColor2Label.location          = New-Object System.Drawing.Point(123,72)
    $BGColor2Label.Font              = $CellFont
    $BGColor2Label.BackColor         = $global:BGColor2

    $HeadingColorTextBox                   = New-Object system.Windows.Forms.TextBox
    $HeadingColorTextBox.multiline         = $false
    $HeadingColorTextBox.width             = 100
    $HeadingColorTextBox.height            = 20
    $HeadingColorTextBox.location          = New-Object System.Drawing.Point(9,96)
    $HeadingColorTextBox.Font              = $CellFont
    $HeadingColorTextBox.Text              = $global:HeadingColor
    

    $HeadingLabel                     = New-Object system.Windows.Forms.Label
    $HeadingLabel.text                = "Header Color"
    $HeadingLabel.AutoSize            = $true
    $HeadingLabel.width               = 25
    $HeadingLabel.height              = 10
    $HeadingLabel.location            = New-Object System.Drawing.Point(123,99)
    $HeadingLabel.Font                = $CellFont
    $HeadingLabel.BackColor           = $global:HeadingColor    

    $ColorGroupBox.controls.AddRange(@($FGColorTextBox,$TextColorLabel,$BGColorTextBox,$BGColorLabel,$ApplyButton,$BGColor2TextBox,$BGColor2Label,$HeadingColorTextBox,$HeadingLabel))
    $formPrefEditor.controls.AddRange(@($ColorGroupBox))
    $ApplyButton.Add_Click({  
        ApplyColor
    })
    return $formPrefEditor.ShowDialog()
}
#endregion
#region Main
Main ($CommandLine)
#endregion
